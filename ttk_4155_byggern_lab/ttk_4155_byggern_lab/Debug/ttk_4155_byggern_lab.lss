
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079c  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000045  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:


//void USART_Flush();

int main(void){
	USART_drv_init(MYUBRR);
  88:	8f e1       	ldi	r24, 0x1F	; 31
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_drv_init>
	//DDRB = 0xFF;
    while (1){
		//PORTB |= (1 << PB0);
		unsigned char my_char = 0x00;
		my_char = USART_Receive();
  90:	0e 94 5a 00 	call	0xb4	; 0xb4 <USART_Receive>
		if (my_char != 0x00){
  94:	88 23       	and	r24, r24
  96:	e1 f3       	breq	.-8      	; 0x90 <main+0x8>
		USART_Transmit(my_char);
  98:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
  9c:	f9 cf       	rjmp	.-14     	; 0x90 <main+0x8>

0000009e <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  9e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
  a0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  a6:	8e e8       	ldi	r24, 0x8E	; 142
  a8:	80 bd       	out	0x20, r24	; 32
  aa:	08 95       	ret

000000ac <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  b0:	8c b9       	out	0x0c, r24	; 12
  b2:	08 95       	ret

000000b4 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
  b4:	5f 9b       	sbis	0x0b, 7	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
  b8:	8c b1       	in	r24, 0x0c	; 12

}
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
