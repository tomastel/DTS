
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001da  008001da  00000fe0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b54  00000000  00000000  0000225f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  00002db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fc  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a8  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_1>
   8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_2>
   c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e7       	ldi	r30, 0x72	; 114
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 3d       	cpi	r26, 0xDA	; 218
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa ed       	ldi	r26, 0xDA	; 218
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 3e       	cpi	r26, 0xE6	; 230
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  a6:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
  cc:	8f b5       	in	r24, 0x2f	; 47
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
  d8:	8f b5       	in	r24, 0x2f	; 47
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
  e4:	8e b5       	in	r24, 0x2e	; 46
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8f bd       	out	0x2f, r24	; 47
 102:	08 95       	ret

00000104 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <adc_read+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <adc_read+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
 118:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x121a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	91 e3       	ldi	r25, 0x31	; 49
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <adc_read+0x1a>
 122:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <adc_read+0x3e>
		adc_value[i] = adc[i];
 12a:	f9 01       	movw	r30, r18
 12c:	fc 5e       	subi	r31, 0xEC	; 236
 12e:	90 81       	ld	r25, Z
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	24 30       	cpi	r18, 0x04	; 4
 144:	31 05       	cpc	r19, r1
 146:	88 f3       	brcs	.-30     	; 0x12a <adc_read+0x26>
		adc_value[i] = adc[i];
	}
	
	
	
	return adc_value[channel];
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e8 0f       	add	r30, r24
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 16a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 174:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
	printf("offset_x: %d, offset_y: %d\r\n", offset_x, offset_y);
 178:	1f 92       	push	r1
 17a:	8f 93       	push	r24
 17c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <offset_x>
 180:	1f 92       	push	r1
 182:	8f 93       	push	r24
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	08 95       	ret

0000019e <adc_conv_js_val>:

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
 19e:	86 17       	cp	r24, r22
 1a0:	a0 f0       	brcs	.+40     	; 0x1ca <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
 1a2:	46 2f       	mov	r20, r22
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	24 1b       	sub	r18, r20
 1ac:	35 0b       	sbc	r19, r21
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	62 9f       	mul	r22, r18
 1b2:	c0 01       	movw	r24, r0
 1b4:	63 9f       	mul	r22, r19
 1b6:	90 0d       	add	r25, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	6f ef       	ldi	r22, 0xFF	; 255
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	64 1b       	sub	r22, r20
 1c0:	75 0b       	sbc	r23, r21
 1c2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divmodhi4>
 1c6:	86 2f       	mov	r24, r22
 1c8:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	26 1b       	sub	r18, r22
 1d2:	37 0b       	sbc	r19, r23
 1d4:	44 e6       	ldi	r20, 0x64	; 100
 1d6:	42 9f       	mul	r20, r18
 1d8:	c0 01       	movw	r24, r0
 1da:	43 9f       	mul	r20, r19
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divmodhi4>
 1e4:	86 2f       	mov	r24, r22
}
 1e6:	08 95       	ret

000001e8 <pos_read>:

pos_t pos_read(pos_t positions)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
 1ec:	c0 91 db 01 	lds	r28, 0x01DB	; 0x8001db <offset_x>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 1f6:	6c 2f       	mov	r22, r28
 1f8:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 1fc:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
 1fe:	d0 91 da 01 	lds	r29, 0x01DA	; 0x8001da <__data_end>
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 208:	6d 2f       	mov	r22, r29
 20a:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 20e:	98 2f       	mov	r25, r24
	
	return positions;
}
 210:	8c 2f       	mov	r24, r28
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
 218:	28 2f       	mov	r18, r24
 21a:	8b 5f       	subi	r24, 0xFB	; 251
 21c:	8b 30       	cpi	r24, 0x0B	; 11
 21e:	48 f4       	brcc	.+18     	; 0x232 <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 220:	89 2f       	mov	r24, r25
 222:	9b 5f       	subi	r25, 0xFB	; 251
 224:	9b 30       	cpi	r25, 0x0B	; 11
 226:	d8 f0       	brcs	.+54     	; 0x25e <dir_read+0x46>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 228:	86 30       	cpi	r24, 0x06	; 6
 22a:	dc f4       	brge	.+54     	; 0x262 <dir_read+0x4a>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	dc f0       	brlt	.+54     	; 0x266 <dir_read+0x4e>
 230:	15 c0       	rjmp	.+42     	; 0x25c <dir_read+0x44>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
 232:	26 30       	cpi	r18, 0x06	; 6
 234:	4c f0       	brlt	.+18     	; 0x248 <dir_read+0x30>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 236:	89 2f       	mov	r24, r25
 238:	9b 5f       	subi	r25, 0xFB	; 251
 23a:	9b 30       	cpi	r25, 0x0B	; 11
 23c:	b0 f0       	brcs	.+44     	; 0x26a <dir_read+0x52>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 23e:	86 30       	cpi	r24, 0x06	; 6
 240:	b4 f4       	brge	.+44     	; 0x26e <dir_read+0x56>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 242:	85 30       	cpi	r24, 0x05	; 5
 244:	b4 f0       	brlt	.+44     	; 0x272 <dir_read+0x5a>
 246:	0a c0       	rjmp	.+20     	; 0x25c <dir_read+0x44>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
 248:	25 30       	cpi	r18, 0x05	; 5
 24a:	44 f4       	brge	.+16     	; 0x25c <dir_read+0x44>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 24c:	89 2f       	mov	r24, r25
 24e:	9b 5f       	subi	r25, 0xFB	; 251
 250:	9b 30       	cpi	r25, 0x0B	; 11
 252:	88 f0       	brcs	.+34     	; 0x276 <dir_read+0x5e>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 254:	86 30       	cpi	r24, 0x06	; 6
 256:	8c f4       	brge	.+34     	; 0x27a <dir_read+0x62>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	8c f0       	brlt	.+34     	; 0x27e <dir_read+0x66>
			return DOWN_LEFT;
		}
	}
}
 25c:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
 27e:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
 280:	08 95       	ret

00000282 <slider_read>:

uint8_t slider_read(uint8_t channel)
{
	return (100 * adc_read(channel) / ADC_MAX);
 282:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 286:	24 e6       	ldi	r18, 0x64	; 100
 288:	82 9f       	mul	r24, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	6f ef       	ldi	r22, 0xFF	; 255
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divmodhi4>
 296:	86 2f       	mov	r24, r22
 298:	08 95       	ret

0000029a <main>:

int main(void){
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;
	USART_drv_init(MYUBRR);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART_drv_init>
	SRAM_init();
 2a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <SRAM_init>
	adc_drv_init();
 2a6:	0e 94 57 00 	call	0xae	; 0xae <adc_drv_init>
	ext_button_drv_init();
 2aa:	0e 94 2c 02 	call	0x458	; 0x458 <ext_button_drv_init>
	adc_calibrate();
 2ae:	0e 94 b2 00 	call	0x164	; 0x164 <adc_calibrate>

    while (1){
		
		printf("----------------------------------\r\n");
 2b2:	83 e2       	ldi	r24, 0x23	; 35
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <puts>
		joystick_pos = pos_read(joystick_pos);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	9d 2f       	mov	r25, r29
 2be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <pos_read>
 2c2:	c8 2f       	mov	r28, r24
 2c4:	d9 2f       	mov	r29, r25
		joystick_dir = dir_read(joystick_pos);
 2c6:	0e 94 0c 01 	call	0x218	; 0x218 <dir_read>
 2ca:	d8 2e       	mov	r13, r24
		slider1 = slider_read(LEFT_SLIDER_CHANNEL);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2d4:	7c 01       	movw	r14, r24
		slider2 = slider_read(RIGHT_SLIDER_CHANNEL);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2de:	8c 01       	movw	r16, r24
		printf("X: %d\r\n", joystick_pos.X);
 2e0:	8c 2f       	mov	r24, r28
 2e2:	0c 2e       	mov	r0, r28
 2e4:	00 0c       	add	r0, r0
 2e6:	99 0b       	sbc	r25, r25
 2e8:	9f 93       	push	r25
 2ea:	cf 93       	push	r28
 2ec:	87 e4       	ldi	r24, 0x47	; 71
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	9f 93       	push	r25
 2f2:	8f 93       	push	r24
 2f4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
		printf("Y: %d\r\n", joystick_pos.Y);
 2f8:	8d 2f       	mov	r24, r29
 2fa:	0d 2e       	mov	r0, r29
 2fc:	00 0c       	add	r0, r0
 2fe:	99 0b       	sbc	r25, r25
 300:	9f 93       	push	r25
 302:	df 93       	push	r29
 304:	8f e4       	ldi	r24, 0x4F	; 79
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
		printf("Joystick direction: %d\r\n", joystick_dir);
 310:	1f 92       	push	r1
 312:	df 92       	push	r13
 314:	87 e5       	ldi	r24, 0x57	; 87
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
		printf("Left slider: %d\r\n", slider1);
 320:	c7 01       	movw	r24, r14
 322:	99 27       	eor	r25, r25
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	80 e7       	ldi	r24, 0x70	; 112
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
		printf("Right slider: %d\r\n", slider2);
 334:	c8 01       	movw	r24, r16
 336:	99 27       	eor	r25, r25
 338:	9f 93       	push	r25
 33a:	8f 93       	push	r24
 33c:	82 e8       	ldi	r24, 0x82	; 130
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printf>
		printf("----------------------------------\r\n");
 348:	83 e2       	ldi	r24, 0x23	; 35
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	8f e7       	ldi	r24, 0x7F	; 127
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0xbc>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0xc6>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0xc8>
 362:	8d b7       	in	r24, 0x3d	; 61
 364:	9e b7       	in	r25, 0x3e	; 62
 366:	44 96       	adiw	r24, 0x14	; 20
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	9e bf       	out	0x3e, r25	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	8d bf       	out	0x3d, r24	; 61
 372:	9f cf       	rjmp	.-194    	; 0x2b2 <main+0x18>

00000374 <__vector_1>:
#define RIGHT_BUTTON_PIN PD3
#define JOYSTICK_BUTTON_PIN PE0


ISR (INT0_vect)
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
	printf("Left button pressed\r\n");
 396:	85 e9       	ldi	r24, 0x95	; 149
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <puts>


}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_2>:

ISR (INT1_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	printf("Right button pressed\r\n");
 3e2:	8a ea       	ldi	r24, 0xAA	; 170
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <puts>
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_3>:

ISR (INT2_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	4f 93       	push	r20
 41c:	5f 93       	push	r21
 41e:	6f 93       	push	r22
 420:	7f 93       	push	r23
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	printf("Joystick button pressed\r\n");
 42e:	80 ec       	ldi	r24, 0xC0	; 192
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <puts>


}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <ext_button_drv_init>:
void ext_button_drv_init(void)
{
	/*
	to do:			
	*/
	clear_bit(DDRD, LEFT_BUTTON_PIN);
 458:	81 b3       	in	r24, 0x11	; 17
 45a:	8b 7f       	andi	r24, 0xFB	; 251
 45c:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
 45e:	81 b3       	in	r24, 0x11	; 17
 460:	87 7f       	andi	r24, 0xF7	; 247
 462:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
 464:	86 b1       	in	r24, 0x06	; 6
 466:	8e 7f       	andi	r24, 0xFE	; 254
 468:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
 46a:	f8 94       	cli
	// Enables interrupt on pin INT0, INT1
	set_bit(GICR, LEFT_BUTTON_ISR_REGISTER);
 46c:	8b b7       	in	r24, 0x3b	; 59
 46e:	80 64       	ori	r24, 0x40	; 64
 470:	8b bf       	out	0x3b, r24	; 59
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
 472:	8b b7       	in	r24, 0x3b	; 59
 474:	80 68       	ori	r24, 0x80	; 128
 476:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT2, INT1 & INT0
	set_bit(MCUCR, ISC11);
 478:	85 b7       	in	r24, 0x35	; 53
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
 47e:	85 b7       	in	r24, 0x35	; 53
 480:	84 60       	ori	r24, 0x04	; 4
 482:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC01);
 484:	85 b7       	in	r24, 0x35	; 53
 486:	82 60       	ori	r24, 0x02	; 2
 488:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC00);
 48a:	85 b7       	in	r24, 0x35	; 53
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
 490:	8b b7       	in	r24, 0x3b	; 59
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
 496:	86 b7       	in	r24, 0x36	; 54
 498:	8e 7f       	andi	r24, 0xFE	; 254
 49a:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
 49c:	8a b7       	in	r24, 0x3a	; 58
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
 4a2:	8b b7       	in	r24, 0x3b	; 59
 4a4:	80 62       	ori	r24, 0x20	; 32
 4a6:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();	
 4a8:	78 94       	sei
 4aa:	08 95       	ret

000004ac <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
 4ac:	85 b7       	in	r24, 0x35	; 53
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
 4b2:	80 b7       	in	r24, 0x30	; 48
 4b4:	80 62       	ori	r24, 0x20	; 32
 4b6:	80 bf       	out	0x30, r24	; 48
 4b8:	08 95       	ret

000004ba <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 4ba:	5d 9b       	sbis	0x0b, 5	; 11
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 4be:	8c b9       	out	0x0c, r24	; 12
 4c0:	08 95       	ret

000004c2 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 4c2:	5f 9b       	sbis	0x0b, 7	; 11
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 4c6:	8c b1       	in	r24, 0x0c	; 12

}
 4c8:	08 95       	ret

000004ca <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 4ca:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 4cc:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 4ce:	88 e1       	ldi	r24, 0x18	; 24
 4d0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 4d2:	8e e8       	ldi	r24, 0x8E	; 142
 4d4:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
 4d6:	61 e6       	ldi	r22, 0x61	; 97
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	8d e5       	ldi	r24, 0x5D	; 93
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	0e 94 9a 02 	call	0x534	; 0x534 <fdevopen>
 4e2:	08 95       	ret

000004e4 <__divmodhi4>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	07 2e       	mov	r0, r23
 4e8:	16 f4       	brtc	.+4      	; 0x4ee <__divmodhi4+0xa>
 4ea:	00 94       	com	r0
 4ec:	07 d0       	rcall	.+14     	; 0x4fc <__divmodhi4_neg1>
 4ee:	77 fd       	sbrc	r23, 7
 4f0:	09 d0       	rcall	.+18     	; 0x504 <__divmodhi4_neg2>
 4f2:	0e 94 86 02 	call	0x50c	; 0x50c <__udivmodhi4>
 4f6:	07 fc       	sbrc	r0, 7
 4f8:	05 d0       	rcall	.+10     	; 0x504 <__divmodhi4_neg2>
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__divmodhi4_exit>

000004fc <__divmodhi4_neg1>:
 4fc:	90 95       	com	r25
 4fe:	81 95       	neg	r24
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	08 95       	ret

00000504 <__divmodhi4_neg2>:
 504:	70 95       	com	r23
 506:	61 95       	neg	r22
 508:	7f 4f       	sbci	r23, 0xFF	; 255

0000050a <__divmodhi4_exit>:
 50a:	08 95       	ret

0000050c <__udivmodhi4>:
 50c:	aa 1b       	sub	r26, r26
 50e:	bb 1b       	sub	r27, r27
 510:	51 e1       	ldi	r21, 0x11	; 17
 512:	07 c0       	rjmp	.+14     	; 0x522 <__udivmodhi4_ep>

00000514 <__udivmodhi4_loop>:
 514:	aa 1f       	adc	r26, r26
 516:	bb 1f       	adc	r27, r27
 518:	a6 17       	cp	r26, r22
 51a:	b7 07       	cpc	r27, r23
 51c:	10 f0       	brcs	.+4      	; 0x522 <__udivmodhi4_ep>
 51e:	a6 1b       	sub	r26, r22
 520:	b7 0b       	sbc	r27, r23

00000522 <__udivmodhi4_ep>:
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	5a 95       	dec	r21
 528:	a9 f7       	brne	.-22     	; 0x514 <__udivmodhi4_loop>
 52a:	80 95       	com	r24
 52c:	90 95       	com	r25
 52e:	bc 01       	movw	r22, r24
 530:	cd 01       	movw	r24, r26
 532:	08 95       	ret

00000534 <fdevopen>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	31 f4       	brne	.+12     	; 0x54c <fdevopen+0x18>
 540:	61 15       	cp	r22, r1
 542:	71 05       	cpc	r23, r1
 544:	19 f4       	brne	.+6      	; 0x54c <fdevopen+0x18>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	3a c0       	rjmp	.+116    	; 0x5c0 <fdevopen+0x8c>
 54c:	8b 01       	movw	r16, r22
 54e:	ec 01       	movw	r28, r24
 550:	6e e0       	ldi	r22, 0x0E	; 14
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 0c 05 	call	0xa18	; 0xa18 <calloc>
 55c:	fc 01       	movw	r30, r24
 55e:	89 2b       	or	r24, r25
 560:	91 f3       	breq	.-28     	; 0x546 <fdevopen+0x12>
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	83 83       	std	Z+3, r24	; 0x03
 566:	01 15       	cp	r16, r1
 568:	11 05       	cpc	r17, r1
 56a:	71 f0       	breq	.+28     	; 0x588 <fdevopen+0x54>
 56c:	13 87       	std	Z+11, r17	; 0x0b
 56e:	02 87       	std	Z+10, r16	; 0x0a
 570:	81 e8       	ldi	r24, 0x81	; 129
 572:	83 83       	std	Z+3, r24	; 0x03
 574:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__iob>
 578:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__iob+0x1>
 57c:	89 2b       	or	r24, r25
 57e:	21 f4       	brne	.+8      	; 0x588 <fdevopen+0x54>
 580:	f0 93 dd 01 	sts	0x01DD, r31	; 0x8001dd <__iob+0x1>
 584:	e0 93 dc 01 	sts	0x01DC, r30	; 0x8001dc <__iob>
 588:	20 97       	sbiw	r28, 0x00	; 0
 58a:	c9 f0       	breq	.+50     	; 0x5be <fdevopen+0x8a>
 58c:	d1 87       	std	Z+9, r29	; 0x09
 58e:	c0 87       	std	Z+8, r28	; 0x08
 590:	83 81       	ldd	r24, Z+3	; 0x03
 592:	82 60       	ori	r24, 0x02	; 2
 594:	83 83       	std	Z+3, r24	; 0x03
 596:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x2>
 59a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x3>
 59e:	89 2b       	or	r24, r25
 5a0:	71 f4       	brne	.+28     	; 0x5be <fdevopen+0x8a>
 5a2:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__iob+0x3>
 5a6:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__iob+0x2>
 5aa:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__iob+0x4>
 5ae:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__iob+0x5>
 5b2:	89 2b       	or	r24, r25
 5b4:	21 f4       	brne	.+8      	; 0x5be <fdevopen+0x8a>
 5b6:	f0 93 e1 01 	sts	0x01E1, r31	; 0x8001e1 <__iob+0x5>
 5ba:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <__iob+0x4>
 5be:	cf 01       	movw	r24, r30
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <printf>:
 5ca:	a0 e0       	ldi	r26, 0x00	; 0
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	eb ee       	ldi	r30, 0xEB	; 235
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__prologue_saves__+0x20>
 5d6:	ae 01       	movw	r20, r28
 5d8:	4b 5f       	subi	r20, 0xFB	; 251
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	fa 01       	movw	r30, r20
 5de:	61 91       	ld	r22, Z+
 5e0:	71 91       	ld	r23, Z+
 5e2:	af 01       	movw	r20, r30
 5e4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x2>
 5e8:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x3>
 5ec:	0e 94 2b 03 	call	0x656	; 0x656 <vfprintf>
 5f0:	e2 e0       	ldi	r30, 0x02	; 2
 5f2:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__epilogue_restores__+0x20>

000005f6 <puts>:
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__iob+0x2>
 602:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__iob+0x3>
 606:	23 81       	ldd	r18, Z+3	; 0x03
 608:	21 ff       	sbrs	r18, 1
 60a:	1b c0       	rjmp	.+54     	; 0x642 <puts+0x4c>
 60c:	8c 01       	movw	r16, r24
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	c0 e0       	ldi	r28, 0x00	; 0
 612:	f8 01       	movw	r30, r16
 614:	81 91       	ld	r24, Z+
 616:	8f 01       	movw	r16, r30
 618:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <__iob+0x2>
 61c:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <__iob+0x3>
 620:	db 01       	movw	r26, r22
 622:	18 96       	adiw	r26, 0x08	; 8
 624:	ed 91       	ld	r30, X+
 626:	fc 91       	ld	r31, X
 628:	19 97       	sbiw	r26, 0x09	; 9
 62a:	88 23       	and	r24, r24
 62c:	31 f0       	breq	.+12     	; 0x63a <puts+0x44>
 62e:	09 95       	icall
 630:	89 2b       	or	r24, r25
 632:	79 f3       	breq	.-34     	; 0x612 <puts+0x1c>
 634:	df ef       	ldi	r29, 0xFF	; 255
 636:	cf ef       	ldi	r28, 0xFF	; 255
 638:	ec cf       	rjmp	.-40     	; 0x612 <puts+0x1c>
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	09 95       	icall
 63e:	89 2b       	or	r24, r25
 640:	19 f0       	breq	.+6      	; 0x648 <puts+0x52>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	9f ef       	ldi	r25, 0xFF	; 255
 646:	02 c0       	rjmp	.+4      	; 0x64c <puts+0x56>
 648:	8d 2f       	mov	r24, r29
 64a:	9c 2f       	mov	r25, r28
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	08 95       	ret

00000656 <vfprintf>:
 656:	ab e0       	ldi	r26, 0x0B	; 11
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e1 e3       	ldi	r30, 0x31	; 49
 65c:	f3 e0       	ldi	r31, 0x03	; 3
 65e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__>
 662:	6c 01       	movw	r12, r24
 664:	7b 01       	movw	r14, r22
 666:	8a 01       	movw	r16, r20
 668:	fc 01       	movw	r30, r24
 66a:	17 82       	std	Z+7, r1	; 0x07
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 ff       	sbrs	r24, 1
 672:	cc c1       	rjmp	.+920    	; 0xa0c <vfprintf+0x3b6>
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	3c 01       	movw	r6, r24
 67a:	f6 01       	movw	r30, r12
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	f7 01       	movw	r30, r14
 680:	93 fd       	sbrc	r25, 3
 682:	85 91       	lpm	r24, Z+
 684:	93 ff       	sbrs	r25, 3
 686:	81 91       	ld	r24, Z+
 688:	7f 01       	movw	r14, r30
 68a:	88 23       	and	r24, r24
 68c:	09 f4       	brne	.+2      	; 0x690 <vfprintf+0x3a>
 68e:	ba c1       	rjmp	.+884    	; 0xa04 <vfprintf+0x3ae>
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	39 f4       	brne	.+14     	; 0x6a2 <vfprintf+0x4c>
 694:	93 fd       	sbrc	r25, 3
 696:	85 91       	lpm	r24, Z+
 698:	93 ff       	sbrs	r25, 3
 69a:	81 91       	ld	r24, Z+
 69c:	7f 01       	movw	r14, r30
 69e:	85 32       	cpi	r24, 0x25	; 37
 6a0:	29 f4       	brne	.+10     	; 0x6ac <vfprintf+0x56>
 6a2:	b6 01       	movw	r22, r12
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 6aa:	e7 cf       	rjmp	.-50     	; 0x67a <vfprintf+0x24>
 6ac:	91 2c       	mov	r9, r1
 6ae:	21 2c       	mov	r2, r1
 6b0:	31 2c       	mov	r3, r1
 6b2:	ff e1       	ldi	r31, 0x1F	; 31
 6b4:	f3 15       	cp	r31, r3
 6b6:	d8 f0       	brcs	.+54     	; 0x6ee <vfprintf+0x98>
 6b8:	8b 32       	cpi	r24, 0x2B	; 43
 6ba:	79 f0       	breq	.+30     	; 0x6da <vfprintf+0x84>
 6bc:	38 f4       	brcc	.+14     	; 0x6cc <vfprintf+0x76>
 6be:	80 32       	cpi	r24, 0x20	; 32
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0x8a>
 6c2:	83 32       	cpi	r24, 0x23	; 35
 6c4:	a1 f4       	brne	.+40     	; 0x6ee <vfprintf+0x98>
 6c6:	23 2d       	mov	r18, r3
 6c8:	20 61       	ori	r18, 0x10	; 16
 6ca:	1d c0       	rjmp	.+58     	; 0x706 <vfprintf+0xb0>
 6cc:	8d 32       	cpi	r24, 0x2D	; 45
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <vfprintf+0x92>
 6d0:	80 33       	cpi	r24, 0x30	; 48
 6d2:	69 f4       	brne	.+26     	; 0x6ee <vfprintf+0x98>
 6d4:	23 2d       	mov	r18, r3
 6d6:	21 60       	ori	r18, 0x01	; 1
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <vfprintf+0xb0>
 6da:	83 2d       	mov	r24, r3
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	38 2e       	mov	r3, r24
 6e0:	e3 2d       	mov	r30, r3
 6e2:	e4 60       	ori	r30, 0x04	; 4
 6e4:	3e 2e       	mov	r3, r30
 6e6:	2a c0       	rjmp	.+84     	; 0x73c <vfprintf+0xe6>
 6e8:	f3 2d       	mov	r31, r3
 6ea:	f8 60       	ori	r31, 0x08	; 8
 6ec:	1d c0       	rjmp	.+58     	; 0x728 <vfprintf+0xd2>
 6ee:	37 fc       	sbrc	r3, 7
 6f0:	2d c0       	rjmp	.+90     	; 0x74c <vfprintf+0xf6>
 6f2:	20 ed       	ldi	r18, 0xD0	; 208
 6f4:	28 0f       	add	r18, r24
 6f6:	2a 30       	cpi	r18, 0x0A	; 10
 6f8:	40 f0       	brcs	.+16     	; 0x70a <vfprintf+0xb4>
 6fa:	8e 32       	cpi	r24, 0x2E	; 46
 6fc:	b9 f4       	brne	.+46     	; 0x72c <vfprintf+0xd6>
 6fe:	36 fc       	sbrc	r3, 6
 700:	81 c1       	rjmp	.+770    	; 0xa04 <vfprintf+0x3ae>
 702:	23 2d       	mov	r18, r3
 704:	20 64       	ori	r18, 0x40	; 64
 706:	32 2e       	mov	r3, r18
 708:	19 c0       	rjmp	.+50     	; 0x73c <vfprintf+0xe6>
 70a:	36 fe       	sbrs	r3, 6
 70c:	06 c0       	rjmp	.+12     	; 0x71a <vfprintf+0xc4>
 70e:	8a e0       	ldi	r24, 0x0A	; 10
 710:	98 9e       	mul	r9, r24
 712:	20 0d       	add	r18, r0
 714:	11 24       	eor	r1, r1
 716:	92 2e       	mov	r9, r18
 718:	11 c0       	rjmp	.+34     	; 0x73c <vfprintf+0xe6>
 71a:	ea e0       	ldi	r30, 0x0A	; 10
 71c:	2e 9e       	mul	r2, r30
 71e:	20 0d       	add	r18, r0
 720:	11 24       	eor	r1, r1
 722:	22 2e       	mov	r2, r18
 724:	f3 2d       	mov	r31, r3
 726:	f0 62       	ori	r31, 0x20	; 32
 728:	3f 2e       	mov	r3, r31
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0xe6>
 72c:	8c 36       	cpi	r24, 0x6C	; 108
 72e:	21 f4       	brne	.+8      	; 0x738 <vfprintf+0xe2>
 730:	83 2d       	mov	r24, r3
 732:	80 68       	ori	r24, 0x80	; 128
 734:	38 2e       	mov	r3, r24
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0xe6>
 738:	88 36       	cpi	r24, 0x68	; 104
 73a:	41 f4       	brne	.+16     	; 0x74c <vfprintf+0xf6>
 73c:	f7 01       	movw	r30, r14
 73e:	93 fd       	sbrc	r25, 3
 740:	85 91       	lpm	r24, Z+
 742:	93 ff       	sbrs	r25, 3
 744:	81 91       	ld	r24, Z+
 746:	7f 01       	movw	r14, r30
 748:	81 11       	cpse	r24, r1
 74a:	b3 cf       	rjmp	.-154    	; 0x6b2 <vfprintf+0x5c>
 74c:	98 2f       	mov	r25, r24
 74e:	9f 7d       	andi	r25, 0xDF	; 223
 750:	95 54       	subi	r25, 0x45	; 69
 752:	93 30       	cpi	r25, 0x03	; 3
 754:	28 f4       	brcc	.+10     	; 0x760 <vfprintf+0x10a>
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	9f e3       	ldi	r25, 0x3F	; 63
 75c:	99 83       	std	Y+1, r25	; 0x01
 75e:	0d c0       	rjmp	.+26     	; 0x77a <vfprintf+0x124>
 760:	83 36       	cpi	r24, 0x63	; 99
 762:	31 f0       	breq	.+12     	; 0x770 <vfprintf+0x11a>
 764:	83 37       	cpi	r24, 0x73	; 115
 766:	71 f0       	breq	.+28     	; 0x784 <vfprintf+0x12e>
 768:	83 35       	cpi	r24, 0x53	; 83
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0x118>
 76c:	59 c0       	rjmp	.+178    	; 0x820 <vfprintf+0x1ca>
 76e:	21 c0       	rjmp	.+66     	; 0x7b2 <vfprintf+0x15c>
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	88 24       	eor	r8, r8
 77c:	83 94       	inc	r8
 77e:	91 2c       	mov	r9, r1
 780:	53 01       	movw	r10, r6
 782:	13 c0       	rjmp	.+38     	; 0x7aa <vfprintf+0x154>
 784:	28 01       	movw	r4, r16
 786:	f2 e0       	ldi	r31, 0x02	; 2
 788:	4f 0e       	add	r4, r31
 78a:	51 1c       	adc	r5, r1
 78c:	f8 01       	movw	r30, r16
 78e:	a0 80       	ld	r10, Z
 790:	b1 80       	ldd	r11, Z+1	; 0x01
 792:	36 fe       	sbrs	r3, 6
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x146>
 796:	69 2d       	mov	r22, r9
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x14a>
 79c:	6f ef       	ldi	r22, 0xFF	; 255
 79e:	7f ef       	ldi	r23, 0xFF	; 255
 7a0:	c5 01       	movw	r24, r10
 7a2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <strnlen>
 7a6:	4c 01       	movw	r8, r24
 7a8:	82 01       	movw	r16, r4
 7aa:	f3 2d       	mov	r31, r3
 7ac:	ff 77       	andi	r31, 0x7F	; 127
 7ae:	3f 2e       	mov	r3, r31
 7b0:	16 c0       	rjmp	.+44     	; 0x7de <vfprintf+0x188>
 7b2:	28 01       	movw	r4, r16
 7b4:	22 e0       	ldi	r18, 0x02	; 2
 7b6:	42 0e       	add	r4, r18
 7b8:	51 1c       	adc	r5, r1
 7ba:	f8 01       	movw	r30, r16
 7bc:	a0 80       	ld	r10, Z
 7be:	b1 80       	ldd	r11, Z+1	; 0x01
 7c0:	36 fe       	sbrs	r3, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x174>
 7c4:	69 2d       	mov	r22, r9
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x178>
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	7f ef       	ldi	r23, 0xFF	; 255
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 94 49 06 	call	0xc92	; 0xc92 <strnlen_P>
 7d4:	4c 01       	movw	r8, r24
 7d6:	f3 2d       	mov	r31, r3
 7d8:	f0 68       	ori	r31, 0x80	; 128
 7da:	3f 2e       	mov	r3, r31
 7dc:	82 01       	movw	r16, r4
 7de:	33 fc       	sbrc	r3, 3
 7e0:	1b c0       	rjmp	.+54     	; 0x818 <vfprintf+0x1c2>
 7e2:	82 2d       	mov	r24, r2
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	88 16       	cp	r8, r24
 7e8:	99 06       	cpc	r9, r25
 7ea:	b0 f4       	brcc	.+44     	; 0x818 <vfprintf+0x1c2>
 7ec:	b6 01       	movw	r22, r12
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 7f6:	2a 94       	dec	r2
 7f8:	f4 cf       	rjmp	.-24     	; 0x7e2 <vfprintf+0x18c>
 7fa:	f5 01       	movw	r30, r10
 7fc:	37 fc       	sbrc	r3, 7
 7fe:	85 91       	lpm	r24, Z+
 800:	37 fe       	sbrs	r3, 7
 802:	81 91       	ld	r24, Z+
 804:	5f 01       	movw	r10, r30
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 80e:	21 10       	cpse	r2, r1
 810:	2a 94       	dec	r2
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	82 1a       	sub	r8, r18
 816:	91 08       	sbc	r9, r1
 818:	81 14       	cp	r8, r1
 81a:	91 04       	cpc	r9, r1
 81c:	71 f7       	brne	.-36     	; 0x7fa <vfprintf+0x1a4>
 81e:	e8 c0       	rjmp	.+464    	; 0x9f0 <vfprintf+0x39a>
 820:	84 36       	cpi	r24, 0x64	; 100
 822:	11 f0       	breq	.+4      	; 0x828 <vfprintf+0x1d2>
 824:	89 36       	cpi	r24, 0x69	; 105
 826:	41 f5       	brne	.+80     	; 0x878 <vfprintf+0x222>
 828:	f8 01       	movw	r30, r16
 82a:	37 fe       	sbrs	r3, 7
 82c:	07 c0       	rjmp	.+14     	; 0x83c <vfprintf+0x1e6>
 82e:	60 81       	ld	r22, Z
 830:	71 81       	ldd	r23, Z+1	; 0x01
 832:	82 81       	ldd	r24, Z+2	; 0x02
 834:	93 81       	ldd	r25, Z+3	; 0x03
 836:	0c 5f       	subi	r16, 0xFC	; 252
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	08 c0       	rjmp	.+16     	; 0x84c <vfprintf+0x1f6>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	07 2e       	mov	r0, r23
 842:	00 0c       	add	r0, r0
 844:	88 0b       	sbc	r24, r24
 846:	99 0b       	sbc	r25, r25
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	f3 2d       	mov	r31, r3
 84e:	ff 76       	andi	r31, 0x6F	; 111
 850:	3f 2e       	mov	r3, r31
 852:	97 ff       	sbrs	r25, 7
 854:	09 c0       	rjmp	.+18     	; 0x868 <vfprintf+0x212>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	f0 68       	ori	r31, 0x80	; 128
 866:	3f 2e       	mov	r3, r31
 868:	2a e0       	ldi	r18, 0x0A	; 10
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	a3 01       	movw	r20, r6
 86e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 872:	88 2e       	mov	r8, r24
 874:	86 18       	sub	r8, r6
 876:	45 c0       	rjmp	.+138    	; 0x902 <vfprintf+0x2ac>
 878:	85 37       	cpi	r24, 0x75	; 117
 87a:	31 f4       	brne	.+12     	; 0x888 <vfprintf+0x232>
 87c:	23 2d       	mov	r18, r3
 87e:	2f 7e       	andi	r18, 0xEF	; 239
 880:	b2 2e       	mov	r11, r18
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	25 c0       	rjmp	.+74     	; 0x8d2 <vfprintf+0x27c>
 888:	93 2d       	mov	r25, r3
 88a:	99 7f       	andi	r25, 0xF9	; 249
 88c:	b9 2e       	mov	r11, r25
 88e:	8f 36       	cpi	r24, 0x6F	; 111
 890:	c1 f0       	breq	.+48     	; 0x8c2 <vfprintf+0x26c>
 892:	18 f4       	brcc	.+6      	; 0x89a <vfprintf+0x244>
 894:	88 35       	cpi	r24, 0x58	; 88
 896:	79 f0       	breq	.+30     	; 0x8b6 <vfprintf+0x260>
 898:	b5 c0       	rjmp	.+362    	; 0xa04 <vfprintf+0x3ae>
 89a:	80 37       	cpi	r24, 0x70	; 112
 89c:	19 f0       	breq	.+6      	; 0x8a4 <vfprintf+0x24e>
 89e:	88 37       	cpi	r24, 0x78	; 120
 8a0:	21 f0       	breq	.+8      	; 0x8aa <vfprintf+0x254>
 8a2:	b0 c0       	rjmp	.+352    	; 0xa04 <vfprintf+0x3ae>
 8a4:	e9 2f       	mov	r30, r25
 8a6:	e0 61       	ori	r30, 0x10	; 16
 8a8:	be 2e       	mov	r11, r30
 8aa:	b4 fe       	sbrs	r11, 4
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <vfprintf+0x272>
 8ae:	fb 2d       	mov	r31, r11
 8b0:	f4 60       	ori	r31, 0x04	; 4
 8b2:	bf 2e       	mov	r11, r31
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x272>
 8b6:	34 fe       	sbrs	r3, 4
 8b8:	0a c0       	rjmp	.+20     	; 0x8ce <vfprintf+0x278>
 8ba:	29 2f       	mov	r18, r25
 8bc:	26 60       	ori	r18, 0x06	; 6
 8be:	b2 2e       	mov	r11, r18
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <vfprintf+0x278>
 8c2:	28 e0       	ldi	r18, 0x08	; 8
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <vfprintf+0x27c>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x27c>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	32 e0       	ldi	r19, 0x02	; 2
 8d2:	f8 01       	movw	r30, r16
 8d4:	b7 fe       	sbrs	r11, 7
 8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <vfprintf+0x290>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	82 81       	ldd	r24, Z+2	; 0x02
 8de:	93 81       	ldd	r25, Z+3	; 0x03
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <vfprintf+0x29c>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 5f       	subi	r16, 0xFE	; 254
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	a3 01       	movw	r20, r6
 8f4:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 8f8:	88 2e       	mov	r8, r24
 8fa:	86 18       	sub	r8, r6
 8fc:	fb 2d       	mov	r31, r11
 8fe:	ff 77       	andi	r31, 0x7F	; 127
 900:	3f 2e       	mov	r3, r31
 902:	36 fe       	sbrs	r3, 6
 904:	0d c0       	rjmp	.+26     	; 0x920 <vfprintf+0x2ca>
 906:	23 2d       	mov	r18, r3
 908:	2e 7f       	andi	r18, 0xFE	; 254
 90a:	a2 2e       	mov	r10, r18
 90c:	89 14       	cp	r8, r9
 90e:	58 f4       	brcc	.+22     	; 0x926 <vfprintf+0x2d0>
 910:	34 fe       	sbrs	r3, 4
 912:	0b c0       	rjmp	.+22     	; 0x92a <vfprintf+0x2d4>
 914:	32 fc       	sbrc	r3, 2
 916:	09 c0       	rjmp	.+18     	; 0x92a <vfprintf+0x2d4>
 918:	83 2d       	mov	r24, r3
 91a:	8e 7e       	andi	r24, 0xEE	; 238
 91c:	a8 2e       	mov	r10, r24
 91e:	05 c0       	rjmp	.+10     	; 0x92a <vfprintf+0x2d4>
 920:	b8 2c       	mov	r11, r8
 922:	a3 2c       	mov	r10, r3
 924:	03 c0       	rjmp	.+6      	; 0x92c <vfprintf+0x2d6>
 926:	b8 2c       	mov	r11, r8
 928:	01 c0       	rjmp	.+2      	; 0x92c <vfprintf+0x2d6>
 92a:	b9 2c       	mov	r11, r9
 92c:	a4 fe       	sbrs	r10, 4
 92e:	0f c0       	rjmp	.+30     	; 0x94e <vfprintf+0x2f8>
 930:	fe 01       	movw	r30, r28
 932:	e8 0d       	add	r30, r8
 934:	f1 1d       	adc	r31, r1
 936:	80 81       	ld	r24, Z
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	21 f4       	brne	.+8      	; 0x944 <vfprintf+0x2ee>
 93c:	9a 2d       	mov	r25, r10
 93e:	99 7e       	andi	r25, 0xE9	; 233
 940:	a9 2e       	mov	r10, r25
 942:	09 c0       	rjmp	.+18     	; 0x956 <vfprintf+0x300>
 944:	a2 fe       	sbrs	r10, 2
 946:	06 c0       	rjmp	.+12     	; 0x954 <vfprintf+0x2fe>
 948:	b3 94       	inc	r11
 94a:	b3 94       	inc	r11
 94c:	04 c0       	rjmp	.+8      	; 0x956 <vfprintf+0x300>
 94e:	8a 2d       	mov	r24, r10
 950:	86 78       	andi	r24, 0x86	; 134
 952:	09 f0       	breq	.+2      	; 0x956 <vfprintf+0x300>
 954:	b3 94       	inc	r11
 956:	a3 fc       	sbrc	r10, 3
 958:	11 c0       	rjmp	.+34     	; 0x97c <vfprintf+0x326>
 95a:	a0 fe       	sbrs	r10, 0
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0x314>
 95e:	b2 14       	cp	r11, r2
 960:	88 f4       	brcc	.+34     	; 0x984 <vfprintf+0x32e>
 962:	28 0c       	add	r2, r8
 964:	92 2c       	mov	r9, r2
 966:	9b 18       	sub	r9, r11
 968:	0e c0       	rjmp	.+28     	; 0x986 <vfprintf+0x330>
 96a:	b2 14       	cp	r11, r2
 96c:	60 f4       	brcc	.+24     	; 0x986 <vfprintf+0x330>
 96e:	b6 01       	movw	r22, r12
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 978:	b3 94       	inc	r11
 97a:	f7 cf       	rjmp	.-18     	; 0x96a <vfprintf+0x314>
 97c:	b2 14       	cp	r11, r2
 97e:	18 f4       	brcc	.+6      	; 0x986 <vfprintf+0x330>
 980:	2b 18       	sub	r2, r11
 982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0x332>
 984:	98 2c       	mov	r9, r8
 986:	21 2c       	mov	r2, r1
 988:	a4 fe       	sbrs	r10, 4
 98a:	10 c0       	rjmp	.+32     	; 0x9ac <vfprintf+0x356>
 98c:	b6 01       	movw	r22, r12
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 996:	a2 fe       	sbrs	r10, 2
 998:	17 c0       	rjmp	.+46     	; 0x9c8 <vfprintf+0x372>
 99a:	a1 fc       	sbrc	r10, 1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <vfprintf+0x34e>
 99e:	88 e7       	ldi	r24, 0x78	; 120
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <vfprintf+0x352>
 9a4:	88 e5       	ldi	r24, 0x58	; 88
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	b6 01       	movw	r22, r12
 9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <vfprintf+0x36e>
 9ac:	8a 2d       	mov	r24, r10
 9ae:	86 78       	andi	r24, 0x86	; 134
 9b0:	59 f0       	breq	.+22     	; 0x9c8 <vfprintf+0x372>
 9b2:	a1 fe       	sbrs	r10, 1
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <vfprintf+0x364>
 9b6:	8b e2       	ldi	r24, 0x2B	; 43
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <vfprintf+0x366>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	a7 fc       	sbrc	r10, 7
 9be:	8d e2       	ldi	r24, 0x2D	; 45
 9c0:	b6 01       	movw	r22, r12
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 9c8:	89 14       	cp	r8, r9
 9ca:	38 f4       	brcc	.+14     	; 0x9da <vfprintf+0x384>
 9cc:	b6 01       	movw	r22, r12
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 9d6:	9a 94       	dec	r9
 9d8:	f7 cf       	rjmp	.-18     	; 0x9c8 <vfprintf+0x372>
 9da:	8a 94       	dec	r8
 9dc:	f3 01       	movw	r30, r6
 9de:	e8 0d       	add	r30, r8
 9e0:	f1 1d       	adc	r31, r1
 9e2:	80 81       	ld	r24, Z
 9e4:	b6 01       	movw	r22, r12
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 9ec:	81 10       	cpse	r8, r1
 9ee:	f5 cf       	rjmp	.-22     	; 0x9da <vfprintf+0x384>
 9f0:	22 20       	and	r2, r2
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <vfprintf+0x3a0>
 9f4:	42 ce       	rjmp	.-892    	; 0x67a <vfprintf+0x24>
 9f6:	b6 01       	movw	r22, r12
 9f8:	80 e2       	ldi	r24, 0x20	; 32
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 a00:	2a 94       	dec	r2
 a02:	f6 cf       	rjmp	.-20     	; 0x9f0 <vfprintf+0x39a>
 a04:	f6 01       	movw	r30, r12
 a06:	86 81       	ldd	r24, Z+6	; 0x06
 a08:	97 81       	ldd	r25, Z+7	; 0x07
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <vfprintf+0x3ba>
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	2b 96       	adiw	r28, 0x0b	; 11
 a12:	e2 e1       	ldi	r30, 0x12	; 18
 a14:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__>

00000a18 <calloc>:
 a18:	0f 93       	push	r16
 a1a:	1f 93       	push	r17
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	86 9f       	mul	r24, r22
 a22:	80 01       	movw	r16, r0
 a24:	87 9f       	mul	r24, r23
 a26:	10 0d       	add	r17, r0
 a28:	96 9f       	mul	r25, r22
 a2a:	10 0d       	add	r17, r0
 a2c:	11 24       	eor	r1, r1
 a2e:	c8 01       	movw	r24, r16
 a30:	0e 94 28 05 	call	0xa50	; 0xa50 <malloc>
 a34:	ec 01       	movw	r28, r24
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	29 f0       	breq	.+10     	; 0xa44 <calloc+0x2c>
 a3a:	a8 01       	movw	r20, r16
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	0e 94 54 06 	call	0xca8	; 0xca8 <memset>
 a44:	ce 01       	movw	r24, r28
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	1f 91       	pop	r17
 a4c:	0f 91       	pop	r16
 a4e:	08 95       	ret

00000a50 <malloc>:
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	82 30       	cpi	r24, 0x02	; 2
 a5a:	91 05       	cpc	r25, r1
 a5c:	10 f4       	brcc	.+4      	; 0xa62 <malloc+0x12>
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <__flp>
 a66:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <__flp+0x1>
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	a0 e0       	ldi	r26, 0x00	; 0
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	30 97       	sbiw	r30, 0x00	; 0
 a74:	19 f1       	breq	.+70     	; 0xabc <malloc+0x6c>
 a76:	40 81       	ld	r20, Z
 a78:	51 81       	ldd	r21, Z+1	; 0x01
 a7a:	02 81       	ldd	r16, Z+2	; 0x02
 a7c:	13 81       	ldd	r17, Z+3	; 0x03
 a7e:	48 17       	cp	r20, r24
 a80:	59 07       	cpc	r21, r25
 a82:	c8 f0       	brcs	.+50     	; 0xab6 <malloc+0x66>
 a84:	84 17       	cp	r24, r20
 a86:	95 07       	cpc	r25, r21
 a88:	69 f4       	brne	.+26     	; 0xaa4 <malloc+0x54>
 a8a:	10 97       	sbiw	r26, 0x00	; 0
 a8c:	31 f0       	breq	.+12     	; 0xa9a <malloc+0x4a>
 a8e:	12 96       	adiw	r26, 0x02	; 2
 a90:	0c 93       	st	X, r16
 a92:	12 97       	sbiw	r26, 0x02	; 2
 a94:	13 96       	adiw	r26, 0x03	; 3
 a96:	1c 93       	st	X, r17
 a98:	27 c0       	rjmp	.+78     	; 0xae8 <malloc+0x98>
 a9a:	00 93 e4 01 	sts	0x01E4, r16	; 0x8001e4 <__flp>
 a9e:	10 93 e5 01 	sts	0x01E5, r17	; 0x8001e5 <__flp+0x1>
 aa2:	22 c0       	rjmp	.+68     	; 0xae8 <malloc+0x98>
 aa4:	21 15       	cp	r18, r1
 aa6:	31 05       	cpc	r19, r1
 aa8:	19 f0       	breq	.+6      	; 0xab0 <malloc+0x60>
 aaa:	42 17       	cp	r20, r18
 aac:	53 07       	cpc	r21, r19
 aae:	18 f4       	brcc	.+6      	; 0xab6 <malloc+0x66>
 ab0:	9a 01       	movw	r18, r20
 ab2:	bd 01       	movw	r22, r26
 ab4:	ef 01       	movw	r28, r30
 ab6:	df 01       	movw	r26, r30
 ab8:	f8 01       	movw	r30, r16
 aba:	db cf       	rjmp	.-74     	; 0xa72 <malloc+0x22>
 abc:	21 15       	cp	r18, r1
 abe:	31 05       	cpc	r19, r1
 ac0:	f9 f0       	breq	.+62     	; 0xb00 <malloc+0xb0>
 ac2:	28 1b       	sub	r18, r24
 ac4:	39 0b       	sbc	r19, r25
 ac6:	24 30       	cpi	r18, 0x04	; 4
 ac8:	31 05       	cpc	r19, r1
 aca:	80 f4       	brcc	.+32     	; 0xaec <malloc+0x9c>
 acc:	8a 81       	ldd	r24, Y+2	; 0x02
 ace:	9b 81       	ldd	r25, Y+3	; 0x03
 ad0:	61 15       	cp	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	21 f0       	breq	.+8      	; 0xade <malloc+0x8e>
 ad6:	fb 01       	movw	r30, r22
 ad8:	93 83       	std	Z+3, r25	; 0x03
 ada:	82 83       	std	Z+2, r24	; 0x02
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <malloc+0x96>
 ade:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__flp+0x1>
 ae2:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__flp>
 ae6:	fe 01       	movw	r30, r28
 ae8:	32 96       	adiw	r30, 0x02	; 2
 aea:	44 c0       	rjmp	.+136    	; 0xb74 <malloc+0x124>
 aec:	fe 01       	movw	r30, r28
 aee:	e2 0f       	add	r30, r18
 af0:	f3 1f       	adc	r31, r19
 af2:	81 93       	st	Z+, r24
 af4:	91 93       	st	Z+, r25
 af6:	22 50       	subi	r18, 0x02	; 2
 af8:	31 09       	sbc	r19, r1
 afa:	39 83       	std	Y+1, r19	; 0x01
 afc:	28 83       	st	Y, r18
 afe:	3a c0       	rjmp	.+116    	; 0xb74 <malloc+0x124>
 b00:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 b04:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 b08:	23 2b       	or	r18, r19
 b0a:	41 f4       	brne	.+16     	; 0xb1c <malloc+0xcc>
 b0c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b10:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b14:	30 93 e3 01 	sts	0x01E3, r19	; 0x8001e3 <__brkval+0x1>
 b18:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <__brkval>
 b1c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b20:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b24:	21 15       	cp	r18, r1
 b26:	31 05       	cpc	r19, r1
 b28:	41 f4       	brne	.+16     	; 0xb3a <malloc+0xea>
 b2a:	2d b7       	in	r18, 0x3d	; 61
 b2c:	3e b7       	in	r19, 0x3e	; 62
 b2e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b32:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b36:	24 1b       	sub	r18, r20
 b38:	35 0b       	sbc	r19, r21
 b3a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__brkval>
 b3e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__brkval+0x1>
 b42:	e2 17       	cp	r30, r18
 b44:	f3 07       	cpc	r31, r19
 b46:	a0 f4       	brcc	.+40     	; 0xb70 <malloc+0x120>
 b48:	2e 1b       	sub	r18, r30
 b4a:	3f 0b       	sbc	r19, r31
 b4c:	28 17       	cp	r18, r24
 b4e:	39 07       	cpc	r19, r25
 b50:	78 f0       	brcs	.+30     	; 0xb70 <malloc+0x120>
 b52:	ac 01       	movw	r20, r24
 b54:	4e 5f       	subi	r20, 0xFE	; 254
 b56:	5f 4f       	sbci	r21, 0xFF	; 255
 b58:	24 17       	cp	r18, r20
 b5a:	35 07       	cpc	r19, r21
 b5c:	48 f0       	brcs	.+18     	; 0xb70 <malloc+0x120>
 b5e:	4e 0f       	add	r20, r30
 b60:	5f 1f       	adc	r21, r31
 b62:	50 93 e3 01 	sts	0x01E3, r21	; 0x8001e3 <__brkval+0x1>
 b66:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <__brkval>
 b6a:	81 93       	st	Z+, r24
 b6c:	91 93       	st	Z+, r25
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <malloc+0x124>
 b70:	e0 e0       	ldi	r30, 0x00	; 0
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	cf 01       	movw	r24, r30
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	1f 91       	pop	r17
 b7c:	0f 91       	pop	r16
 b7e:	08 95       	ret

00000b80 <free>:
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	00 97       	sbiw	r24, 0x00	; 0
 b86:	09 f4       	brne	.+2      	; 0xb8a <free+0xa>
 b88:	81 c0       	rjmp	.+258    	; 0xc8c <free+0x10c>
 b8a:	fc 01       	movw	r30, r24
 b8c:	32 97       	sbiw	r30, 0x02	; 2
 b8e:	13 82       	std	Z+3, r1	; 0x03
 b90:	12 82       	std	Z+2, r1	; 0x02
 b92:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <__flp>
 b96:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <__flp+0x1>
 b9a:	10 97       	sbiw	r26, 0x00	; 0
 b9c:	81 f4       	brne	.+32     	; 0xbbe <free+0x3e>
 b9e:	20 81       	ld	r18, Z
 ba0:	31 81       	ldd	r19, Z+1	; 0x01
 ba2:	82 0f       	add	r24, r18
 ba4:	93 1f       	adc	r25, r19
 ba6:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 baa:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 bae:	28 17       	cp	r18, r24
 bb0:	39 07       	cpc	r19, r25
 bb2:	51 f5       	brne	.+84     	; 0xc08 <free+0x88>
 bb4:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__brkval+0x1>
 bb8:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__brkval>
 bbc:	67 c0       	rjmp	.+206    	; 0xc8c <free+0x10c>
 bbe:	ed 01       	movw	r28, r26
 bc0:	20 e0       	ldi	r18, 0x00	; 0
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	ce 17       	cp	r28, r30
 bc6:	df 07       	cpc	r29, r31
 bc8:	40 f4       	brcc	.+16     	; 0xbda <free+0x5a>
 bca:	4a 81       	ldd	r20, Y+2	; 0x02
 bcc:	5b 81       	ldd	r21, Y+3	; 0x03
 bce:	9e 01       	movw	r18, r28
 bd0:	41 15       	cp	r20, r1
 bd2:	51 05       	cpc	r21, r1
 bd4:	f1 f0       	breq	.+60     	; 0xc12 <free+0x92>
 bd6:	ea 01       	movw	r28, r20
 bd8:	f5 cf       	rjmp	.-22     	; 0xbc4 <free+0x44>
 bda:	d3 83       	std	Z+3, r29	; 0x03
 bdc:	c2 83       	std	Z+2, r28	; 0x02
 bde:	40 81       	ld	r20, Z
 be0:	51 81       	ldd	r21, Z+1	; 0x01
 be2:	84 0f       	add	r24, r20
 be4:	95 1f       	adc	r25, r21
 be6:	c8 17       	cp	r28, r24
 be8:	d9 07       	cpc	r29, r25
 bea:	59 f4       	brne	.+22     	; 0xc02 <free+0x82>
 bec:	88 81       	ld	r24, Y
 bee:	99 81       	ldd	r25, Y+1	; 0x01
 bf0:	84 0f       	add	r24, r20
 bf2:	95 1f       	adc	r25, r21
 bf4:	02 96       	adiw	r24, 0x02	; 2
 bf6:	91 83       	std	Z+1, r25	; 0x01
 bf8:	80 83       	st	Z, r24
 bfa:	8a 81       	ldd	r24, Y+2	; 0x02
 bfc:	9b 81       	ldd	r25, Y+3	; 0x03
 bfe:	93 83       	std	Z+3, r25	; 0x03
 c00:	82 83       	std	Z+2, r24	; 0x02
 c02:	21 15       	cp	r18, r1
 c04:	31 05       	cpc	r19, r1
 c06:	29 f4       	brne	.+10     	; 0xc12 <free+0x92>
 c08:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__flp+0x1>
 c0c:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__flp>
 c10:	3d c0       	rjmp	.+122    	; 0xc8c <free+0x10c>
 c12:	e9 01       	movw	r28, r18
 c14:	fb 83       	std	Y+3, r31	; 0x03
 c16:	ea 83       	std	Y+2, r30	; 0x02
 c18:	49 91       	ld	r20, Y+
 c1a:	59 91       	ld	r21, Y+
 c1c:	c4 0f       	add	r28, r20
 c1e:	d5 1f       	adc	r29, r21
 c20:	ec 17       	cp	r30, r28
 c22:	fd 07       	cpc	r31, r29
 c24:	61 f4       	brne	.+24     	; 0xc3e <free+0xbe>
 c26:	80 81       	ld	r24, Z
 c28:	91 81       	ldd	r25, Z+1	; 0x01
 c2a:	84 0f       	add	r24, r20
 c2c:	95 1f       	adc	r25, r21
 c2e:	02 96       	adiw	r24, 0x02	; 2
 c30:	e9 01       	movw	r28, r18
 c32:	99 83       	std	Y+1, r25	; 0x01
 c34:	88 83       	st	Y, r24
 c36:	82 81       	ldd	r24, Z+2	; 0x02
 c38:	93 81       	ldd	r25, Z+3	; 0x03
 c3a:	9b 83       	std	Y+3, r25	; 0x03
 c3c:	8a 83       	std	Y+2, r24	; 0x02
 c3e:	e0 e0       	ldi	r30, 0x00	; 0
 c40:	f0 e0       	ldi	r31, 0x00	; 0
 c42:	12 96       	adiw	r26, 0x02	; 2
 c44:	8d 91       	ld	r24, X+
 c46:	9c 91       	ld	r25, X
 c48:	13 97       	sbiw	r26, 0x03	; 3
 c4a:	00 97       	sbiw	r24, 0x00	; 0
 c4c:	19 f0       	breq	.+6      	; 0xc54 <free+0xd4>
 c4e:	fd 01       	movw	r30, r26
 c50:	dc 01       	movw	r26, r24
 c52:	f7 cf       	rjmp	.-18     	; 0xc42 <free+0xc2>
 c54:	8d 91       	ld	r24, X+
 c56:	9c 91       	ld	r25, X
 c58:	11 97       	sbiw	r26, 0x01	; 1
 c5a:	9d 01       	movw	r18, r26
 c5c:	2e 5f       	subi	r18, 0xFE	; 254
 c5e:	3f 4f       	sbci	r19, 0xFF	; 255
 c60:	82 0f       	add	r24, r18
 c62:	93 1f       	adc	r25, r19
 c64:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 c68:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 c6c:	28 17       	cp	r18, r24
 c6e:	39 07       	cpc	r19, r25
 c70:	69 f4       	brne	.+26     	; 0xc8c <free+0x10c>
 c72:	30 97       	sbiw	r30, 0x00	; 0
 c74:	29 f4       	brne	.+10     	; 0xc80 <free+0x100>
 c76:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <__flp+0x1>
 c7a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__flp>
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <free+0x104>
 c80:	13 82       	std	Z+3, r1	; 0x03
 c82:	12 82       	std	Z+2, r1	; 0x02
 c84:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <__brkval+0x1>
 c88:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <__brkval>
 c8c:	df 91       	pop	r29
 c8e:	cf 91       	pop	r28
 c90:	08 95       	ret

00000c92 <strnlen_P>:
 c92:	fc 01       	movw	r30, r24
 c94:	05 90       	lpm	r0, Z+
 c96:	61 50       	subi	r22, 0x01	; 1
 c98:	70 40       	sbci	r23, 0x00	; 0
 c9a:	01 10       	cpse	r0, r1
 c9c:	d8 f7       	brcc	.-10     	; 0xc94 <strnlen_P+0x2>
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	8e 0f       	add	r24, r30
 ca4:	9f 1f       	adc	r25, r31
 ca6:	08 95       	ret

00000ca8 <memset>:
 ca8:	dc 01       	movw	r26, r24
 caa:	01 c0       	rjmp	.+2      	; 0xcae <memset+0x6>
 cac:	6d 93       	st	X+, r22
 cae:	41 50       	subi	r20, 0x01	; 1
 cb0:	50 40       	sbci	r21, 0x00	; 0
 cb2:	e0 f7       	brcc	.-8      	; 0xcac <memset+0x4>
 cb4:	08 95       	ret

00000cb6 <strnlen>:
 cb6:	fc 01       	movw	r30, r24
 cb8:	61 50       	subi	r22, 0x01	; 1
 cba:	70 40       	sbci	r23, 0x00	; 0
 cbc:	01 90       	ld	r0, Z+
 cbe:	01 10       	cpse	r0, r1
 cc0:	d8 f7       	brcc	.-10     	; 0xcb8 <strnlen+0x2>
 cc2:	80 95       	com	r24
 cc4:	90 95       	com	r25
 cc6:	8e 0f       	add	r24, r30
 cc8:	9f 1f       	adc	r25, r31
 cca:	08 95       	ret

00000ccc <fputc>:
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	fb 01       	movw	r30, r22
 cd6:	23 81       	ldd	r18, Z+3	; 0x03
 cd8:	21 fd       	sbrc	r18, 1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <fputc+0x16>
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	9f ef       	ldi	r25, 0xFF	; 255
 ce0:	2c c0       	rjmp	.+88     	; 0xd3a <fputc+0x6e>
 ce2:	22 ff       	sbrs	r18, 2
 ce4:	16 c0       	rjmp	.+44     	; 0xd12 <fputc+0x46>
 ce6:	46 81       	ldd	r20, Z+6	; 0x06
 ce8:	57 81       	ldd	r21, Z+7	; 0x07
 cea:	24 81       	ldd	r18, Z+4	; 0x04
 cec:	35 81       	ldd	r19, Z+5	; 0x05
 cee:	42 17       	cp	r20, r18
 cf0:	53 07       	cpc	r21, r19
 cf2:	44 f4       	brge	.+16     	; 0xd04 <fputc+0x38>
 cf4:	a0 81       	ld	r26, Z
 cf6:	b1 81       	ldd	r27, Z+1	; 0x01
 cf8:	9d 01       	movw	r18, r26
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	31 83       	std	Z+1, r19	; 0x01
 d00:	20 83       	st	Z, r18
 d02:	8c 93       	st	X, r24
 d04:	26 81       	ldd	r18, Z+6	; 0x06
 d06:	37 81       	ldd	r19, Z+7	; 0x07
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 d0c:	37 83       	std	Z+7, r19	; 0x07
 d0e:	26 83       	std	Z+6, r18	; 0x06
 d10:	14 c0       	rjmp	.+40     	; 0xd3a <fputc+0x6e>
 d12:	8b 01       	movw	r16, r22
 d14:	ec 01       	movw	r28, r24
 d16:	fb 01       	movw	r30, r22
 d18:	00 84       	ldd	r0, Z+8	; 0x08
 d1a:	f1 85       	ldd	r31, Z+9	; 0x09
 d1c:	e0 2d       	mov	r30, r0
 d1e:	09 95       	icall
 d20:	89 2b       	or	r24, r25
 d22:	e1 f6       	brne	.-72     	; 0xcdc <fputc+0x10>
 d24:	d8 01       	movw	r26, r16
 d26:	16 96       	adiw	r26, 0x06	; 6
 d28:	8d 91       	ld	r24, X+
 d2a:	9c 91       	ld	r25, X
 d2c:	17 97       	sbiw	r26, 0x07	; 7
 d2e:	01 96       	adiw	r24, 0x01	; 1
 d30:	17 96       	adiw	r26, 0x07	; 7
 d32:	9c 93       	st	X, r25
 d34:	8e 93       	st	-X, r24
 d36:	16 97       	sbiw	r26, 0x06	; 6
 d38:	ce 01       	movw	r24, r28
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	1f 91       	pop	r17
 d40:	0f 91       	pop	r16
 d42:	08 95       	ret

00000d44 <__ultoa_invert>:
 d44:	fa 01       	movw	r30, r20
 d46:	aa 27       	eor	r26, r26
 d48:	28 30       	cpi	r18, 0x08	; 8
 d4a:	51 f1       	breq	.+84     	; 0xda0 <__ultoa_invert+0x5c>
 d4c:	20 31       	cpi	r18, 0x10	; 16
 d4e:	81 f1       	breq	.+96     	; 0xdb0 <__ultoa_invert+0x6c>
 d50:	e8 94       	clt
 d52:	6f 93       	push	r22
 d54:	6e 7f       	andi	r22, 0xFE	; 254
 d56:	6e 5f       	subi	r22, 0xFE	; 254
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	af 4f       	sbci	r26, 0xFF	; 255
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	3e d0       	rcall	.+124    	; 0xde0 <__ultoa_invert+0x9c>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	3c d0       	rcall	.+120    	; 0xde0 <__ultoa_invert+0x9c>
 d68:	67 0f       	add	r22, r23
 d6a:	78 1f       	adc	r23, r24
 d6c:	89 1f       	adc	r24, r25
 d6e:	9a 1f       	adc	r25, r26
 d70:	a1 1d       	adc	r26, r1
 d72:	68 0f       	add	r22, r24
 d74:	79 1f       	adc	r23, r25
 d76:	8a 1f       	adc	r24, r26
 d78:	91 1d       	adc	r25, r1
 d7a:	a1 1d       	adc	r26, r1
 d7c:	6a 0f       	add	r22, r26
 d7e:	71 1d       	adc	r23, r1
 d80:	81 1d       	adc	r24, r1
 d82:	91 1d       	adc	r25, r1
 d84:	a1 1d       	adc	r26, r1
 d86:	20 d0       	rcall	.+64     	; 0xdc8 <__ultoa_invert+0x84>
 d88:	09 f4       	brne	.+2      	; 0xd8c <__ultoa_invert+0x48>
 d8a:	68 94       	set
 d8c:	3f 91       	pop	r19
 d8e:	2a e0       	ldi	r18, 0x0A	; 10
 d90:	26 9f       	mul	r18, r22
 d92:	11 24       	eor	r1, r1
 d94:	30 19       	sub	r19, r0
 d96:	30 5d       	subi	r19, 0xD0	; 208
 d98:	31 93       	st	Z+, r19
 d9a:	de f6       	brtc	.-74     	; 0xd52 <__ultoa_invert+0xe>
 d9c:	cf 01       	movw	r24, r30
 d9e:	08 95       	ret
 da0:	46 2f       	mov	r20, r22
 da2:	47 70       	andi	r20, 0x07	; 7
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	41 93       	st	Z+, r20
 da8:	b3 e0       	ldi	r27, 0x03	; 3
 daa:	0f d0       	rcall	.+30     	; 0xdca <__ultoa_invert+0x86>
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0x5c>
 dae:	f6 cf       	rjmp	.-20     	; 0xd9c <__ultoa_invert+0x58>
 db0:	46 2f       	mov	r20, r22
 db2:	4f 70       	andi	r20, 0x0F	; 15
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	4a 33       	cpi	r20, 0x3A	; 58
 db8:	18 f0       	brcs	.+6      	; 0xdc0 <__ultoa_invert+0x7c>
 dba:	49 5d       	subi	r20, 0xD9	; 217
 dbc:	31 fd       	sbrc	r19, 1
 dbe:	40 52       	subi	r20, 0x20	; 32
 dc0:	41 93       	st	Z+, r20
 dc2:	02 d0       	rcall	.+4      	; 0xdc8 <__ultoa_invert+0x84>
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__ultoa_invert+0x6c>
 dc6:	ea cf       	rjmp	.-44     	; 0xd9c <__ultoa_invert+0x58>
 dc8:	b4 e0       	ldi	r27, 0x04	; 4
 dca:	a6 95       	lsr	r26
 dcc:	97 95       	ror	r25
 dce:	87 95       	ror	r24
 dd0:	77 95       	ror	r23
 dd2:	67 95       	ror	r22
 dd4:	ba 95       	dec	r27
 dd6:	c9 f7       	brne	.-14     	; 0xdca <__ultoa_invert+0x86>
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	61 05       	cpc	r22, r1
 ddc:	71 05       	cpc	r23, r1
 dde:	08 95       	ret
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	0a 2e       	mov	r0, r26
 de6:	06 94       	lsr	r0
 de8:	57 95       	ror	r21
 dea:	47 95       	ror	r20
 dec:	37 95       	ror	r19
 dee:	27 95       	ror	r18
 df0:	ba 95       	dec	r27
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0xa2>
 df4:	62 0f       	add	r22, r18
 df6:	73 1f       	adc	r23, r19
 df8:	84 1f       	adc	r24, r20
 dfa:	95 1f       	adc	r25, r21
 dfc:	a0 1d       	adc	r26, r0
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
