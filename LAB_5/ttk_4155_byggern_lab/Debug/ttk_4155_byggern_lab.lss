
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00000db2  00000e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800268  00800268  00000fae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003250  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000162e  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188e  00000000  00000000  00005b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000069c  00000000  00000000  0000742c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a10  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b9  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009591  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_1>
   8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_2>
   c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 eb       	ldi	r30, 0xB2	; 178
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 36       	cpi	r26, 0x68	; 104
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e6       	ldi	r26, 0x68	; 104
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 37       	cpi	r26, 0x73	; 115
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  a6:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
  cc:	8f b5       	in	r24, 0x2f	; 47
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
  d8:	8f b5       	in	r24, 0x2f	; 47
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
  e4:	8e b5       	in	r24, 0x2e	; 46
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8f bd       	out	0x2f, r24	; 47
 102:	08 95       	ret

00000104 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <adc_read+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <adc_read+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
 118:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x118d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	91 e3       	ldi	r25, 0x31	; 49
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <adc_read+0x1a>
 122:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <adc_read+0x3e>
		adc_value[i] = adc[i];
 12a:	f9 01       	movw	r30, r18
 12c:	fc 5e       	subi	r31, 0xEC	; 236
 12e:	90 81       	ld	r25, Z
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	24 30       	cpi	r18, 0x04	; 4
 144:	31 05       	cpc	r19, r1
 146:	88 f3       	brcs	.-30     	; 0x12a <adc_read+0x26>
		adc_value[i] = adc[i];
	}

	return adc_value[channel];
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e8 0f       	add	r30, r24
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 16a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 174:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
 178:	08 95       	ret

0000017a <CAN_init>:
}

void CAN_init()
{
	// configure PD2 as input
	clear_bit(DDRD, CAN_INTERRUPT_PIN);
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	81 bb       	out	0x11, r24	; 17
	// Disable global interrupts
	cli();
 180:	f8 94       	cli
	// Enable interrupt INT0
	set_bit(GICR, CAN_INTERRUPT_ISR_REGISTER);
 182:	8b b7       	in	r24, 0x3b	; 59
 184:	80 64       	ori	r24, 0x40	; 64
 186:	8b bf       	out	0x3b, r24	; 59
	// Configure interrupt falling edge
	set_bit(MCUCR, ISC01);
 188:	85 b7       	in	r24, 0x35	; 53
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
 18e:	85 b7       	in	r24, 0x35	; 53
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	85 bf       	out	0x35, r24	; 53
	// Enable global interrupts
	sei();
 194:	78 94       	sei
	
	int8_t err = MCP2515_init();
 196:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_init>
	if (err < 0) {
 19a:	88 23       	and	r24, r24
 19c:	24 f4       	brge	.+8      	; 0x1a6 <CAN_init+0x2c>
		print_uart("error");
 19e:	89 e1       	ldi	r24, 0x19	; 25
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
 1a6:	08 95       	ret

000001a8 <CAN_send>:
	}
	
}

int8_t CAN_send(CAN_msg msg)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	2b 97       	sbiw	r28, 0x0b	; 11
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	e9 82       	std	Y+1, r14	; 0x01
 1c6:	fa 82       	std	Y+2, r15	; 0x02
 1c8:	0b 83       	std	Y+3, r16	; 0x03
 1ca:	1c 83       	std	Y+4, r17	; 0x04
 1cc:	2d 83       	std	Y+5, r18	; 0x05
 1ce:	3e 83       	std	Y+6, r19	; 0x06
 1d0:	4f 83       	std	Y+7, r20	; 0x07
 1d2:	58 87       	std	Y+8, r21	; 0x08
 1d4:	69 87       	std	Y+9, r22	; 0x09
 1d6:	7a 87       	std	Y+10, r23	; 0x0a
 1d8:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t ID_MSB = (0x7F8 & msg.ID) >> 3;
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	bc 01       	movw	r22, r24
 1e0:	68 7f       	andi	r22, 0xF8	; 248
 1e2:	77 70       	andi	r23, 0x07	; 7
 1e4:	76 95       	lsr	r23
 1e6:	67 95       	ror	r22
 1e8:	76 95       	lsr	r23
 1ea:	67 95       	ror	r22
 1ec:	76 95       	lsr	r23
 1ee:	67 95       	ror	r22
	uint8_t ID_LSB = (0x7 & msg.ID) << 5;
 1f0:	18 2f       	mov	r17, r24
 1f2:	12 95       	swap	r17
 1f4:	11 0f       	add	r17, r17
 1f6:	10 7e       	andi	r17, 0xE0	; 224
	
	MCP2515_write(MCP_TXB0SIDH, ID_MSB);
 1f8:	81 e3       	ldi	r24, 0x31	; 49
 1fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, ID_LSB);
 1fe:	61 2f       	mov	r22, r17
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	MCP2515_write(TXB0DLC, msg.length);
 206:	0b 81       	ldd	r16, Y+3	; 0x03
 208:	60 2f       	mov	r22, r16
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
	if(~(buff0_status & 0x8)) {
		for(uint8_t i = 0; i < msg.length; i++)
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	0c c0       	rjmp	.+24     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
 21a:	e4 e0       	ldi	r30, 0x04	; 4
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ec 0f       	add	r30, r28
 220:	fd 1f       	adc	r31, r29
 222:	e1 0f       	add	r30, r17
 224:	f1 1d       	adc	r31, r1
 226:	60 81       	ld	r22, Z
 228:	86 e3       	ldi	r24, 0x36	; 54
 22a:	81 0f       	add	r24, r17
 22c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, ID_LSB);
	MCP2515_write(TXB0DLC, msg.length);
	
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
	if(~(buff0_status & 0x8)) {
		for(uint8_t i = 0; i < msg.length; i++)
 230:	1f 5f       	subi	r17, 0xFF	; 255
 232:	10 17       	cp	r17, r16
 234:	90 f3       	brcs	.-28     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
		}
		MCP2515_request_to_send(MCP_RTS_TX0);
 236:	81 e8       	ldi	r24, 0x81	; 129
 238:	0e 94 14 02 	call	0x428	; 0x428 <MCP2515_request_to_send>
		return 0;
	} else return -1;
	
}
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	2b 96       	adiw	r28, 0x0b	; 11
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <CAN_receive>:

void CAN_receive(uint8_t buffer)
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <CAN_receive+0xa>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	CAN_msg rx_msg;
	uint8_t ID_MSB;
	uint8_t ID_LSB;
	uint8_t length;
	
	if (buffer == 0) {
 266:	81 11       	cpse	r24, r1
 268:	1f c0       	rjmp	.+62     	; 0x2a8 <CAN_receive+0x50>
		ID_MSB = MCP2515_read(MCP_RXB0SIDH);
 26a:	81 e6       	ldi	r24, 0x61	; 97
 26c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
		ID_LSB = MCP2515_read(MCP_RXB0SIDL);
 270:	82 e6       	ldi	r24, 0x62	; 98
 272:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
		ID_LSB = (ID_LSB & 0xE0) >> 5;
		rx_msg.ID = ID_MSB << 3;
		rx_msg.ID = (rx_msg.ID & 0x7F8) | (ID_LSB & 0x7);
		
		length = MCP2515_read(MCP_RXB0DLC);
 276:	85 e6       	ldi	r24, 0x65	; 101
 278:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
		rx_msg.length = (length & 0xF);
 27c:	08 2f       	mov	r16, r24
 27e:	0f 70       	andi	r16, 0x0F	; 15
		
		for (uint8_t i=0; i<rx_msg.length; i++) {
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	0c c0       	rjmp	.+24     	; 0x29c <CAN_receive+0x44>
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
 284:	86 e6       	ldi	r24, 0x66	; 102
 286:	81 0f       	add	r24, r17
 288:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
			char *temp_msg = rx_msg.message[i];
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9a 83       	std	Y+2, r25	; 0x02
 290:	89 83       	std	Y+1, r24	; 0x01
			print_uart(&temp_msg);
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		rx_msg.ID = (rx_msg.ID & 0x7F8) | (ID_LSB & 0x7);
		
		length = MCP2515_read(MCP_RXB0DLC);
		rx_msg.length = (length & 0xF);
		
		for (uint8_t i=0; i<rx_msg.length; i++) {
 29a:	1f 5f       	subi	r17, 0xFF	; 255
 29c:	10 17       	cp	r17, r16
 29e:	90 f3       	brcs	.-28     	; 0x284 <CAN_receive+0x2c>
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
			char *temp_msg = rx_msg.message[i];
			print_uart(&temp_msg);
		}
		print_uart("\r\n");
 2a0:	8e ec       	ldi	r24, 0xCE	; 206
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	}
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <CAN_interpret_status>:

void CAN_interpret_status(uint8_t status)
{
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	uint8_t buffer;
	print_uart("Interpreted something\r\n");
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	
	if (status & rx_buff_0_full) {
 2c2:	c0 ff       	sbrs	r28, 0
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <CAN_interpret_status+0x1e>
		buffer = 0;
		CAN_receive(buffer);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 2c 01 	call	0x258	; 0x258 <CAN_receive>
		print_uart("RX0 Full\r\n");
 2cc:	87 e3       	ldi	r24, 0x37	; 55
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	}
	
	if (status & rx_buff_1_full) {
 2d4:	c1 ff       	sbrs	r28, 1
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <CAN_interpret_status+0x30>
		buffer = 1;
		CAN_receive(buffer);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 2c 01 	call	0x258	; 0x258 <CAN_receive>
		print_uart("RX1 Full\r\n");
 2de:	82 e4       	ldi	r24, 0x42	; 66
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	}
	
	if (status & tx_buff_0_busy) {
 2e6:	c2 ff       	sbrs	r28, 2
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <CAN_interpret_status+0x3c>
		buffer = 0;
		// Something is about to go down
		print_uart("TX0 Busy\r\n");
 2ea:	8d e4       	ldi	r24, 0x4D	; 77
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	}
	
	if (status & tx_buff_0_empty) {
 2f2:	c3 ff       	sbrs	r28, 3
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <CAN_interpret_status+0x48>
		buffer = 0;
		// Something else happens
		print_uart("TX0 Empty\r\n");
 2f6:	88 e5       	ldi	r24, 0x58	; 88
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	}
	MCP2515_write(MCP_CANINTF, 0x00);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8c e2       	ldi	r24, 0x2C	; 44
 302:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	print_uart("Reset interrupts\r\n\n");
 306:	84 e6       	ldi	r24, 0x64	; 100
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <__vector_1>:
#include "CANdrv.h"

static uint8_t CANINT_status;

ISR (INT0_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	CAN_interpret_status(MCP2515_read_status());
 334:	0e 94 a3 02 	call	0x546	; 0x546 <MCP2515_read_status>
 338:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <CAN_interpret_status>
	//print_uart("CAN-controller interrupt\r\n");
}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <init>:
#include "MCP2515/MCP2515drv.h"
#include "CAN/CANdrv.h"


void init(){
	USART_drv_init(MYUBRR);
 35e:	8f e1       	ldi	r24, 0x1F	; 31
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <USART_drv_init>
	SRAM_init();
 366:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <SRAM_init>
	adc_drv_init();
 36a:	0e 94 57 00 	call	0xae	; 0xae <adc_drv_init>
	ext_button_drv_init();
 36e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ext_button_drv_init>
	adc_calibrate();
 372:	0e 94 b2 00 	call	0x164	; 0x164 <adc_calibrate>
	oled_init();
 376:	0e 94 71 03 	call	0x6e2	; 0x6e2 <oled_init>
	//menu_init();
	CAN_init();
 37a:	0e 94 bd 00 	call	0x17a	; 0x17a <CAN_init>
 37e:	08 95       	ret

00000380 <main>:
}

int main(void)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	2b 97       	sbiw	r28, 0x0b	; 11
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;

	init();
 394:	0e 94 af 01 	call	0x35e	; 0x35e <init>
	
	CAN_msg CAN_test = {
 398:	8b e0       	ldi	r24, 0x0B	; 11
 39a:	ee e0       	ldi	r30, 0x0E	; 14
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	de 01       	movw	r26, r28
 3a0:	11 96       	adiw	r26, 0x01	; 1
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	8a 95       	dec	r24
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x22>
		.length = 8,
		.message = {65, 66, 67, 68, 69, 70, 71, 72}
	};

    while (1){
		CAN_send(CAN_test);
 3aa:	e9 80       	ldd	r14, Y+1	; 0x01
 3ac:	fa 80       	ldd	r15, Y+2	; 0x02
 3ae:	0b 81       	ldd	r16, Y+3	; 0x03
 3b0:	1c 81       	ldd	r17, Y+4	; 0x04
 3b2:	2d 81       	ldd	r18, Y+5	; 0x05
 3b4:	3e 81       	ldd	r19, Y+6	; 0x06
 3b6:	4f 81       	ldd	r20, Y+7	; 0x07
 3b8:	58 85       	ldd	r21, Y+8	; 0x08
 3ba:	69 85       	ldd	r22, Y+9	; 0x09
 3bc:	7a 85       	ldd	r23, Y+10	; 0x0a
 3be:	8b 85       	ldd	r24, Y+11	; 0x0b
 3c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CAN_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	9c e2       	ldi	r25, 0x2C	; 44
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x4a>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x54>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x56>
 3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <main+0x2a>

000003d8 <MCP2515_read>:
	 return 0;
 }


uint8_t MCP2515_read(uint8_t read_register)
{
 3d8:	cf 93       	push	r28
 3da:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	clear_bit(PORTB, PB4);
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_READ);
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(read_register);
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	result = SPI_read();
 3ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_read>
	
	set_bit(PORTB, PB4);
 3f2:	98 b3       	in	r25, 0x18	; 24
 3f4:	90 61       	ori	r25, 0x10	; 16
 3f6:	98 bb       	out	0x18, r25	; 24
	
	return result;
}
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <MCP2515_write>:

void MCP2515_write(uint8_t write_register, uint8_t data)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	d8 2f       	mov	r29, r24
 402:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
 404:	88 b3       	in	r24, 0x18	; 24
 406:	8f 7e       	andi	r24, 0xEF	; 239
 408:	88 bb       	out	0x18, r24	; 24

	SPI_write(MCP_WRITE);
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(write_register);
 410:	8d 2f       	mov	r24, r29
 412:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(data);
 416:	8c 2f       	mov	r24, r28
 418:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>

	set_bit(PORTB, PB4);
 41c:	88 b3       	in	r24, 0x18	; 24
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	88 bb       	out	0x18, r24	; 24
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <MCP2515_request_to_send>:

void MCP2515_request_to_send(uint8_t buffer)
{
	clear_bit(PORTB, PB4);
 428:	98 b3       	in	r25, 0x18	; 24
 42a:	9f 7e       	andi	r25, 0xEF	; 239
 42c:	98 bb       	out	0x18, r25	; 24
	SPI_write(buffer);
 42e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	set_bit(PORTB, PB4);
 432:	88 b3       	in	r24, 0x18	; 24
 434:	80 61       	ori	r24, 0x10	; 16
 436:	88 bb       	out	0x18, r24	; 24
 438:	08 95       	ret

0000043a <MCP2515_bit_modify>:
}

void MCP2515_bit_modify(uint8_t write_register, uint8_t mask, uint8_t data)
{
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	18 2f       	mov	r17, r24
 442:	d6 2f       	mov	r29, r22
 444:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
 446:	88 b3       	in	r24, 0x18	; 24
 448:	8f 7e       	andi	r24, 0xEF	; 239
 44a:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(write_register);
 452:	81 2f       	mov	r24, r17
 454:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(mask);
 458:	8d 2f       	mov	r24, r29
 45a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	SPI_write(data);
 45e:	8c 2f       	mov	r24, r28
 460:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	
	set_bit(PORTB, PB4);
 464:	88 b3       	in	r24, 0x18	; 24
 466:	80 61       	ori	r24, 0x10	; 16
 468:	88 bb       	out	0x18, r24	; 24
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	08 95       	ret

00000472 <MCP2515_reset>:

void MCP2515_reset()
{
	clear_bit(PORTB, PB4);
 472:	88 b3       	in	r24, 0x18	; 24
 474:	8f 7e       	andi	r24, 0xEF	; 239
 476:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_RESET);
 478:	80 ec       	ldi	r24, 0xC0	; 192
 47a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	set_bit(PORTB, PB4);
 47e:	88 b3       	in	r24, 0x18	; 24
 480:	80 61       	ori	r24, 0x10	; 16
 482:	88 bb       	out	0x18, r24	; 24
 484:	08 95       	ret

00000486 <MCP2515_init>:
 */ 

#include "MCP2515drv.h"

int8_t MCP2515_init()
 {
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	 int value;
	 SPI_init(); // Initialize SPI
 48a:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_init>
	 MCP2515_reset(); // Send reset - command
 48e:	0e 94 39 02 	call	0x472	; 0x472 <MCP2515_reset>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
 492:	8e e0       	ldi	r24, 0x0E	; 14
 494:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_CONFIG){
 498:	80 7e       	andi	r24, 0xE0	; 224
 49a:	80 38       	cpi	r24, 0x80	; 128
 49c:	31 f0       	breq	.+12     	; 0x4aa <MCP2515_init+0x24>
		 print_uart("MCP2515 is NOT in configuration mode after reset!\r\n");
 49e:	88 e7       	ldi	r24, 0x78	; 120
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		 return -1;
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	4b c0       	rjmp	.+150    	; 0x540 <__stack+0x41>
	 }
	 
	 MCP2515_write(MCP_TXRTSCTRL, MCP_TXRTS_CONF);
 4aa:	67 e0       	ldi	r22, 0x07	; 7
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	 
	 // Receive buffer0 config: receive all messages, no overflow to RXB1.
	 MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
 4b2:	40 e6       	ldi	r20, 0x60	; 96
 4b4:	60 e6       	ldi	r22, 0x60	; 96
 4b6:	80 e6       	ldi	r24, 0x60	; 96
 4b8:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB0CTRL);
 4bc:	80 e6       	ldi	r24, 0x60	; 96
 4be:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
	 if (value != 0x60){
 4c2:	80 36       	cpi	r24, 0x60	; 96
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <MCP2515_init+0x4c>
		 print_uart("Receive buffer 0 config incorrect!\r\n");
 4c6:	8c ea       	ldi	r24, 0xAC	; 172
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		 return -2;
 4ce:	8e ef       	ldi	r24, 0xFE	; 254
 4d0:	37 c0       	rjmp	.+110    	; 0x540 <__stack+0x41>
	 }
	 
	 // Receive buffer1 config: receive all messages.
	 MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
 4d2:	40 e6       	ldi	r20, 0x60	; 96
 4d4:	60 e6       	ldi	r22, 0x60	; 96
 4d6:	80 e7       	ldi	r24, 0x70	; 112
 4d8:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB1CTRL);
 4dc:	80 e7       	ldi	r24, 0x70	; 112
 4de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
 4e2:	c8 2f       	mov	r28, r24
 4e4:	d0 e0       	ldi	r29, 0x00	; 0
	 print_uart(value);
 4e6:	ce 01       	movw	r24, r28
 4e8:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	 if (value != 0x60){
 4ec:	c0 36       	cpi	r28, 0x60	; 96
 4ee:	d1 05       	cpc	r29, r1
 4f0:	31 f0       	breq	.+12     	; 0x4fe <MCP2515_init+0x78>
		 print_uart("Receive buffer 1 config incorrect!\r\n");
 4f2:	81 ed       	ldi	r24, 0xD1	; 209
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		 return -3;
 4fa:	8d ef       	ldi	r24, 0xFD	; 253
 4fc:	21 c0       	rjmp	.+66     	; 0x540 <__stack+0x41>
	 }	 
	 
	 // Interrupt config: msg error, error flag change, TX0 empty, RX0 full
	 //MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0xA5);
	 MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0x5);
 4fe:	45 e0       	ldi	r20, 0x05	; 5
 500:	6f ef       	ldi	r22, 0xFF	; 255
 502:	8b e2       	ldi	r24, 0x2B	; 43
 504:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CANINTE);
 508:	8b e2       	ldi	r24, 0x2B	; 43
 50a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
	 if (value != 0x5){
 50e:	85 30       	cpi	r24, 0x05	; 5
 510:	31 f0       	breq	.+12     	; 0x51e <__stack+0x1f>
		 print_uart("Interrupt config incorrect!\r\n");
 512:	86 ef       	ldi	r24, 0xF6	; 246
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		 return -4;
 51a:	8c ef       	ldi	r24, 0xFC	; 252
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__stack+0x41>
	 } 
	 
	 MCP2515_write(MCP_CANCTRL, MODE_LOOPBACK);
 51e:	60 e4       	ldi	r22, 0x40	; 64
 520:	8f e0       	ldi	r24, 0x0F	; 15
 522:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP2515_write>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
 526:	8e e0       	ldi	r24, 0x0E	; 14
 528:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_LOOPBACK){
 52c:	80 7e       	andi	r24, 0xE0	; 224
 52e:	80 34       	cpi	r24, 0x40	; 64
 530:	31 f0       	breq	.+12     	; 0x53e <__stack+0x3f>
		 print_uart(" MCP2515 is NOT in loopback mode!\n");
 532:	84 e1       	ldi	r24, 0x14	; 20
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
		 return -5;
 53a:	8b ef       	ldi	r24, 0xFB	; 251
 53c:	01 c0       	rjmp	.+2      	; 0x540 <__stack+0x41>
	 }

	 return 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 }
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <MCP2515_read_status>:

uint8_t MCP2515_read_status()
{
	uint8_t data;
	
	clear_bit(PORTB, PB4);
 546:	88 b3       	in	r24, 0x18	; 24
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_READ_STATUS);
 54c:	80 ea       	ldi	r24, 0xA0	; 160
 54e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_write>
	data = SPI_read();
 552:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_read>
	data = SPI_read();
 556:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_read>
	set_bit(PORTB, PB4);
 55a:	98 b3       	in	r25, 0x18	; 24
 55c:	90 61       	ori	r25, 0x10	; 16
 55e:	98 bb       	out	0x18, r25	; 24
	
	return data;
 560:	08 95       	ret

00000562 <__vector_2>:
#include "ext_button_drv.h"
#include "prints.h"


ISR (INT1_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
 584:	87 e3       	ldi	r24, 0x37	; 55
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_3>:

ISR (INT2_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
 5d0:	8e e4       	ldi	r24, 0x4E	; 78
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	0e 94 1d 03 	call	0x63a	; 0x63a <print_uart>
	enter();
 5d8:	0e 94 2a 03 	call	0x654	; 0x654 <enter>
	
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
 5fe:	81 b3       	in	r24, 0x11	; 17
 600:	87 7f       	andi	r24, 0xF7	; 247
 602:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
 604:	86 b1       	in	r24, 0x06	; 6
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
 60a:	f8 94       	cli
	// Enables interrupt on pin INT1
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
 60c:	8b b7       	in	r24, 0x3b	; 59
 60e:	80 68       	ori	r24, 0x80	; 128
 610:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT1
	set_bit(MCUCR, ISC11);
 612:	85 b7       	in	r24, 0x35	; 53
 614:	88 60       	ori	r24, 0x08	; 8
 616:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
 618:	85 b7       	in	r24, 0x35	; 53
 61a:	84 60       	ori	r24, 0x04	; 4
 61c:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
 61e:	8b b7       	in	r24, 0x3b	; 59
 620:	8e 7f       	andi	r24, 0xFE	; 254
 622:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
 624:	86 b7       	in	r24, 0x36	; 54
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
 62a:	8a b7       	in	r24, 0x3a	; 58
 62c:	80 62       	ori	r24, 0x20	; 32
 62e:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
 630:	8b b7       	in	r24, 0x3b	; 59
 632:	80 62       	ori	r24, 0x20	; 32
 634:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
 636:	78 94       	sei
 638:	08 95       	ret

0000063a <print_uart>:
void print_oled(char* string){
	stdout = &stdout_oled;
	printf(string);
	
}void print_uart(char* string){
	stdout = &stdout_uart;
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	31 e0       	ldi	r19, 0x01	; 1
 63e:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <__iob+0x3>
 642:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <__iob+0x2>
	printf(string);
 646:	9f 93       	push	r25
 648:	8f 93       	push	r24
 64a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <printf>
}
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	08 95       	ret

00000654 <enter>:
		print_arrow();
	}
}

void enter()
{
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	6c 97       	sbiw	r28, 0x1c	; 28
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
 668:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <current_menu>
 66c:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <current_menu+0x1>
 670:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <arrow_on_line>
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	21 50       	subi	r18, 0x01	; 1
 678:	31 09       	sbc	r19, r1
 67a:	4c e1       	ldi	r20, 0x1C	; 28
 67c:	42 9f       	mul	r20, r18
 67e:	c0 01       	movw	r24, r0
 680:	43 9f       	mul	r20, r19
 682:	90 0d       	add	r25, r0
 684:	11 24       	eor	r1, r1
 686:	e8 0f       	add	r30, r24
 688:	f9 1f       	adc	r31, r25
 68a:	78 96       	adiw	r30, 0x18	; 24
 68c:	8c e1       	ldi	r24, 0x1C	; 28
 68e:	de 01       	movw	r26, r28
 690:	11 96       	adiw	r26, 0x01	; 1
 692:	01 90       	ld	r0, Z+
 694:	0d 92       	st	X+, r0
 696:	8a 95       	dec	r24
 698:	e1 f7       	brne	.-8      	; 0x692 <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
 69a:	e9 8d       	ldd	r30, Y+25	; 0x19
 69c:	fa 8d       	ldd	r31, Y+26	; 0x1a
 69e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 6a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 6a2:	09 95       	icall
}
 6a4:	6c 96       	adiw	r28, 0x1c	; 28
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <oled_write_cmd>:
	}
}

void oled_home()
{
	oled_pos(0, 0);
 6b6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd8d>
 6ba:	08 95       	ret

000006bc <oled_write_data>:
}

void oled_write_data(char data) // Volatile
{
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
 6bc:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf8d>
 6c0:	08 95       	ret

000006c2 <oled_reset>:
	//stdout = &stdout_oled;
	
}

void oled_reset()
{
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
	for(uint16_t i = 0; i < 1024; i++) {
 6c6:	c0 e0       	ldi	r28, 0x00	; 0
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <oled_reset+0x12>
		oled_write_data(0b00000000);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 5e 03 	call	0x6bc	; 0x6bc <oled_write_data>
	
}

void oled_reset()
{
	for(uint16_t i = 0; i < 1024; i++) {
 6d2:	21 96       	adiw	r28, 0x01	; 1
 6d4:	c1 15       	cp	r28, r1
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	d8 07       	cpc	r29, r24
 6da:	c0 f3       	brcs	.-16     	; 0x6cc <oled_reset+0xa>
		oled_write_data(0b00000000);
	}
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <oled_init>:
	oled_cmd_reg[0] = command;
}

void oled_init()
{
	oled_write_cmd(0xae); // display off
 6e2:	8e ea       	ldi	r24, 0xAE	; 174
 6e4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xa1); //segment remap
 6e8:	81 ea       	ldi	r24, 0xA1	; 161
 6ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xda); //common pads hardware: alternative
 6ee:	8a ed       	ldi	r24, 0xDA	; 218
 6f0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x12);
 6f4:	82 e1       	ldi	r24, 0x12	; 18
 6f6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xc8); //common output scan direction:com63~com0
 6fa:	88 ec       	ldi	r24, 0xC8	; 200
 6fc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xa8); //multiplex ration mode:63
 700:	88 ea       	ldi	r24, 0xA8	; 168
 702:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x3f);
 706:	8f e3       	ldi	r24, 0x3F	; 63
 708:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xd5); //display divide ratio/osc. freq. mode
 70c:	85 ed       	ldi	r24, 0xD5	; 213
 70e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x80);
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x81); //contrast control
 718:	81 e8       	ldi	r24, 0x81	; 129
 71a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xFF);
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xd9); //set pre-charge period
 724:	89 ed       	ldi	r24, 0xD9	; 217
 726:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x21);
 72a:	81 e2       	ldi	r24, 0x21	; 33
 72c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x20); //Set Memory Addressing Mode (Horizontal)
 730:	80 e2       	ldi	r24, 0x20	; 32
 732:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x00);
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xdb); //VCOM deselect level mode
 73c:	8b ed       	ldi	r24, 0xDB	; 219
 73e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x30);
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xad); //master configuration
 748:	8d ea       	ldi	r24, 0xAD	; 173
 74a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0x00);
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xa4); //out follows RAM content
 754:	84 ea       	ldi	r24, 0xA4	; 164
 756:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xa6); //set normal display
 75a:	86 ea       	ldi	r24, 0xA6	; 166
 75c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0xaf); // display on
 760:	8f ea       	ldi	r24, 0xAF	; 175
 762:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	
	oled_write_cmd(0b00100001); // Set Column Address
 766:	81 e2       	ldi	r24, 0x21	; 33
 768:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0b00000000);
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0b11111111);
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	
	oled_write_cmd(0b00100010); // Set Page Address
 778:	82 e2       	ldi	r24, 0x22	; 34
 77a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0b00000000);
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	oled_write_cmd(0b11111111);
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <oled_write_cmd>
	
	oled_reset(); // Set all pixels low
 78a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <oled_reset>
 78e:	08 95       	ret

00000790 <SPI_init>:

void SPI_init(void)
{
	/* Set PB4, MOSI and SCK output. By using "set_bit", we avoid configuring all other bits (?) */
	//DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
	set_bit(DDRB, DDB4);
 790:	87 b3       	in	r24, 0x17	; 23
 792:	80 61       	ori	r24, 0x10	; 16
 794:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB5);
 796:	87 b3       	in	r24, 0x17	; 23
 798:	80 62       	ori	r24, 0x20	; 32
 79a:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB7);
 79c:	87 b3       	in	r24, 0x17	; 23
 79e:	80 68       	ori	r24, 0x80	; 128
 7a0:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 7a2:	81 e5       	ldi	r24, 0x51	; 81
 7a4:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(PORTB, PB4);
 7a6:	88 b3       	in	r24, 0x18	; 24
 7a8:	80 61       	ori	r24, 0x10	; 16
 7aa:	88 bb       	out	0x18, r24	; 24
 7ac:	08 95       	ret

000007ae <SPI_transmit>:
}

void SPI_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 7ae:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 7b0:	77 9b       	sbis	0x0e, 7	; 14
 7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <SPI_transmit+0x2>
	;
}
 7b4:	08 95       	ret

000007b6 <SPI_write>:

void SPI_write(uint8_t data)
{
	SPI_transmit(data);
 7b6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SPI_transmit>
 7ba:	08 95       	ret

000007bc <SPI_read>:
}

uint8_t SPI_read()
{
	SPI_transmit(SPI_DUMMY_DATA);
 7bc:	84 ef       	ldi	r24, 0xF4	; 244
 7be:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SPI_transmit>
	
	return SPDR;
 7c2:	8f b1       	in	r24, 0x0f	; 15
 7c4:	08 95       	ret

000007c6 <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
 7c6:	85 b7       	in	r24, 0x35	; 53
 7c8:	80 68       	ori	r24, 0x80	; 128
 7ca:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
 7cc:	80 b7       	in	r24, 0x30	; 48
 7ce:	80 62       	ori	r24, 0x20	; 32
 7d0:	80 bf       	out	0x30, r24	; 48
 7d2:	08 95       	ret

000007d4 <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 7d4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 7d6:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 7d8:	88 e1       	ldi	r24, 0x18	; 24
 7da:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 7dc:	8e e8       	ldi	r24, 0x8E	; 142
 7de:	80 bd       	out	0x20, r24	; 32
 7e0:	08 95       	ret

000007e2 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 7e2:	5d 9b       	sbis	0x0b, 5	; 11
 7e4:	fe cf       	rjmp	.-4      	; 0x7e2 <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7e6:	8c b9       	out	0x0c, r24	; 12
 7e8:	08 95       	ret

000007ea <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 7ea:	5f 9b       	sbis	0x0b, 7	; 11
 7ec:	fe cf       	rjmp	.-4      	; 0x7ea <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 7ee:	8c b1       	in	r24, 0x0c	; 12

}
 7f0:	08 95       	ret

000007f2 <printf>:
 7f2:	a0 e0       	ldi	r26, 0x00	; 0
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	ef ef       	ldi	r30, 0xFF	; 255
 7f8:	f3 e0       	ldi	r31, 0x03	; 3
 7fa:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__prologue_saves__+0x20>
 7fe:	ae 01       	movw	r20, r28
 800:	4b 5f       	subi	r20, 0xFB	; 251
 802:	5f 4f       	sbci	r21, 0xFF	; 255
 804:	fa 01       	movw	r30, r20
 806:	61 91       	ld	r22, Z+
 808:	71 91       	ld	r23, Z+
 80a:	af 01       	movw	r20, r30
 80c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <__iob+0x2>
 810:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <__iob+0x3>
 814:	0e 94 0f 04 	call	0x81e	; 0x81e <vfprintf>
 818:	e2 e0       	ldi	r30, 0x02	; 2
 81a:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__epilogue_restores__+0x20>

0000081e <vfprintf>:
 81e:	ab e0       	ldi	r26, 0x0B	; 11
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e5 e1       	ldi	r30, 0x15	; 21
 824:	f4 e0       	ldi	r31, 0x04	; 4
 826:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__prologue_saves__>
 82a:	6c 01       	movw	r12, r24
 82c:	7b 01       	movw	r14, r22
 82e:	8a 01       	movw	r16, r20
 830:	fc 01       	movw	r30, r24
 832:	17 82       	std	Z+7, r1	; 0x07
 834:	16 82       	std	Z+6, r1	; 0x06
 836:	83 81       	ldd	r24, Z+3	; 0x03
 838:	81 ff       	sbrs	r24, 1
 83a:	cc c1       	rjmp	.+920    	; 0xbd4 <vfprintf+0x3b6>
 83c:	ce 01       	movw	r24, r28
 83e:	01 96       	adiw	r24, 0x01	; 1
 840:	3c 01       	movw	r6, r24
 842:	f6 01       	movw	r30, r12
 844:	93 81       	ldd	r25, Z+3	; 0x03
 846:	f7 01       	movw	r30, r14
 848:	93 fd       	sbrc	r25, 3
 84a:	85 91       	lpm	r24, Z+
 84c:	93 ff       	sbrs	r25, 3
 84e:	81 91       	ld	r24, Z+
 850:	7f 01       	movw	r14, r30
 852:	88 23       	and	r24, r24
 854:	09 f4       	brne	.+2      	; 0x858 <vfprintf+0x3a>
 856:	ba c1       	rjmp	.+884    	; 0xbcc <vfprintf+0x3ae>
 858:	85 32       	cpi	r24, 0x25	; 37
 85a:	39 f4       	brne	.+14     	; 0x86a <vfprintf+0x4c>
 85c:	93 fd       	sbrc	r25, 3
 85e:	85 91       	lpm	r24, Z+
 860:	93 ff       	sbrs	r25, 3
 862:	81 91       	ld	r24, Z+
 864:	7f 01       	movw	r14, r30
 866:	85 32       	cpi	r24, 0x25	; 37
 868:	29 f4       	brne	.+10     	; 0x874 <vfprintf+0x56>
 86a:	b6 01       	movw	r22, r12
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 872:	e7 cf       	rjmp	.-50     	; 0x842 <vfprintf+0x24>
 874:	91 2c       	mov	r9, r1
 876:	21 2c       	mov	r2, r1
 878:	31 2c       	mov	r3, r1
 87a:	ff e1       	ldi	r31, 0x1F	; 31
 87c:	f3 15       	cp	r31, r3
 87e:	d8 f0       	brcs	.+54     	; 0x8b6 <vfprintf+0x98>
 880:	8b 32       	cpi	r24, 0x2B	; 43
 882:	79 f0       	breq	.+30     	; 0x8a2 <vfprintf+0x84>
 884:	38 f4       	brcc	.+14     	; 0x894 <vfprintf+0x76>
 886:	80 32       	cpi	r24, 0x20	; 32
 888:	79 f0       	breq	.+30     	; 0x8a8 <vfprintf+0x8a>
 88a:	83 32       	cpi	r24, 0x23	; 35
 88c:	a1 f4       	brne	.+40     	; 0x8b6 <vfprintf+0x98>
 88e:	23 2d       	mov	r18, r3
 890:	20 61       	ori	r18, 0x10	; 16
 892:	1d c0       	rjmp	.+58     	; 0x8ce <vfprintf+0xb0>
 894:	8d 32       	cpi	r24, 0x2D	; 45
 896:	61 f0       	breq	.+24     	; 0x8b0 <vfprintf+0x92>
 898:	80 33       	cpi	r24, 0x30	; 48
 89a:	69 f4       	brne	.+26     	; 0x8b6 <vfprintf+0x98>
 89c:	23 2d       	mov	r18, r3
 89e:	21 60       	ori	r18, 0x01	; 1
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <vfprintf+0xb0>
 8a2:	83 2d       	mov	r24, r3
 8a4:	82 60       	ori	r24, 0x02	; 2
 8a6:	38 2e       	mov	r3, r24
 8a8:	e3 2d       	mov	r30, r3
 8aa:	e4 60       	ori	r30, 0x04	; 4
 8ac:	3e 2e       	mov	r3, r30
 8ae:	2a c0       	rjmp	.+84     	; 0x904 <vfprintf+0xe6>
 8b0:	f3 2d       	mov	r31, r3
 8b2:	f8 60       	ori	r31, 0x08	; 8
 8b4:	1d c0       	rjmp	.+58     	; 0x8f0 <vfprintf+0xd2>
 8b6:	37 fc       	sbrc	r3, 7
 8b8:	2d c0       	rjmp	.+90     	; 0x914 <vfprintf+0xf6>
 8ba:	20 ed       	ldi	r18, 0xD0	; 208
 8bc:	28 0f       	add	r18, r24
 8be:	2a 30       	cpi	r18, 0x0A	; 10
 8c0:	40 f0       	brcs	.+16     	; 0x8d2 <vfprintf+0xb4>
 8c2:	8e 32       	cpi	r24, 0x2E	; 46
 8c4:	b9 f4       	brne	.+46     	; 0x8f4 <vfprintf+0xd6>
 8c6:	36 fc       	sbrc	r3, 6
 8c8:	81 c1       	rjmp	.+770    	; 0xbcc <vfprintf+0x3ae>
 8ca:	23 2d       	mov	r18, r3
 8cc:	20 64       	ori	r18, 0x40	; 64
 8ce:	32 2e       	mov	r3, r18
 8d0:	19 c0       	rjmp	.+50     	; 0x904 <vfprintf+0xe6>
 8d2:	36 fe       	sbrs	r3, 6
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0xc4>
 8d6:	8a e0       	ldi	r24, 0x0A	; 10
 8d8:	98 9e       	mul	r9, r24
 8da:	20 0d       	add	r18, r0
 8dc:	11 24       	eor	r1, r1
 8de:	92 2e       	mov	r9, r18
 8e0:	11 c0       	rjmp	.+34     	; 0x904 <vfprintf+0xe6>
 8e2:	ea e0       	ldi	r30, 0x0A	; 10
 8e4:	2e 9e       	mul	r2, r30
 8e6:	20 0d       	add	r18, r0
 8e8:	11 24       	eor	r1, r1
 8ea:	22 2e       	mov	r2, r18
 8ec:	f3 2d       	mov	r31, r3
 8ee:	f0 62       	ori	r31, 0x20	; 32
 8f0:	3f 2e       	mov	r3, r31
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <vfprintf+0xe6>
 8f4:	8c 36       	cpi	r24, 0x6C	; 108
 8f6:	21 f4       	brne	.+8      	; 0x900 <vfprintf+0xe2>
 8f8:	83 2d       	mov	r24, r3
 8fa:	80 68       	ori	r24, 0x80	; 128
 8fc:	38 2e       	mov	r3, r24
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <vfprintf+0xe6>
 900:	88 36       	cpi	r24, 0x68	; 104
 902:	41 f4       	brne	.+16     	; 0x914 <vfprintf+0xf6>
 904:	f7 01       	movw	r30, r14
 906:	93 fd       	sbrc	r25, 3
 908:	85 91       	lpm	r24, Z+
 90a:	93 ff       	sbrs	r25, 3
 90c:	81 91       	ld	r24, Z+
 90e:	7f 01       	movw	r14, r30
 910:	81 11       	cpse	r24, r1
 912:	b3 cf       	rjmp	.-154    	; 0x87a <vfprintf+0x5c>
 914:	98 2f       	mov	r25, r24
 916:	9f 7d       	andi	r25, 0xDF	; 223
 918:	95 54       	subi	r25, 0x45	; 69
 91a:	93 30       	cpi	r25, 0x03	; 3
 91c:	28 f4       	brcc	.+10     	; 0x928 <vfprintf+0x10a>
 91e:	0c 5f       	subi	r16, 0xFC	; 252
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	9f e3       	ldi	r25, 0x3F	; 63
 924:	99 83       	std	Y+1, r25	; 0x01
 926:	0d c0       	rjmp	.+26     	; 0x942 <vfprintf+0x124>
 928:	83 36       	cpi	r24, 0x63	; 99
 92a:	31 f0       	breq	.+12     	; 0x938 <vfprintf+0x11a>
 92c:	83 37       	cpi	r24, 0x73	; 115
 92e:	71 f0       	breq	.+28     	; 0x94c <vfprintf+0x12e>
 930:	83 35       	cpi	r24, 0x53	; 83
 932:	09 f0       	breq	.+2      	; 0x936 <vfprintf+0x118>
 934:	59 c0       	rjmp	.+178    	; 0x9e8 <vfprintf+0x1ca>
 936:	21 c0       	rjmp	.+66     	; 0x97a <vfprintf+0x15c>
 938:	f8 01       	movw	r30, r16
 93a:	80 81       	ld	r24, Z
 93c:	89 83       	std	Y+1, r24	; 0x01
 93e:	0e 5f       	subi	r16, 0xFE	; 254
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	88 24       	eor	r8, r8
 944:	83 94       	inc	r8
 946:	91 2c       	mov	r9, r1
 948:	53 01       	movw	r10, r6
 94a:	13 c0       	rjmp	.+38     	; 0x972 <vfprintf+0x154>
 94c:	28 01       	movw	r4, r16
 94e:	f2 e0       	ldi	r31, 0x02	; 2
 950:	4f 0e       	add	r4, r31
 952:	51 1c       	adc	r5, r1
 954:	f8 01       	movw	r30, r16
 956:	a0 80       	ld	r10, Z
 958:	b1 80       	ldd	r11, Z+1	; 0x01
 95a:	36 fe       	sbrs	r3, 6
 95c:	03 c0       	rjmp	.+6      	; 0x964 <vfprintf+0x146>
 95e:	69 2d       	mov	r22, r9
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <vfprintf+0x14a>
 964:	6f ef       	ldi	r22, 0xFF	; 255
 966:	7f ef       	ldi	r23, 0xFF	; 255
 968:	c5 01       	movw	r24, r10
 96a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <strnlen>
 96e:	4c 01       	movw	r8, r24
 970:	82 01       	movw	r16, r4
 972:	f3 2d       	mov	r31, r3
 974:	ff 77       	andi	r31, 0x7F	; 127
 976:	3f 2e       	mov	r3, r31
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <vfprintf+0x188>
 97a:	28 01       	movw	r4, r16
 97c:	22 e0       	ldi	r18, 0x02	; 2
 97e:	42 0e       	add	r4, r18
 980:	51 1c       	adc	r5, r1
 982:	f8 01       	movw	r30, r16
 984:	a0 80       	ld	r10, Z
 986:	b1 80       	ldd	r11, Z+1	; 0x01
 988:	36 fe       	sbrs	r3, 6
 98a:	03 c0       	rjmp	.+6      	; 0x992 <vfprintf+0x174>
 98c:	69 2d       	mov	r22, r9
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	02 c0       	rjmp	.+4      	; 0x996 <vfprintf+0x178>
 992:	6f ef       	ldi	r22, 0xFF	; 255
 994:	7f ef       	ldi	r23, 0xFF	; 255
 996:	c5 01       	movw	r24, r10
 998:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <strnlen_P>
 99c:	4c 01       	movw	r8, r24
 99e:	f3 2d       	mov	r31, r3
 9a0:	f0 68       	ori	r31, 0x80	; 128
 9a2:	3f 2e       	mov	r3, r31
 9a4:	82 01       	movw	r16, r4
 9a6:	33 fc       	sbrc	r3, 3
 9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <vfprintf+0x1c2>
 9aa:	82 2d       	mov	r24, r2
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	88 16       	cp	r8, r24
 9b0:	99 06       	cpc	r9, r25
 9b2:	b0 f4       	brcc	.+44     	; 0x9e0 <vfprintf+0x1c2>
 9b4:	b6 01       	movw	r22, r12
 9b6:	80 e2       	ldi	r24, 0x20	; 32
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 9be:	2a 94       	dec	r2
 9c0:	f4 cf       	rjmp	.-24     	; 0x9aa <vfprintf+0x18c>
 9c2:	f5 01       	movw	r30, r10
 9c4:	37 fc       	sbrc	r3, 7
 9c6:	85 91       	lpm	r24, Z+
 9c8:	37 fe       	sbrs	r3, 7
 9ca:	81 91       	ld	r24, Z+
 9cc:	5f 01       	movw	r10, r30
 9ce:	b6 01       	movw	r22, r12
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 9d6:	21 10       	cpse	r2, r1
 9d8:	2a 94       	dec	r2
 9da:	21 e0       	ldi	r18, 0x01	; 1
 9dc:	82 1a       	sub	r8, r18
 9de:	91 08       	sbc	r9, r1
 9e0:	81 14       	cp	r8, r1
 9e2:	91 04       	cpc	r9, r1
 9e4:	71 f7       	brne	.-36     	; 0x9c2 <vfprintf+0x1a4>
 9e6:	e8 c0       	rjmp	.+464    	; 0xbb8 <vfprintf+0x39a>
 9e8:	84 36       	cpi	r24, 0x64	; 100
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <vfprintf+0x1d2>
 9ec:	89 36       	cpi	r24, 0x69	; 105
 9ee:	41 f5       	brne	.+80     	; 0xa40 <vfprintf+0x222>
 9f0:	f8 01       	movw	r30, r16
 9f2:	37 fe       	sbrs	r3, 7
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <vfprintf+0x1e6>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <vfprintf+0x1f6>
 a04:	60 81       	ld	r22, Z
 a06:	71 81       	ldd	r23, Z+1	; 0x01
 a08:	07 2e       	mov	r0, r23
 a0a:	00 0c       	add	r0, r0
 a0c:	88 0b       	sbc	r24, r24
 a0e:	99 0b       	sbc	r25, r25
 a10:	0e 5f       	subi	r16, 0xFE	; 254
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	f3 2d       	mov	r31, r3
 a16:	ff 76       	andi	r31, 0x6F	; 111
 a18:	3f 2e       	mov	r3, r31
 a1a:	97 ff       	sbrs	r25, 7
 a1c:	09 c0       	rjmp	.+18     	; 0xa30 <vfprintf+0x212>
 a1e:	90 95       	com	r25
 a20:	80 95       	com	r24
 a22:	70 95       	com	r23
 a24:	61 95       	neg	r22
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	f0 68       	ori	r31, 0x80	; 128
 a2e:	3f 2e       	mov	r3, r31
 a30:	2a e0       	ldi	r18, 0x0A	; 10
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	a3 01       	movw	r20, r6
 a36:	0e 94 42 06 	call	0xc84	; 0xc84 <__ultoa_invert>
 a3a:	88 2e       	mov	r8, r24
 a3c:	86 18       	sub	r8, r6
 a3e:	45 c0       	rjmp	.+138    	; 0xaca <vfprintf+0x2ac>
 a40:	85 37       	cpi	r24, 0x75	; 117
 a42:	31 f4       	brne	.+12     	; 0xa50 <vfprintf+0x232>
 a44:	23 2d       	mov	r18, r3
 a46:	2f 7e       	andi	r18, 0xEF	; 239
 a48:	b2 2e       	mov	r11, r18
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	25 c0       	rjmp	.+74     	; 0xa9a <vfprintf+0x27c>
 a50:	93 2d       	mov	r25, r3
 a52:	99 7f       	andi	r25, 0xF9	; 249
 a54:	b9 2e       	mov	r11, r25
 a56:	8f 36       	cpi	r24, 0x6F	; 111
 a58:	c1 f0       	breq	.+48     	; 0xa8a <vfprintf+0x26c>
 a5a:	18 f4       	brcc	.+6      	; 0xa62 <vfprintf+0x244>
 a5c:	88 35       	cpi	r24, 0x58	; 88
 a5e:	79 f0       	breq	.+30     	; 0xa7e <vfprintf+0x260>
 a60:	b5 c0       	rjmp	.+362    	; 0xbcc <vfprintf+0x3ae>
 a62:	80 37       	cpi	r24, 0x70	; 112
 a64:	19 f0       	breq	.+6      	; 0xa6c <vfprintf+0x24e>
 a66:	88 37       	cpi	r24, 0x78	; 120
 a68:	21 f0       	breq	.+8      	; 0xa72 <vfprintf+0x254>
 a6a:	b0 c0       	rjmp	.+352    	; 0xbcc <vfprintf+0x3ae>
 a6c:	e9 2f       	mov	r30, r25
 a6e:	e0 61       	ori	r30, 0x10	; 16
 a70:	be 2e       	mov	r11, r30
 a72:	b4 fe       	sbrs	r11, 4
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <vfprintf+0x272>
 a76:	fb 2d       	mov	r31, r11
 a78:	f4 60       	ori	r31, 0x04	; 4
 a7a:	bf 2e       	mov	r11, r31
 a7c:	09 c0       	rjmp	.+18     	; 0xa90 <vfprintf+0x272>
 a7e:	34 fe       	sbrs	r3, 4
 a80:	0a c0       	rjmp	.+20     	; 0xa96 <vfprintf+0x278>
 a82:	29 2f       	mov	r18, r25
 a84:	26 60       	ori	r18, 0x06	; 6
 a86:	b2 2e       	mov	r11, r18
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <vfprintf+0x278>
 a8a:	28 e0       	ldi	r18, 0x08	; 8
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	05 c0       	rjmp	.+10     	; 0xa9a <vfprintf+0x27c>
 a90:	20 e1       	ldi	r18, 0x10	; 16
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <vfprintf+0x27c>
 a96:	20 e1       	ldi	r18, 0x10	; 16
 a98:	32 e0       	ldi	r19, 0x02	; 2
 a9a:	f8 01       	movw	r30, r16
 a9c:	b7 fe       	sbrs	r11, 7
 a9e:	07 c0       	rjmp	.+14     	; 0xaae <vfprintf+0x290>
 aa0:	60 81       	ld	r22, Z
 aa2:	71 81       	ldd	r23, Z+1	; 0x01
 aa4:	82 81       	ldd	r24, Z+2	; 0x02
 aa6:	93 81       	ldd	r25, Z+3	; 0x03
 aa8:	0c 5f       	subi	r16, 0xFC	; 252
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	06 c0       	rjmp	.+12     	; 0xaba <vfprintf+0x29c>
 aae:	60 81       	ld	r22, Z
 ab0:	71 81       	ldd	r23, Z+1	; 0x01
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 5f       	subi	r16, 0xFE	; 254
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	a3 01       	movw	r20, r6
 abc:	0e 94 42 06 	call	0xc84	; 0xc84 <__ultoa_invert>
 ac0:	88 2e       	mov	r8, r24
 ac2:	86 18       	sub	r8, r6
 ac4:	fb 2d       	mov	r31, r11
 ac6:	ff 77       	andi	r31, 0x7F	; 127
 ac8:	3f 2e       	mov	r3, r31
 aca:	36 fe       	sbrs	r3, 6
 acc:	0d c0       	rjmp	.+26     	; 0xae8 <vfprintf+0x2ca>
 ace:	23 2d       	mov	r18, r3
 ad0:	2e 7f       	andi	r18, 0xFE	; 254
 ad2:	a2 2e       	mov	r10, r18
 ad4:	89 14       	cp	r8, r9
 ad6:	58 f4       	brcc	.+22     	; 0xaee <vfprintf+0x2d0>
 ad8:	34 fe       	sbrs	r3, 4
 ada:	0b c0       	rjmp	.+22     	; 0xaf2 <vfprintf+0x2d4>
 adc:	32 fc       	sbrc	r3, 2
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <vfprintf+0x2d4>
 ae0:	83 2d       	mov	r24, r3
 ae2:	8e 7e       	andi	r24, 0xEE	; 238
 ae4:	a8 2e       	mov	r10, r24
 ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <vfprintf+0x2d4>
 ae8:	b8 2c       	mov	r11, r8
 aea:	a3 2c       	mov	r10, r3
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x2d6>
 aee:	b8 2c       	mov	r11, r8
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <vfprintf+0x2d6>
 af2:	b9 2c       	mov	r11, r9
 af4:	a4 fe       	sbrs	r10, 4
 af6:	0f c0       	rjmp	.+30     	; 0xb16 <vfprintf+0x2f8>
 af8:	fe 01       	movw	r30, r28
 afa:	e8 0d       	add	r30, r8
 afc:	f1 1d       	adc	r31, r1
 afe:	80 81       	ld	r24, Z
 b00:	80 33       	cpi	r24, 0x30	; 48
 b02:	21 f4       	brne	.+8      	; 0xb0c <vfprintf+0x2ee>
 b04:	9a 2d       	mov	r25, r10
 b06:	99 7e       	andi	r25, 0xE9	; 233
 b08:	a9 2e       	mov	r10, r25
 b0a:	09 c0       	rjmp	.+18     	; 0xb1e <vfprintf+0x300>
 b0c:	a2 fe       	sbrs	r10, 2
 b0e:	06 c0       	rjmp	.+12     	; 0xb1c <vfprintf+0x2fe>
 b10:	b3 94       	inc	r11
 b12:	b3 94       	inc	r11
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <vfprintf+0x300>
 b16:	8a 2d       	mov	r24, r10
 b18:	86 78       	andi	r24, 0x86	; 134
 b1a:	09 f0       	breq	.+2      	; 0xb1e <vfprintf+0x300>
 b1c:	b3 94       	inc	r11
 b1e:	a3 fc       	sbrc	r10, 3
 b20:	11 c0       	rjmp	.+34     	; 0xb44 <vfprintf+0x326>
 b22:	a0 fe       	sbrs	r10, 0
 b24:	06 c0       	rjmp	.+12     	; 0xb32 <vfprintf+0x314>
 b26:	b2 14       	cp	r11, r2
 b28:	88 f4       	brcc	.+34     	; 0xb4c <vfprintf+0x32e>
 b2a:	28 0c       	add	r2, r8
 b2c:	92 2c       	mov	r9, r2
 b2e:	9b 18       	sub	r9, r11
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <vfprintf+0x330>
 b32:	b2 14       	cp	r11, r2
 b34:	60 f4       	brcc	.+24     	; 0xb4e <vfprintf+0x330>
 b36:	b6 01       	movw	r22, r12
 b38:	80 e2       	ldi	r24, 0x20	; 32
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 b40:	b3 94       	inc	r11
 b42:	f7 cf       	rjmp	.-18     	; 0xb32 <vfprintf+0x314>
 b44:	b2 14       	cp	r11, r2
 b46:	18 f4       	brcc	.+6      	; 0xb4e <vfprintf+0x330>
 b48:	2b 18       	sub	r2, r11
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x332>
 b4c:	98 2c       	mov	r9, r8
 b4e:	21 2c       	mov	r2, r1
 b50:	a4 fe       	sbrs	r10, 4
 b52:	10 c0       	rjmp	.+32     	; 0xb74 <vfprintf+0x356>
 b54:	b6 01       	movw	r22, r12
 b56:	80 e3       	ldi	r24, 0x30	; 48
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 b5e:	a2 fe       	sbrs	r10, 2
 b60:	17 c0       	rjmp	.+46     	; 0xb90 <vfprintf+0x372>
 b62:	a1 fc       	sbrc	r10, 1
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <vfprintf+0x34e>
 b66:	88 e7       	ldi	r24, 0x78	; 120
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x352>
 b6c:	88 e5       	ldi	r24, 0x58	; 88
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	b6 01       	movw	r22, r12
 b72:	0c c0       	rjmp	.+24     	; 0xb8c <vfprintf+0x36e>
 b74:	8a 2d       	mov	r24, r10
 b76:	86 78       	andi	r24, 0x86	; 134
 b78:	59 f0       	breq	.+22     	; 0xb90 <vfprintf+0x372>
 b7a:	a1 fe       	sbrs	r10, 1
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x364>
 b7e:	8b e2       	ldi	r24, 0x2B	; 43
 b80:	01 c0       	rjmp	.+2      	; 0xb84 <vfprintf+0x366>
 b82:	80 e2       	ldi	r24, 0x20	; 32
 b84:	a7 fc       	sbrc	r10, 7
 b86:	8d e2       	ldi	r24, 0x2D	; 45
 b88:	b6 01       	movw	r22, r12
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 b90:	89 14       	cp	r8, r9
 b92:	38 f4       	brcc	.+14     	; 0xba2 <vfprintf+0x384>
 b94:	b6 01       	movw	r22, r12
 b96:	80 e3       	ldi	r24, 0x30	; 48
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 b9e:	9a 94       	dec	r9
 ba0:	f7 cf       	rjmp	.-18     	; 0xb90 <vfprintf+0x372>
 ba2:	8a 94       	dec	r8
 ba4:	f3 01       	movw	r30, r6
 ba6:	e8 0d       	add	r30, r8
 ba8:	f1 1d       	adc	r31, r1
 baa:	80 81       	ld	r24, Z
 bac:	b6 01       	movw	r22, r12
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 bb4:	81 10       	cpse	r8, r1
 bb6:	f5 cf       	rjmp	.-22     	; 0xba2 <vfprintf+0x384>
 bb8:	22 20       	and	r2, r2
 bba:	09 f4       	brne	.+2      	; 0xbbe <vfprintf+0x3a0>
 bbc:	42 ce       	rjmp	.-892    	; 0x842 <vfprintf+0x24>
 bbe:	b6 01       	movw	r22, r12
 bc0:	80 e2       	ldi	r24, 0x20	; 32
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 94 06 06 	call	0xc0c	; 0xc0c <fputc>
 bc8:	2a 94       	dec	r2
 bca:	f6 cf       	rjmp	.-20     	; 0xbb8 <vfprintf+0x39a>
 bcc:	f6 01       	movw	r30, r12
 bce:	86 81       	ldd	r24, Z+6	; 0x06
 bd0:	97 81       	ldd	r25, Z+7	; 0x07
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x3ba>
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	2b 96       	adiw	r28, 0x0b	; 11
 bda:	e2 e1       	ldi	r30, 0x12	; 18
 bdc:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__epilogue_restores__>

00000be0 <strnlen_P>:
 be0:	fc 01       	movw	r30, r24
 be2:	05 90       	lpm	r0, Z+
 be4:	61 50       	subi	r22, 0x01	; 1
 be6:	70 40       	sbci	r23, 0x00	; 0
 be8:	01 10       	cpse	r0, r1
 bea:	d8 f7       	brcc	.-10     	; 0xbe2 <strnlen_P+0x2>
 bec:	80 95       	com	r24
 bee:	90 95       	com	r25
 bf0:	8e 0f       	add	r24, r30
 bf2:	9f 1f       	adc	r25, r31
 bf4:	08 95       	ret

00000bf6 <strnlen>:
 bf6:	fc 01       	movw	r30, r24
 bf8:	61 50       	subi	r22, 0x01	; 1
 bfa:	70 40       	sbci	r23, 0x00	; 0
 bfc:	01 90       	ld	r0, Z+
 bfe:	01 10       	cpse	r0, r1
 c00:	d8 f7       	brcc	.-10     	; 0xbf8 <strnlen+0x2>
 c02:	80 95       	com	r24
 c04:	90 95       	com	r25
 c06:	8e 0f       	add	r24, r30
 c08:	9f 1f       	adc	r25, r31
 c0a:	08 95       	ret

00000c0c <fputc>:
 c0c:	0f 93       	push	r16
 c0e:	1f 93       	push	r17
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	fb 01       	movw	r30, r22
 c16:	23 81       	ldd	r18, Z+3	; 0x03
 c18:	21 fd       	sbrc	r18, 1
 c1a:	03 c0       	rjmp	.+6      	; 0xc22 <fputc+0x16>
 c1c:	8f ef       	ldi	r24, 0xFF	; 255
 c1e:	9f ef       	ldi	r25, 0xFF	; 255
 c20:	2c c0       	rjmp	.+88     	; 0xc7a <fputc+0x6e>
 c22:	22 ff       	sbrs	r18, 2
 c24:	16 c0       	rjmp	.+44     	; 0xc52 <fputc+0x46>
 c26:	46 81       	ldd	r20, Z+6	; 0x06
 c28:	57 81       	ldd	r21, Z+7	; 0x07
 c2a:	24 81       	ldd	r18, Z+4	; 0x04
 c2c:	35 81       	ldd	r19, Z+5	; 0x05
 c2e:	42 17       	cp	r20, r18
 c30:	53 07       	cpc	r21, r19
 c32:	44 f4       	brge	.+16     	; 0xc44 <fputc+0x38>
 c34:	a0 81       	ld	r26, Z
 c36:	b1 81       	ldd	r27, Z+1	; 0x01
 c38:	9d 01       	movw	r18, r26
 c3a:	2f 5f       	subi	r18, 0xFF	; 255
 c3c:	3f 4f       	sbci	r19, 0xFF	; 255
 c3e:	31 83       	std	Z+1, r19	; 0x01
 c40:	20 83       	st	Z, r18
 c42:	8c 93       	st	X, r24
 c44:	26 81       	ldd	r18, Z+6	; 0x06
 c46:	37 81       	ldd	r19, Z+7	; 0x07
 c48:	2f 5f       	subi	r18, 0xFF	; 255
 c4a:	3f 4f       	sbci	r19, 0xFF	; 255
 c4c:	37 83       	std	Z+7, r19	; 0x07
 c4e:	26 83       	std	Z+6, r18	; 0x06
 c50:	14 c0       	rjmp	.+40     	; 0xc7a <fputc+0x6e>
 c52:	8b 01       	movw	r16, r22
 c54:	ec 01       	movw	r28, r24
 c56:	fb 01       	movw	r30, r22
 c58:	00 84       	ldd	r0, Z+8	; 0x08
 c5a:	f1 85       	ldd	r31, Z+9	; 0x09
 c5c:	e0 2d       	mov	r30, r0
 c5e:	09 95       	icall
 c60:	89 2b       	or	r24, r25
 c62:	e1 f6       	brne	.-72     	; 0xc1c <fputc+0x10>
 c64:	d8 01       	movw	r26, r16
 c66:	16 96       	adiw	r26, 0x06	; 6
 c68:	8d 91       	ld	r24, X+
 c6a:	9c 91       	ld	r25, X
 c6c:	17 97       	sbiw	r26, 0x07	; 7
 c6e:	01 96       	adiw	r24, 0x01	; 1
 c70:	17 96       	adiw	r26, 0x07	; 7
 c72:	9c 93       	st	X, r25
 c74:	8e 93       	st	-X, r24
 c76:	16 97       	sbiw	r26, 0x06	; 6
 c78:	ce 01       	movw	r24, r28
 c7a:	df 91       	pop	r29
 c7c:	cf 91       	pop	r28
 c7e:	1f 91       	pop	r17
 c80:	0f 91       	pop	r16
 c82:	08 95       	ret

00000c84 <__ultoa_invert>:
 c84:	fa 01       	movw	r30, r20
 c86:	aa 27       	eor	r26, r26
 c88:	28 30       	cpi	r18, 0x08	; 8
 c8a:	51 f1       	breq	.+84     	; 0xce0 <__ultoa_invert+0x5c>
 c8c:	20 31       	cpi	r18, 0x10	; 16
 c8e:	81 f1       	breq	.+96     	; 0xcf0 <__ultoa_invert+0x6c>
 c90:	e8 94       	clt
 c92:	6f 93       	push	r22
 c94:	6e 7f       	andi	r22, 0xFE	; 254
 c96:	6e 5f       	subi	r22, 0xFE	; 254
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	af 4f       	sbci	r26, 0xFF	; 255
 ca0:	b1 e0       	ldi	r27, 0x01	; 1
 ca2:	3e d0       	rcall	.+124    	; 0xd20 <__ultoa_invert+0x9c>
 ca4:	b4 e0       	ldi	r27, 0x04	; 4
 ca6:	3c d0       	rcall	.+120    	; 0xd20 <__ultoa_invert+0x9c>
 ca8:	67 0f       	add	r22, r23
 caa:	78 1f       	adc	r23, r24
 cac:	89 1f       	adc	r24, r25
 cae:	9a 1f       	adc	r25, r26
 cb0:	a1 1d       	adc	r26, r1
 cb2:	68 0f       	add	r22, r24
 cb4:	79 1f       	adc	r23, r25
 cb6:	8a 1f       	adc	r24, r26
 cb8:	91 1d       	adc	r25, r1
 cba:	a1 1d       	adc	r26, r1
 cbc:	6a 0f       	add	r22, r26
 cbe:	71 1d       	adc	r23, r1
 cc0:	81 1d       	adc	r24, r1
 cc2:	91 1d       	adc	r25, r1
 cc4:	a1 1d       	adc	r26, r1
 cc6:	20 d0       	rcall	.+64     	; 0xd08 <__ultoa_invert+0x84>
 cc8:	09 f4       	brne	.+2      	; 0xccc <__ultoa_invert+0x48>
 cca:	68 94       	set
 ccc:	3f 91       	pop	r19
 cce:	2a e0       	ldi	r18, 0x0A	; 10
 cd0:	26 9f       	mul	r18, r22
 cd2:	11 24       	eor	r1, r1
 cd4:	30 19       	sub	r19, r0
 cd6:	30 5d       	subi	r19, 0xD0	; 208
 cd8:	31 93       	st	Z+, r19
 cda:	de f6       	brtc	.-74     	; 0xc92 <__ultoa_invert+0xe>
 cdc:	cf 01       	movw	r24, r30
 cde:	08 95       	ret
 ce0:	46 2f       	mov	r20, r22
 ce2:	47 70       	andi	r20, 0x07	; 7
 ce4:	40 5d       	subi	r20, 0xD0	; 208
 ce6:	41 93       	st	Z+, r20
 ce8:	b3 e0       	ldi	r27, 0x03	; 3
 cea:	0f d0       	rcall	.+30     	; 0xd0a <__ultoa_invert+0x86>
 cec:	c9 f7       	brne	.-14     	; 0xce0 <__ultoa_invert+0x5c>
 cee:	f6 cf       	rjmp	.-20     	; 0xcdc <__ultoa_invert+0x58>
 cf0:	46 2f       	mov	r20, r22
 cf2:	4f 70       	andi	r20, 0x0F	; 15
 cf4:	40 5d       	subi	r20, 0xD0	; 208
 cf6:	4a 33       	cpi	r20, 0x3A	; 58
 cf8:	18 f0       	brcs	.+6      	; 0xd00 <__ultoa_invert+0x7c>
 cfa:	49 5d       	subi	r20, 0xD9	; 217
 cfc:	31 fd       	sbrc	r19, 1
 cfe:	40 52       	subi	r20, 0x20	; 32
 d00:	41 93       	st	Z+, r20
 d02:	02 d0       	rcall	.+4      	; 0xd08 <__ultoa_invert+0x84>
 d04:	a9 f7       	brne	.-22     	; 0xcf0 <__ultoa_invert+0x6c>
 d06:	ea cf       	rjmp	.-44     	; 0xcdc <__ultoa_invert+0x58>
 d08:	b4 e0       	ldi	r27, 0x04	; 4
 d0a:	a6 95       	lsr	r26
 d0c:	97 95       	ror	r25
 d0e:	87 95       	ror	r24
 d10:	77 95       	ror	r23
 d12:	67 95       	ror	r22
 d14:	ba 95       	dec	r27
 d16:	c9 f7       	brne	.-14     	; 0xd0a <__ultoa_invert+0x86>
 d18:	00 97       	sbiw	r24, 0x00	; 0
 d1a:	61 05       	cpc	r22, r1
 d1c:	71 05       	cpc	r23, r1
 d1e:	08 95       	ret
 d20:	9b 01       	movw	r18, r22
 d22:	ac 01       	movw	r20, r24
 d24:	0a 2e       	mov	r0, r26
 d26:	06 94       	lsr	r0
 d28:	57 95       	ror	r21
 d2a:	47 95       	ror	r20
 d2c:	37 95       	ror	r19
 d2e:	27 95       	ror	r18
 d30:	ba 95       	dec	r27
 d32:	c9 f7       	brne	.-14     	; 0xd26 <__ultoa_invert+0xa2>
 d34:	62 0f       	add	r22, r18
 d36:	73 1f       	adc	r23, r19
 d38:	84 1f       	adc	r24, r20
 d3a:	95 1f       	adc	r25, r21
 d3c:	a0 1d       	adc	r26, r0
 d3e:	08 95       	ret

00000d40 <__prologue_saves__>:
 d40:	2f 92       	push	r2
 d42:	3f 92       	push	r3
 d44:	4f 92       	push	r4
 d46:	5f 92       	push	r5
 d48:	6f 92       	push	r6
 d4a:	7f 92       	push	r7
 d4c:	8f 92       	push	r8
 d4e:	9f 92       	push	r9
 d50:	af 92       	push	r10
 d52:	bf 92       	push	r11
 d54:	cf 92       	push	r12
 d56:	df 92       	push	r13
 d58:	ef 92       	push	r14
 d5a:	ff 92       	push	r15
 d5c:	0f 93       	push	r16
 d5e:	1f 93       	push	r17
 d60:	cf 93       	push	r28
 d62:	df 93       	push	r29
 d64:	cd b7       	in	r28, 0x3d	; 61
 d66:	de b7       	in	r29, 0x3e	; 62
 d68:	ca 1b       	sub	r28, r26
 d6a:	db 0b       	sbc	r29, r27
 d6c:	0f b6       	in	r0, 0x3f	; 63
 d6e:	f8 94       	cli
 d70:	de bf       	out	0x3e, r29	; 62
 d72:	0f be       	out	0x3f, r0	; 63
 d74:	cd bf       	out	0x3d, r28	; 61
 d76:	09 94       	ijmp

00000d78 <__epilogue_restores__>:
 d78:	2a 88       	ldd	r2, Y+18	; 0x12
 d7a:	39 88       	ldd	r3, Y+17	; 0x11
 d7c:	48 88       	ldd	r4, Y+16	; 0x10
 d7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d80:	6e 84       	ldd	r6, Y+14	; 0x0e
 d82:	7d 84       	ldd	r7, Y+13	; 0x0d
 d84:	8c 84       	ldd	r8, Y+12	; 0x0c
 d86:	9b 84       	ldd	r9, Y+11	; 0x0b
 d88:	aa 84       	ldd	r10, Y+10	; 0x0a
 d8a:	b9 84       	ldd	r11, Y+9	; 0x09
 d8c:	c8 84       	ldd	r12, Y+8	; 0x08
 d8e:	df 80       	ldd	r13, Y+7	; 0x07
 d90:	ee 80       	ldd	r14, Y+6	; 0x06
 d92:	fd 80       	ldd	r15, Y+5	; 0x05
 d94:	0c 81       	ldd	r16, Y+4	; 0x04
 d96:	1b 81       	ldd	r17, Y+3	; 0x03
 d98:	aa 81       	ldd	r26, Y+2	; 0x02
 d9a:	b9 81       	ldd	r27, Y+1	; 0x01
 d9c:	ce 0f       	add	r28, r30
 d9e:	d1 1d       	adc	r29, r1
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	f8 94       	cli
 da4:	de bf       	out	0x3e, r29	; 62
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	ed 01       	movw	r28, r26
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
