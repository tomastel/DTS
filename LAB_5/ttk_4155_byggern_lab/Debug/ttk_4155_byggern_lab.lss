
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b6  00800100  000010ce  00001162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008004b6  008004b6  00001518  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cec  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a1  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167a  00000000  00000000  000059f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  00007070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d7  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f74  00000000  00000000  0000805b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00008fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_2>
       c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_3>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	14 e0       	ldi	r17, 0x04	; 4
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	ee ec       	ldi	r30, 0xCE	; 206
     260:	f0 e1       	ldi	r31, 0x10	; 16
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a6 3b       	cpi	r26, 0xB6	; 182
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	24 e0       	ldi	r18, 0x04	; 4
     270:	a6 eb       	ldi	r26, 0xB6	; 182
     272:	b4 e0       	ldi	r27, 0x04	; 4
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a3 3c       	cpi	r26, 0xC3	; 195
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 30 02 	call	0x460	; 0x460 <main>
     282:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
     28a:	81 b3       	in	r24, 0x11	; 17
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
     290:	8e b5       	in	r24, 0x2e	; 46
     292:	80 61       	ori	r24, 0x10	; 16
     294:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
     296:	8e b5       	in	r24, 0x2e	; 46
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
     29c:	8f b5       	in	r24, 0x2f	; 47
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
     2a2:	8f b5       	in	r24, 0x2f	; 47
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
     2a8:	8f b5       	in	r24, 0x2f	; 47
     2aa:	8f 77       	andi	r24, 0x7F	; 127
     2ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
     2ae:	8f b5       	in	r24, 0x2f	; 47
     2b0:	80 64       	ori	r24, 0x40	; 64
     2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
     2b4:	8f b5       	in	r24, 0x2f	; 47
     2b6:	8f 7d       	andi	r24, 0xDF	; 223
     2b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
     2ba:	8f b5       	in	r24, 0x2f	; 47
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
     2c0:	8e b5       	in	r24, 0x2e	; 46
     2c2:	8b 7f       	andi	r24, 0xFB	; 251
     2c4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
     2c6:	8e b5       	in	r24, 0x2e	; 46
     2c8:	8d 7f       	andi	r24, 0xFD	; 253
     2ca:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
     2cc:	8e b5       	in	r24, 0x2e	; 46
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
     2d2:	8f b5       	in	r24, 0x2f	; 47
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
     2d8:	8f b5       	in	r24, 0x2f	; 47
     2da:	8b 7f       	andi	r24, 0xFB	; 251
     2dc:	8f bd       	out	0x2f, r24	; 47
     2de:	08 95       	ret

000002e0 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <adc_read+0x6>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <adc_read+0x8>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
     2ec:	19 82       	std	Y+1, r1	; 0x01
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	1b 82       	std	Y+3, r1	; 0x03
     2f2:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
     2f4:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0xf3d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f8:	91 e3       	ldi	r25, 0x31	; 49
     2fa:	9a 95       	dec	r25
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <adc_read+0x1a>
     2fe:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	0c c0       	rjmp	.+24     	; 0x31e <adc_read+0x3e>
		adc_value[i] = adc[i];
     306:	f9 01       	movw	r30, r18
     308:	fc 5e       	subi	r31, 0xEC	; 236
     30a:	90 81       	ld	r25, Z
     30c:	e1 e0       	ldi	r30, 0x01	; 1
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ec 0f       	add	r30, r28
     312:	fd 1f       	adc	r31, r29
     314:	e2 0f       	add	r30, r18
     316:	f3 1f       	adc	r31, r19
     318:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	24 30       	cpi	r18, 0x04	; 4
     320:	31 05       	cpc	r19, r1
     322:	88 f3       	brcs	.-30     	; 0x306 <adc_read+0x26>
		adc_value[i] = adc[i];
	}

	return adc_value[channel];
     324:	e1 e0       	ldi	r30, 0x01	; 1
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ec 0f       	add	r30, r28
     32a:	fd 1f       	adc	r31, r29
     32c:	e8 0f       	add	r30, r24
     32e:	f1 1d       	adc	r31, r1
     330:	80 81       	ld	r24, Z
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
     346:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
     350:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__data_end>
     354:	08 95       	ret

00000356 <adc_conv_js_val>:
}

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
     356:	86 17       	cp	r24, r22
     358:	a0 f0       	brcs	.+40     	; 0x382 <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
     35a:	46 2f       	mov	r20, r22
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	24 1b       	sub	r18, r20
     364:	35 0b       	sbc	r19, r21
     366:	64 e6       	ldi	r22, 0x64	; 100
     368:	62 9f       	mul	r22, r18
     36a:	c0 01       	movw	r24, r0
     36c:	63 9f       	mul	r22, r19
     36e:	90 0d       	add	r25, r0
     370:	11 24       	eor	r1, r1
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	64 1b       	sub	r22, r20
     378:	75 0b       	sbc	r23, r21
     37a:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
     37e:	86 2f       	mov	r24, r22
     380:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	26 1b       	sub	r18, r22
     38a:	37 0b       	sbc	r19, r23
     38c:	44 e6       	ldi	r20, 0x64	; 100
     38e:	42 9f       	mul	r20, r18
     390:	c0 01       	movw	r24, r0
     392:	43 9f       	mul	r20, r19
     394:	90 0d       	add	r25, r0
     396:	11 24       	eor	r1, r1
     398:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
     39c:	86 2f       	mov	r24, r22
}
     39e:	08 95       	ret

000003a0 <pos_read>:

pos_t pos_read()
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
     3a4:	c0 91 b7 04 	lds	r28, 0x04B7	; 0x8004b7 <offset_x>
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
     3ae:	6c 2f       	mov	r22, r28
     3b0:	0e 94 ab 01 	call	0x356	; 0x356 <adc_conv_js_val>
     3b4:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
     3b6:	d0 91 b6 04 	lds	r29, 0x04B6	; 0x8004b6 <__data_end>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
     3c0:	6d 2f       	mov	r22, r29
     3c2:	0e 94 ab 01 	call	0x356	; 0x356 <adc_conv_js_val>
     3c6:	98 2f       	mov	r25, r24
	
	return positions;
}
     3c8:	8c 2f       	mov	r24, r28
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
     3d0:	28 2f       	mov	r18, r24
     3d2:	8a 5b       	subi	r24, 0xBA	; 186
     3d4:	8d 38       	cpi	r24, 0x8D	; 141
     3d6:	48 f4       	brcc	.+18     	; 0x3ea <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     3d8:	89 2f       	mov	r24, r25
     3da:	9a 5b       	subi	r25, 0xBA	; 186
     3dc:	9d 38       	cpi	r25, 0x8D	; 141
     3de:	d8 f0       	brcs	.+54     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     3e0:	87 34       	cpi	r24, 0x47	; 71
     3e2:	dc f4       	brge	.+54     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     3e4:	86 34       	cpi	r24, 0x46	; 70
     3e6:	dc f0       	brlt	.+54     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
     3e8:	15 c0       	rjmp	.+42     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
     3ea:	27 34       	cpi	r18, 0x47	; 71
     3ec:	4c f0       	brlt	.+18     	; 0x400 <__DATA_REGION_LENGTH__>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     3ee:	89 2f       	mov	r24, r25
     3f0:	9a 5b       	subi	r25, 0xBA	; 186
     3f2:	9d 38       	cpi	r25, 0x8D	; 141
     3f4:	b0 f0       	brcs	.+44     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     3f6:	87 34       	cpi	r24, 0x47	; 71
     3f8:	b4 f4       	brge	.+44     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     3fa:	86 34       	cpi	r24, 0x46	; 70
     3fc:	b4 f0       	brlt	.+44     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
     400:	26 34       	cpi	r18, 0x46	; 70
     402:	44 f4       	brge	.+16     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     404:	89 2f       	mov	r24, r25
     406:	9a 5b       	subi	r25, 0xBA	; 186
     408:	9d 38       	cpi	r25, 0x8D	; 141
     40a:	88 f0       	brcs	.+34     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     40c:	87 34       	cpi	r24, 0x47	; 71
     40e:	8c f4       	brge	.+34     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     410:	86 34       	cpi	r24, 0x46	; 70
     412:	8c f0       	brlt	.+34     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
			return DOWN_LEFT;
		}
	}
}
     414:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
     416:	84 e0       	ldi	r24, 0x04	; 4
     418:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
     426:	85 e0       	ldi	r24, 0x05	; 5
     428:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
     432:	86 e0       	ldi	r24, 0x06	; 6
     434:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
     436:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
     438:	08 95       	ret

0000043a <init>:
#include "MCP2515/MCP2515drv.h"
#include "CAN/CANdrv.h"


void init(){
	USART_drv_init(MYUBRR);
     43a:	8f e1       	ldi	r24, 0x1F	; 31
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <USART_drv_init>
	SRAM_init();
     442:	0e 94 49 05 	call	0xa92	; 0xa92 <SRAM_init>
	adc_drv_init();
     446:	0e 94 45 01 	call	0x28a	; 0x28a <adc_drv_init>
	ext_button_drv_init();
     44a:	0e 94 3e 03 	call	0x67c	; 0x67c <ext_button_drv_init>
	adc_calibrate();
     44e:	0e 94 a0 01 	call	0x340	; 0x340 <adc_calibrate>
	oled_init();
     452:	0e 94 bb 04 	call	0x976	; 0x976 <oled_init>
	menu_init();
     456:	0e 94 73 04 	call	0x8e6	; 0x8e6 <menu_init>
	MCP2515_init();
     45a:	0e 94 90 02 	call	0x520	; 0x520 <MCP2515_init>
     45e:	08 95       	ret

00000460 <main>:
{
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;

	init();
     460:	0e 94 1d 02 	call	0x43a	; 0x43a <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	2f ef       	ldi	r18, 0xFF	; 255
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	9c e2       	ldi	r25, 0x2C	; 44
     46a:	21 50       	subi	r18, 0x01	; 1
     46c:	80 40       	sbci	r24, 0x00	; 0
     46e:	90 40       	sbci	r25, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <main+0xa>
     472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x14>
     474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x16>

    while (1){
		_delay_ms(3000);
		menu_navigate();
     476:	0e 94 28 04 	call	0x850	; 0x850 <menu_navigate>
		MCP2515_write(0x00, 0x6B);	
     47a:	6b e6       	ldi	r22, 0x6B	; 107
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCP2515_write>
     482:	f0 cf       	rjmp	.-32     	; 0x464 <main+0x4>

00000484 <MCP2515_read>:

void MCP2515_request_to_send(uint8_t buffer)
{
	clear_bit(PORTB, PB4);
	SPI_write(buffer);
	set_bit(PORTB, PB4);
     484:	cf 93       	push	r28
     486:	c8 2f       	mov	r28, r24
     488:	88 b3       	in	r24, 0x18	; 24
     48a:	8f 7e       	andi	r24, 0xEF	; 239
     48c:	88 bb       	out	0x18, r24	; 24
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
     494:	8c 2f       	mov	r24, r28
     496:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
     49a:	0e 94 44 05 	call	0xa88	; 0xa88 <SPI_read>
     49e:	98 b3       	in	r25, 0x18	; 24
     4a0:	90 61       	ori	r25, 0x10	; 16
     4a2:	98 bb       	out	0x18, r25	; 24
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <MCP2515_write>:
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	d8 2f       	mov	r29, r24
     4ae:	c6 2f       	mov	r28, r22
     4b0:	88 b3       	in	r24, 0x18	; 24
     4b2:	8f 7e       	andi	r24, 0xEF	; 239
     4b4:	88 bb       	out	0x18, r24	; 24
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
     4bc:	8d 2f       	mov	r24, r29
     4be:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
     4c2:	8c 2f       	mov	r24, r28
     4c4:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
     4c8:	88 b3       	in	r24, 0x18	; 24
     4ca:	80 61       	ori	r24, 0x10	; 16
     4cc:	88 bb       	out	0x18, r24	; 24
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <MCP2515_bit_modify>:
}

void MCP2515_bit_modify(uint8_t write_register, uint8_t mask, uint8_t data)
{
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	18 2f       	mov	r17, r24
     4dc:	d6 2f       	mov	r29, r22
     4de:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     4e0:	88 b3       	in	r24, 0x18	; 24
     4e2:	8f 7e       	andi	r24, 0xEF	; 239
     4e4:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
	SPI_write(write_register);
     4ec:	81 2f       	mov	r24, r17
     4ee:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
	SPI_write(mask);
     4f2:	8d 2f       	mov	r24, r29
     4f4:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
	SPI_write(data);
     4f8:	8c 2f       	mov	r24, r28
     4fa:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
	
	set_bit(PORTB, PB4);
     4fe:	88 b3       	in	r24, 0x18	; 24
     500:	80 61       	ori	r24, 0x10	; 16
     502:	88 bb       	out	0x18, r24	; 24
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	08 95       	ret

0000050c <MCP2515_reset>:

void MCP2515_reset()
{
	clear_bit(PORTB, PB4);
     50c:	88 b3       	in	r24, 0x18	; 24
     50e:	8f 7e       	andi	r24, 0xEF	; 239
     510:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_RESET);
     512:	80 ec       	ldi	r24, 0xC0	; 192
     514:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_write>
	set_bit(PORTB, PB4);
     518:	88 b3       	in	r24, 0x18	; 24
     51a:	80 61       	ori	r24, 0x10	; 16
     51c:	88 bb       	out	0x18, r24	; 24
     51e:	08 95       	ret

00000520 <MCP2515_init>:
 */ 

#include "MCP2515drv.h"

uint8_t MCP2515_init()
 {
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	 int value;
	 SPI_init(); // Initialize SPI
     524:	0e 94 2e 05 	call	0xa5c	; 0xa5c <SPI_init>
	 MCP2515_reset(); // Send reset - command
     528:	0e 94 86 02 	call	0x50c	; 0x50c <MCP2515_reset>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
     52c:	8e e0       	ldi	r24, 0x0E	; 14
     52e:	0e 94 42 02 	call	0x484	; 0x484 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_CONFIG){
     532:	80 7e       	andi	r24, 0xE0	; 224
     534:	80 38       	cpi	r24, 0x80	; 128
     536:	31 f0       	breq	.+12     	; 0x544 <MCP2515_init+0x24>
		 print_uart("MCP2515 is NOT in configuration mode after reset!\r\n");
     538:	86 eb       	ldi	r24, 0xB6	; 182
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
		 return 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	4b c0       	rjmp	.+150    	; 0x5da <MCP2515_init+0xba>
	 }
	 
	 MCP2515_write(MCP_TXRTSCTRL, MCP_TXRTS_CONF);
     544:	67 e0       	ldi	r22, 0x07	; 7
     546:	8d e0       	ldi	r24, 0x0D	; 13
     548:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCP2515_write>
	 
	 // Receive buffer0 config: receive all messages, no overflow to RXB1.
	 MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0x60);
     54c:	40 e6       	ldi	r20, 0x60	; 96
     54e:	64 e6       	ldi	r22, 0x64	; 100
     550:	80 e6       	ldi	r24, 0x60	; 96
     552:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB0CTRL);
     556:	80 e6       	ldi	r24, 0x60	; 96
     558:	0e 94 42 02 	call	0x484	; 0x484 <MCP2515_read>
	 if (value != 0x60){
     55c:	80 36       	cpi	r24, 0x60	; 96
     55e:	31 f0       	breq	.+12     	; 0x56c <MCP2515_init+0x4c>
		 print_uart("Receive buffer 0 config incorrect!\r\n");
     560:	8a ee       	ldi	r24, 0xEA	; 234
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
		 return 2;
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	37 c0       	rjmp	.+110    	; 0x5da <MCP2515_init+0xba>
	 }
	 
	 // Receive buffer1 config: receive all messages.
	 MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     56c:	40 e6       	ldi	r20, 0x60	; 96
     56e:	60 e6       	ldi	r22, 0x60	; 96
     570:	80 e7       	ldi	r24, 0x70	; 112
     572:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB1CTRL);
     576:	80 e7       	ldi	r24, 0x70	; 112
     578:	0e 94 42 02 	call	0x484	; 0x484 <MCP2515_read>
     57c:	c8 2f       	mov	r28, r24
     57e:	d0 e0       	ldi	r29, 0x00	; 0
	 print_uart(value);
     580:	ce 01       	movw	r24, r28
     582:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
	 if (value != 0x60){
     586:	c0 36       	cpi	r28, 0x60	; 96
     588:	d1 05       	cpc	r29, r1
     58a:	31 f0       	breq	.+12     	; 0x598 <MCP2515_init+0x78>
		 print_uart("Receive buffer 1 config incorrect!\r\n");
     58c:	8f e0       	ldi	r24, 0x0F	; 15
     58e:	94 e0       	ldi	r25, 0x04	; 4
     590:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
		 return 3;
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	21 c0       	rjmp	.+66     	; 0x5da <MCP2515_init+0xba>
	 }	 
	 
	 // Interrupt config: msg error, error flag change, TX0 empty, RX0 full
	 MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0xA5);
     598:	45 ea       	ldi	r20, 0xA5	; 165
     59a:	6f ef       	ldi	r22, 0xFF	; 255
     59c:	8b e2       	ldi	r24, 0x2B	; 43
     59e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CANINTE);
     5a2:	8b e2       	ldi	r24, 0x2B	; 43
     5a4:	0e 94 42 02 	call	0x484	; 0x484 <MCP2515_read>
	 if (value != 0xA5){
     5a8:	85 3a       	cpi	r24, 0xA5	; 165
     5aa:	31 f0       	breq	.+12     	; 0x5b8 <MCP2515_init+0x98>
		 print_uart("Interrupt config incorrect!\r\n");
     5ac:	84 e3       	ldi	r24, 0x34	; 52
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
		 return 4;
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	11 c0       	rjmp	.+34     	; 0x5da <MCP2515_init+0xba>
	 } 
	 
	 MCP2515_write(MCP_CANCTRL, MODE_LOOPBACK);
     5b8:	60 e4       	ldi	r22, 0x40	; 64
     5ba:	8f e0       	ldi	r24, 0x0F	; 15
     5bc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <MCP2515_write>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
     5c0:	8e e0       	ldi	r24, 0x0E	; 14
     5c2:	0e 94 42 02 	call	0x484	; 0x484 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_LOOPBACK){
     5c6:	80 7e       	andi	r24, 0xE0	; 224
     5c8:	80 34       	cpi	r24, 0x40	; 64
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <MCP2515_init+0xb8>
		 print_uart(" MCP2515 is NOT in loopback mode!\n");
     5cc:	82 e5       	ldi	r24, 0x52	; 82
     5ce:	94 e0       	ldi	r25, 0x04	; 4
     5d0:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
		 return 5;
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <MCP2515_init+0xba>
	 }
	 
	 return 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
 }
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <__vector_2>:
#include <avr/interrupt.h>
#include "prints.h"


ISR (INT1_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
     602:	85 e7       	ldi	r24, 0x75	; 117
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
}
     60a:	ff 91       	pop	r31
     60c:	ef 91       	pop	r30
     60e:	bf 91       	pop	r27
     610:	af 91       	pop	r26
     612:	9f 91       	pop	r25
     614:	8f 91       	pop	r24
     616:	7f 91       	pop	r23
     618:	6f 91       	pop	r22
     61a:	5f 91       	pop	r21
     61c:	4f 91       	pop	r20
     61e:	3f 91       	pop	r19
     620:	2f 91       	pop	r18
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <__vector_3>:

ISR (INT2_vect)
{
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	2f 93       	push	r18
     638:	3f 93       	push	r19
     63a:	4f 93       	push	r20
     63c:	5f 93       	push	r21
     63e:	6f 93       	push	r22
     640:	7f 93       	push	r23
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	ef 93       	push	r30
     64c:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
     64e:	8c e8       	ldi	r24, 0x8C	; 140
     650:	94 e0       	ldi	r25, 0x04	; 4
     652:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
	enter();
     656:	0e 94 42 04 	call	0x884	; 0x884 <enter>
	
}
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	5f 91       	pop	r21
     66c:	4f 91       	pop	r20
     66e:	3f 91       	pop	r19
     670:	2f 91       	pop	r18
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
     67c:	81 b3       	in	r24, 0x11	; 17
     67e:	87 7f       	andi	r24, 0xF7	; 247
     680:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
     682:	86 b1       	in	r24, 0x06	; 6
     684:	8e 7f       	andi	r24, 0xFE	; 254
     686:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
     688:	f8 94       	cli
	// Enables interrupt on pin INT1
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
     68a:	8b b7       	in	r24, 0x3b	; 59
     68c:	80 68       	ori	r24, 0x80	; 128
     68e:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT2, INT1 & INT0
	set_bit(MCUCR, ISC11);
     690:	85 b7       	in	r24, 0x35	; 53
     692:	88 60       	ori	r24, 0x08	; 8
     694:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
     696:	85 b7       	in	r24, 0x35	; 53
     698:	84 60       	ori	r24, 0x04	; 4
     69a:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC01);
     69c:	85 b7       	in	r24, 0x35	; 53
     69e:	82 60       	ori	r24, 0x02	; 2
     6a0:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC00);
     6a2:	85 b7       	in	r24, 0x35	; 53
     6a4:	81 60       	ori	r24, 0x01	; 1
     6a6:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
     6a8:	8b b7       	in	r24, 0x3b	; 59
     6aa:	8e 7f       	andi	r24, 0xFE	; 254
     6ac:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
     6ae:	86 b7       	in	r24, 0x36	; 54
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
     6b4:	8a b7       	in	r24, 0x3a	; 58
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
     6ba:	8b b7       	in	r24, 0x3b	; 59
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
     6c0:	78 94       	sei
     6c2:	08 95       	ret

000006c4 <print_oled>:
#include "prints.h"

void print_oled(char* string){
	stdout = &stdout_oled;
     6c4:	2e e0       	ldi	r18, 0x0E	; 14
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <__iob+0x3>
     6cc:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <__iob+0x2>
	printf(string);
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	0e 94 87 05 	call	0xb0e	; 0xb0e <printf>
	
}void print_uart(char* string){
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	08 95       	ret

000006de <print_uart>:
	stdout = &stdout_uart;
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	31 e0       	ldi	r19, 0x01	; 1
     6e2:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <__iob+0x3>
     6e6:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <__iob+0x2>
	printf(string);
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	0e 94 87 05 	call	0xb0e	; 0xb0e <printf>
}
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	08 95       	ret

000006f8 <this_end>:
};


void this_end()
{
	print_uart("hei \r\n");
     6f8:	86 ea       	ldi	r24, 0xA6	; 166
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
     700:	08 95       	ret

00000702 <that_end>:
}

void that_end()
{
	print_uart("hallo \r\n");
     702:	8d ea       	ldi	r24, 0xAD	; 173
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	0e 94 6f 03 	call	0x6de	; 0x6de <print_uart>
     70a:	08 95       	ret

0000070c <print_arrow>:
	last_dir = dir;
}

void print_arrow()
{
	oled_write_data(0x18);
     70c:	88 e1       	ldi	r24, 0x18	; 24
     70e:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
	oled_write_data(0x18);
     712:	88 e1       	ldi	r24, 0x18	; 24
     714:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
	oled_write_data(0x7E);
     718:	8e e7       	ldi	r24, 0x7E	; 126
     71a:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
	oled_write_data(0x3C);
     71e:	8c e3       	ldi	r24, 0x3C	; 60
     720:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
	oled_write_data(0x18);
     724:	88 e1       	ldi	r24, 0x18	; 24
     726:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
     72a:	08 95       	ret

0000072c <print_menu_page>:
{
	print_uart("hallo \r\n");
}

void print_menu_page()
{
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	char *menu_page_title = current_menu->title;
     732:	c0 91 b9 04 	lds	r28, 0x04B9	; 0x8004b9 <current_menu>
     736:	d0 91 ba 04 	lds	r29, 0x04BA	; 0x8004ba <current_menu+0x1>
	oled_reset();
     73a:	0e 94 ab 04 	call	0x956	; 0x956 <oled_reset>
	oled_goto_line(0);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
	oled_goto_column(40);
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
	print_oled(menu_page_title);
     74a:	ce 01       	movw	r24, r28
     74c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <print_oled>
	
	for(uint8_t i = 0; i < current_menu->options; i++)
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	13 c0       	rjmp	.+38     	; 0x77a <print_menu_page+0x4e>
	{
		char *option = current_menu->submenu[i].option_name;
     754:	4c e1       	ldi	r20, 0x1C	; 28
     756:	48 9f       	mul	r20, r24
     758:	e0 01       	movw	r28, r0
     75a:	49 9f       	mul	r20, r25
     75c:	d0 0d       	add	r29, r0
     75e:	11 24       	eor	r1, r1
     760:	68 96       	adiw	r28, 0x18	; 24
     762:	c2 0f       	add	r28, r18
     764:	d3 1f       	adc	r29, r19
		oled_goto_line(i+1);
     766:	1f 5f       	subi	r17, 0xFF	; 255
     768:	81 2f       	mov	r24, r17
     76a:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
		oled_goto_column(8);
     76e:	88 e0       	ldi	r24, 0x08	; 8
     770:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
		print_oled(option);
     774:	ce 01       	movw	r24, r28
     776:	0e 94 62 03 	call	0x6c4	; 0x6c4 <print_oled>
	oled_reset();
	oled_goto_line(0);
	oled_goto_column(40);
	print_oled(menu_page_title);
	
	for(uint8_t i = 0; i < current_menu->options; i++)
     77a:	81 2f       	mov	r24, r17
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <current_menu>
     782:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <current_menu+0x1>
     786:	f9 01       	movw	r30, r18
     788:	e4 52       	subi	r30, 0x24	; 36
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	40 81       	ld	r20, Z
     78e:	51 81       	ldd	r21, Z+1	; 0x01
     790:	84 17       	cp	r24, r20
     792:	95 07       	cpc	r25, r21
     794:	fc f2       	brlt	.-66     	; 0x754 <print_menu_page+0x28>
		oled_goto_line(i+1);
		oled_goto_column(8);
		print_oled(option);
	}
	
	oled_pos(FIRST_LINE_MENU, 0);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 9f 04 	call	0x93e	; 0x93e <oled_pos>
	print_arrow();
     79e:	0e 94 86 03 	call	0x70c	; 0x70c <print_arrow>
	arrow_on_line = FIRST_LINE_MENU;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <arrow_on_line>
	
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	08 95       	ret

000007b0 <update_menu>:

void update_menu(void *menu_page)
{
	menu_struct *temp_menu_page = menu_page;
	current_menu = temp_menu_page;
     7b0:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <current_menu+0x1>
     7b4:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <current_menu>
	num_options_in_menu = temp_menu_page->options;
     7b8:	fc 01       	movw	r30, r24
     7ba:	e4 52       	subi	r30, 0x24	; 36
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	80 81       	ld	r24, Z
     7c0:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <num_options_in_menu>
	print_menu_page();
     7c4:	0e 94 96 03 	call	0x72c	; 0x72c <print_menu_page>
     7c8:	08 95       	ret

000007ca <clear_arrow>:
	oled_write_data(0x3C);
	oled_write_data(0x18);
}

void clear_arrow()
{
     7ca:	cf 93       	push	r28
	for(uint8_t i = 0; i < 5; i++) oled_write_data(0x00);
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <clear_arrow+0xe>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
     7d6:	cf 5f       	subi	r28, 0xFF	; 255
     7d8:	c5 30       	cpi	r28, 0x05	; 5
     7da:	d0 f3       	brcs	.-12     	; 0x7d0 <clear_arrow+0x6>
}
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <move_arrow_up>:

void move_arrow_up()
{
	if(arrow_on_line > FIRST_LINE_MENU && arrow_on_line <= num_options_in_menu)
     7e0:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <arrow_on_line>
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	b8 f0       	brcs	.+46     	; 0x816 <move_arrow_up+0x36>
     7e8:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <num_options_in_menu>
     7ec:	98 17       	cp	r25, r24
     7ee:	98 f0       	brcs	.+38     	; 0x816 <move_arrow_up+0x36>
	{
		oled_goto_line(arrow_on_line);
     7f0:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
		oled_goto_column(0);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
		clear_arrow();
     7fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <clear_arrow>
		arrow_on_line--;
     7fe:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <arrow_on_line>
     802:	81 50       	subi	r24, 0x01	; 1
     804:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <arrow_on_line>
		oled_goto_line(arrow_on_line);
     808:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
		oled_goto_column(0);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
		print_arrow();
     812:	0e 94 86 03 	call	0x70c	; 0x70c <print_arrow>
     816:	08 95       	ret

00000818 <move_arrow_down>:
	}
}

void move_arrow_down()
{
	if(arrow_on_line >= FIRST_LINE_MENU && arrow_on_line < num_options_in_menu)
     818:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <arrow_on_line>
     81c:	88 23       	and	r24, r24
     81e:	b9 f0       	breq	.+46     	; 0x84e <move_arrow_down+0x36>
     820:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <num_options_in_menu>
     824:	89 17       	cp	r24, r25
     826:	98 f4       	brcc	.+38     	; 0x84e <move_arrow_down+0x36>
	{
		oled_goto_line(arrow_on_line);
     828:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
		oled_goto_column(0);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
		clear_arrow();
     832:	0e 94 e5 03 	call	0x7ca	; 0x7ca <clear_arrow>
		arrow_on_line++;
     836:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <arrow_on_line>
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <arrow_on_line>
		oled_goto_line(arrow_on_line);
     840:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
		oled_goto_column(0);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
		print_arrow();
     84a:	0e 94 86 03 	call	0x70c	; 0x70c <print_arrow>
     84e:	08 95       	ret

00000850 <menu_navigate>:
	num_options_in_menu = temp_menu_page->options;
	print_menu_page();
}

void menu_navigate()
{	
     850:	cf 93       	push	r28
	static dir_t last_dir;
	dir_t dir = dir_read(pos_read());
     852:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <pos_read>
     856:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dir_read>
     85a:	c8 2f       	mov	r28, r24
	
	
	if(dir == DOWN && dir != last_dir){
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	39 f4       	brne	.+14     	; 0x86e <menu_navigate+0x1e>
     860:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <last_dir.2325>
     864:	c8 17       	cp	r28, r24
     866:	19 f0       	breq	.+6      	; 0x86e <menu_navigate+0x1e>
		move_arrow_down();
     868:	0e 94 0c 04 	call	0x818	; 0x818 <move_arrow_down>
     86c:	07 c0       	rjmp	.+14     	; 0x87c <menu_navigate+0x2c>
	}
	else if(dir == UP && dir != last_dir){
     86e:	c2 30       	cpi	r28, 0x02	; 2
     870:	29 f4       	brne	.+10     	; 0x87c <menu_navigate+0x2c>
     872:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <last_dir.2325>
     876:	c8 13       	cpse	r28, r24
		move_arrow_up();
     878:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <move_arrow_up>
	}
	last_dir = dir;
     87c:	c0 93 b8 04 	sts	0x04B8, r28	; 0x8004b8 <last_dir.2325>
}
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <enter>:
		print_arrow();
	}
}

void enter()
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	6c 97       	sbiw	r28, 0x1c	; 28
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
     898:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <current_menu>
     89c:	f0 91 ba 04 	lds	r31, 0x04BA	; 0x8004ba <current_menu+0x1>
     8a0:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <arrow_on_line>
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	4c e1       	ldi	r20, 0x1C	; 28
     8ac:	42 9f       	mul	r20, r18
     8ae:	c0 01       	movw	r24, r0
     8b0:	43 9f       	mul	r20, r19
     8b2:	90 0d       	add	r25, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	e8 0f       	add	r30, r24
     8b8:	f9 1f       	adc	r31, r25
     8ba:	78 96       	adiw	r30, 0x18	; 24
     8bc:	8c e1       	ldi	r24, 0x1C	; 28
     8be:	de 01       	movw	r26, r28
     8c0:	11 96       	adiw	r26, 0x01	; 1
     8c2:	01 90       	ld	r0, Z+
     8c4:	0d 92       	st	X+, r0
     8c6:	8a 95       	dec	r24
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
     8ca:	e9 8d       	ldd	r30, Y+25	; 0x19
     8cc:	fa 8d       	ldd	r31, Y+26	; 0x1a
     8ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8d2:	09 95       	icall
}
     8d4:	6c 96       	adiw	r28, 0x1c	; 28
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <menu_init>:

void menu_init()
{
	main_menu.submenu[0].callback_parameter = &Sub_menu_1;
     8e6:	ec e1       	ldi	r30, 0x1C	; 28
     8e8:	f1 e0       	ldi	r31, 0x01	; 1
     8ea:	8a ef       	ldi	r24, 0xFA	; 250
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	93 ab       	std	Z+51, r25	; 0x33
     8f0:	82 ab       	std	Z+50, r24	; 0x32
	main_menu.submenu[1].callback_parameter = &Sub_menu_2;
     8f2:	88 ed       	ldi	r24, 0xD8	; 216
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <main_menu+0x4f>
     8fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <main_menu+0x4e>
	Sub_menu_1.submenu[1].callback_parameter = &main_menu;
     8fe:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <Sub_menu_1+0x4f>
     902:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <Sub_menu_1+0x4e>
	Sub_menu_2.submenu[1].callback_parameter = &main_menu;
     906:	f0 93 27 03 	sts	0x0327, r31	; 0x800327 <Sub_menu_2+0x4f>
     90a:	e0 93 26 03 	sts	0x0326, r30	; 0x800326 <Sub_menu_2+0x4e>
	update_menu(&main_menu);
     90e:	cf 01       	movw	r24, r30
     910:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <update_menu>
     914:	08 95       	ret

00000916 <oled_write_cmd>:
{
	oled_pos(line, 0);
	for(uint8_t i = 0; i<OLED_COLUMNS; i++) {
		oled_write_data(0x00);
	}
}
     916:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xb3d>
     91a:	08 95       	ret

0000091c <oled_goto_line>:
     91c:	80 55       	subi	r24, 0x50	; 80
     91e:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     922:	08 95       	ret

00000924 <oled_goto_column>:
     924:	cf 93       	push	r28
     926:	c8 2f       	mov	r28, r24
     928:	c2 95       	swap	r28
     92a:	cf 70       	andi	r28, 0x0F	; 15
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     932:	8c 2f       	mov	r24, r28
     934:	80 61       	ori	r24, 0x10	; 16
     936:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <oled_pos>:
     93e:	cf 93       	push	r28
     940:	c6 2f       	mov	r28, r22
     942:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_goto_line>
     946:	8c 2f       	mov	r24, r28
     948:	0e 94 92 04 	call	0x924	; 0x924 <oled_goto_column>
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <oled_write_data>:
     950:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xd3d>
     954:	08 95       	ret

00000956 <oled_reset>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <oled_reset+0x12>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>
     966:	21 96       	adiw	r28, 0x01	; 1
     968:	c1 15       	cp	r28, r1
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	d8 07       	cpc	r29, r24
     96e:	c0 f3       	brcs	.-16     	; 0x960 <oled_reset+0xa>
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <oled_init>:
     976:	8e ea       	ldi	r24, 0xAE	; 174
     978:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     97c:	81 ea       	ldi	r24, 0xA1	; 161
     97e:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     982:	8a ed       	ldi	r24, 0xDA	; 218
     984:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     988:	82 e1       	ldi	r24, 0x12	; 18
     98a:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     98e:	88 ec       	ldi	r24, 0xC8	; 200
     990:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     994:	88 ea       	ldi	r24, 0xA8	; 168
     996:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     99a:	8f e3       	ldi	r24, 0x3F	; 63
     99c:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9a0:	85 ed       	ldi	r24, 0xD5	; 213
     9a2:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9ac:	81 e8       	ldi	r24, 0x81	; 129
     9ae:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9b8:	89 ed       	ldi	r24, 0xD9	; 217
     9ba:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9be:	81 e2       	ldi	r24, 0x21	; 33
     9c0:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9d0:	8b ed       	ldi	r24, 0xDB	; 219
     9d2:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9d6:	80 e3       	ldi	r24, 0x30	; 48
     9d8:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9dc:	8d ea       	ldi	r24, 0xAD	; 173
     9de:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9e8:	84 ea       	ldi	r24, 0xA4	; 164
     9ea:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9ee:	86 ea       	ldi	r24, 0xA6	; 166
     9f0:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9f4:	8f ea       	ldi	r24, 0xAF	; 175
     9f6:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     9fa:	81 e2       	ldi	r24, 0x21	; 33
     9fc:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a0c:	82 e2       	ldi	r24, 0x22	; 34
     a0e:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	0e 94 8b 04 	call	0x916	; 0x916 <oled_write_cmd>
     a1e:	0e 94 ab 04 	call	0x956	; 0x956 <oled_reset>
     a22:	08 95       	ret

00000a24 <oled_print>:
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
}

void oled_print(char c)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
	uint8_t font_index = c - 32;
     a28:	d0 ee       	ldi	r29, 0xE0	; 224
     a2a:	d8 0f       	add	r29, r24

	for(uint8_t i = 0; i < 5; i++){
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	11 c0       	rjmp	.+34     	; 0xa52 <oled_print+0x2e>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
     a30:	8d 2f       	mov	r24, r29
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	ec 0f       	add	r30, r28
     a44:	f1 1d       	adc	r31, r1
     a46:	e0 59       	subi	r30, 0x90	; 144
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	84 91       	lpm	r24, Z
     a4c:	0e 94 a8 04 	call	0x950	; 0x950 <oled_write_data>

void oled_print(char c)
{
	uint8_t font_index = c - 32;

	for(uint8_t i = 0; i < 5; i++){
     a50:	cf 5f       	subi	r28, 0xFF	; 255
     a52:	c5 30       	cpi	r28, 0x05	; 5
     a54:	68 f3       	brcs	.-38     	; 0xa30 <oled_print+0xc>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
	}
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <SPI_init>:

void SPI_init(void)
{
	/* Set PB4, MOSI and SCK output. By using "set_bit", we avoid configuring all other bits (?) */
	//DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
	set_bit(DDRB, DDB4);
     a5c:	87 b3       	in	r24, 0x17	; 23
     a5e:	80 61       	ori	r24, 0x10	; 16
     a60:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB5);
     a62:	87 b3       	in	r24, 0x17	; 23
     a64:	80 62       	ori	r24, 0x20	; 32
     a66:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB7);
     a68:	87 b3       	in	r24, 0x17	; 23
     a6a:	80 68       	ori	r24, 0x80	; 128
     a6c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     a6e:	81 e5       	ldi	r24, 0x51	; 81
     a70:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(PORTB, PB4);
     a72:	88 b3       	in	r24, 0x18	; 24
     a74:	80 61       	ori	r24, 0x10	; 16
     a76:	88 bb       	out	0x18, r24	; 24
     a78:	08 95       	ret

00000a7a <SPI_transmit>:
}

void SPI_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     a7a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     a7c:	77 9b       	sbis	0x0e, 7	; 14
     a7e:	fe cf       	rjmp	.-4      	; 0xa7c <SPI_transmit+0x2>
	;
}
     a80:	08 95       	ret

00000a82 <SPI_write>:

void SPI_write(uint8_t data)
{
	SPI_transmit(data);
     a82:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SPI_transmit>
     a86:	08 95       	ret

00000a88 <SPI_read>:
}

uint8_t SPI_read()
{
	SPI_transmit(SPI_DUMMY_DATA);
     a88:	84 ef       	ldi	r24, 0xF4	; 244
     a8a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SPI_transmit>
	
	return SPDR;
     a8e:	8f b1       	in	r24, 0x0f	; 15
     a90:	08 95       	ret

00000a92 <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
     a92:	85 b7       	in	r24, 0x35	; 53
     a94:	80 68       	ori	r24, 0x80	; 128
     a96:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
     a98:	80 b7       	in	r24, 0x30	; 48
     a9a:	80 62       	ori	r24, 0x20	; 32
     a9c:	80 bf       	out	0x30, r24	; 48
     a9e:	08 95       	ret

00000aa0 <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     aa0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     aa2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     aa4:	88 e1       	ldi	r24, 0x18	; 24
     aa6:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     aa8:	8e e8       	ldi	r24, 0x8E	; 142
     aaa:	80 bd       	out	0x20, r24	; 32
     aac:	08 95       	ret

00000aae <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     aae:	5d 9b       	sbis	0x0b, 5	; 11
     ab0:	fe cf       	rjmp	.-4      	; 0xaae <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     ab2:	8c b9       	out	0x0c, r24	; 12
     ab4:	08 95       	ret

00000ab6 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     ab6:	5f 9b       	sbis	0x0b, 7	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     aba:	8c b1       	in	r24, 0x0c	; 12

}
     abc:	08 95       	ret

00000abe <__divmodhi4>:
     abe:	97 fb       	bst	r25, 7
     ac0:	07 2e       	mov	r0, r23
     ac2:	16 f4       	brtc	.+4      	; 0xac8 <__divmodhi4+0xa>
     ac4:	00 94       	com	r0
     ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodhi4_neg1>
     ac8:	77 fd       	sbrc	r23, 7
     aca:	09 d0       	rcall	.+18     	; 0xade <__divmodhi4_neg2>
     acc:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodhi4>
     ad0:	07 fc       	sbrc	r0, 7
     ad2:	05 d0       	rcall	.+10     	; 0xade <__divmodhi4_neg2>
     ad4:	3e f4       	brtc	.+14     	; 0xae4 <__divmodhi4_exit>

00000ad6 <__divmodhi4_neg1>:
     ad6:	90 95       	com	r25
     ad8:	81 95       	neg	r24
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	08 95       	ret

00000ade <__divmodhi4_neg2>:
     ade:	70 95       	com	r23
     ae0:	61 95       	neg	r22
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae4 <__divmodhi4_exit>:
     ae4:	08 95       	ret

00000ae6 <__udivmodhi4>:
     ae6:	aa 1b       	sub	r26, r26
     ae8:	bb 1b       	sub	r27, r27
     aea:	51 e1       	ldi	r21, 0x11	; 17
     aec:	07 c0       	rjmp	.+14     	; 0xafc <__udivmodhi4_ep>

00000aee <__udivmodhi4_loop>:
     aee:	aa 1f       	adc	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	a6 17       	cp	r26, r22
     af4:	b7 07       	cpc	r27, r23
     af6:	10 f0       	brcs	.+4      	; 0xafc <__udivmodhi4_ep>
     af8:	a6 1b       	sub	r26, r22
     afa:	b7 0b       	sbc	r27, r23

00000afc <__udivmodhi4_ep>:
     afc:	88 1f       	adc	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	5a 95       	dec	r21
     b02:	a9 f7       	brne	.-22     	; 0xaee <__udivmodhi4_loop>
     b04:	80 95       	com	r24
     b06:	90 95       	com	r25
     b08:	bc 01       	movw	r22, r24
     b0a:	cd 01       	movw	r24, r26
     b0c:	08 95       	ret

00000b0e <printf>:
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ed e8       	ldi	r30, 0x8D	; 141
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__prologue_saves__+0x20>
     b1a:	ae 01       	movw	r20, r28
     b1c:	4b 5f       	subi	r20, 0xFB	; 251
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	fa 01       	movw	r30, r20
     b22:	61 91       	ld	r22, Z+
     b24:	71 91       	ld	r23, Z+
     b26:	af 01       	movw	r20, r30
     b28:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <__iob+0x2>
     b2c:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <__iob+0x3>
     b30:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vfprintf>
     b34:	e2 e0       	ldi	r30, 0x02	; 2
     b36:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__epilogue_restores__+0x20>

00000b3a <vfprintf>:
     b3a:	ab e0       	ldi	r26, 0x0B	; 11
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e3 ea       	ldi	r30, 0xA3	; 163
     b40:	f5 e0       	ldi	r31, 0x05	; 5
     b42:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__prologue_saves__>
     b46:	6c 01       	movw	r12, r24
     b48:	7b 01       	movw	r14, r22
     b4a:	8a 01       	movw	r16, r20
     b4c:	fc 01       	movw	r30, r24
     b4e:	17 82       	std	Z+7, r1	; 0x07
     b50:	16 82       	std	Z+6, r1	; 0x06
     b52:	83 81       	ldd	r24, Z+3	; 0x03
     b54:	81 ff       	sbrs	r24, 1
     b56:	cc c1       	rjmp	.+920    	; 0xef0 <vfprintf+0x3b6>
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	3c 01       	movw	r6, r24
     b5e:	f6 01       	movw	r30, r12
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	f7 01       	movw	r30, r14
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	7f 01       	movw	r14, r30
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <vfprintf+0x3a>
     b72:	ba c1       	rjmp	.+884    	; 0xee8 <vfprintf+0x3ae>
     b74:	85 32       	cpi	r24, 0x25	; 37
     b76:	39 f4       	brne	.+14     	; 0xb86 <vfprintf+0x4c>
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	7f 01       	movw	r14, r30
     b82:	85 32       	cpi	r24, 0x25	; 37
     b84:	29 f4       	brne	.+10     	; 0xb90 <vfprintf+0x56>
     b86:	b6 01       	movw	r22, r12
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     b8e:	e7 cf       	rjmp	.-50     	; 0xb5e <vfprintf+0x24>
     b90:	91 2c       	mov	r9, r1
     b92:	21 2c       	mov	r2, r1
     b94:	31 2c       	mov	r3, r1
     b96:	ff e1       	ldi	r31, 0x1F	; 31
     b98:	f3 15       	cp	r31, r3
     b9a:	d8 f0       	brcs	.+54     	; 0xbd2 <vfprintf+0x98>
     b9c:	8b 32       	cpi	r24, 0x2B	; 43
     b9e:	79 f0       	breq	.+30     	; 0xbbe <vfprintf+0x84>
     ba0:	38 f4       	brcc	.+14     	; 0xbb0 <vfprintf+0x76>
     ba2:	80 32       	cpi	r24, 0x20	; 32
     ba4:	79 f0       	breq	.+30     	; 0xbc4 <vfprintf+0x8a>
     ba6:	83 32       	cpi	r24, 0x23	; 35
     ba8:	a1 f4       	brne	.+40     	; 0xbd2 <vfprintf+0x98>
     baa:	23 2d       	mov	r18, r3
     bac:	20 61       	ori	r18, 0x10	; 16
     bae:	1d c0       	rjmp	.+58     	; 0xbea <vfprintf+0xb0>
     bb0:	8d 32       	cpi	r24, 0x2D	; 45
     bb2:	61 f0       	breq	.+24     	; 0xbcc <vfprintf+0x92>
     bb4:	80 33       	cpi	r24, 0x30	; 48
     bb6:	69 f4       	brne	.+26     	; 0xbd2 <vfprintf+0x98>
     bb8:	23 2d       	mov	r18, r3
     bba:	21 60       	ori	r18, 0x01	; 1
     bbc:	16 c0       	rjmp	.+44     	; 0xbea <vfprintf+0xb0>
     bbe:	83 2d       	mov	r24, r3
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	38 2e       	mov	r3, r24
     bc4:	e3 2d       	mov	r30, r3
     bc6:	e4 60       	ori	r30, 0x04	; 4
     bc8:	3e 2e       	mov	r3, r30
     bca:	2a c0       	rjmp	.+84     	; 0xc20 <vfprintf+0xe6>
     bcc:	f3 2d       	mov	r31, r3
     bce:	f8 60       	ori	r31, 0x08	; 8
     bd0:	1d c0       	rjmp	.+58     	; 0xc0c <vfprintf+0xd2>
     bd2:	37 fc       	sbrc	r3, 7
     bd4:	2d c0       	rjmp	.+90     	; 0xc30 <vfprintf+0xf6>
     bd6:	20 ed       	ldi	r18, 0xD0	; 208
     bd8:	28 0f       	add	r18, r24
     bda:	2a 30       	cpi	r18, 0x0A	; 10
     bdc:	40 f0       	brcs	.+16     	; 0xbee <vfprintf+0xb4>
     bde:	8e 32       	cpi	r24, 0x2E	; 46
     be0:	b9 f4       	brne	.+46     	; 0xc10 <vfprintf+0xd6>
     be2:	36 fc       	sbrc	r3, 6
     be4:	81 c1       	rjmp	.+770    	; 0xee8 <vfprintf+0x3ae>
     be6:	23 2d       	mov	r18, r3
     be8:	20 64       	ori	r18, 0x40	; 64
     bea:	32 2e       	mov	r3, r18
     bec:	19 c0       	rjmp	.+50     	; 0xc20 <vfprintf+0xe6>
     bee:	36 fe       	sbrs	r3, 6
     bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0xc4>
     bf2:	8a e0       	ldi	r24, 0x0A	; 10
     bf4:	98 9e       	mul	r9, r24
     bf6:	20 0d       	add	r18, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	92 2e       	mov	r9, r18
     bfc:	11 c0       	rjmp	.+34     	; 0xc20 <vfprintf+0xe6>
     bfe:	ea e0       	ldi	r30, 0x0A	; 10
     c00:	2e 9e       	mul	r2, r30
     c02:	20 0d       	add	r18, r0
     c04:	11 24       	eor	r1, r1
     c06:	22 2e       	mov	r2, r18
     c08:	f3 2d       	mov	r31, r3
     c0a:	f0 62       	ori	r31, 0x20	; 32
     c0c:	3f 2e       	mov	r3, r31
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <vfprintf+0xe6>
     c10:	8c 36       	cpi	r24, 0x6C	; 108
     c12:	21 f4       	brne	.+8      	; 0xc1c <vfprintf+0xe2>
     c14:	83 2d       	mov	r24, r3
     c16:	80 68       	ori	r24, 0x80	; 128
     c18:	38 2e       	mov	r3, r24
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0xe6>
     c1c:	88 36       	cpi	r24, 0x68	; 104
     c1e:	41 f4       	brne	.+16     	; 0xc30 <vfprintf+0xf6>
     c20:	f7 01       	movw	r30, r14
     c22:	93 fd       	sbrc	r25, 3
     c24:	85 91       	lpm	r24, Z+
     c26:	93 ff       	sbrs	r25, 3
     c28:	81 91       	ld	r24, Z+
     c2a:	7f 01       	movw	r14, r30
     c2c:	81 11       	cpse	r24, r1
     c2e:	b3 cf       	rjmp	.-154    	; 0xb96 <vfprintf+0x5c>
     c30:	98 2f       	mov	r25, r24
     c32:	9f 7d       	andi	r25, 0xDF	; 223
     c34:	95 54       	subi	r25, 0x45	; 69
     c36:	93 30       	cpi	r25, 0x03	; 3
     c38:	28 f4       	brcc	.+10     	; 0xc44 <vfprintf+0x10a>
     c3a:	0c 5f       	subi	r16, 0xFC	; 252
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	9f e3       	ldi	r25, 0x3F	; 63
     c40:	99 83       	std	Y+1, r25	; 0x01
     c42:	0d c0       	rjmp	.+26     	; 0xc5e <vfprintf+0x124>
     c44:	83 36       	cpi	r24, 0x63	; 99
     c46:	31 f0       	breq	.+12     	; 0xc54 <vfprintf+0x11a>
     c48:	83 37       	cpi	r24, 0x73	; 115
     c4a:	71 f0       	breq	.+28     	; 0xc68 <vfprintf+0x12e>
     c4c:	83 35       	cpi	r24, 0x53	; 83
     c4e:	09 f0       	breq	.+2      	; 0xc52 <vfprintf+0x118>
     c50:	59 c0       	rjmp	.+178    	; 0xd04 <vfprintf+0x1ca>
     c52:	21 c0       	rjmp	.+66     	; 0xc96 <vfprintf+0x15c>
     c54:	f8 01       	movw	r30, r16
     c56:	80 81       	ld	r24, Z
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	0e 5f       	subi	r16, 0xFE	; 254
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	88 24       	eor	r8, r8
     c60:	83 94       	inc	r8
     c62:	91 2c       	mov	r9, r1
     c64:	53 01       	movw	r10, r6
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <vfprintf+0x154>
     c68:	28 01       	movw	r4, r16
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	4f 0e       	add	r4, r31
     c6e:	51 1c       	adc	r5, r1
     c70:	f8 01       	movw	r30, r16
     c72:	a0 80       	ld	r10, Z
     c74:	b1 80       	ldd	r11, Z+1	; 0x01
     c76:	36 fe       	sbrs	r3, 6
     c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x146>
     c7a:	69 2d       	mov	r22, r9
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0x14a>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	c5 01       	movw	r24, r10
     c86:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen>
     c8a:	4c 01       	movw	r8, r24
     c8c:	82 01       	movw	r16, r4
     c8e:	f3 2d       	mov	r31, r3
     c90:	ff 77       	andi	r31, 0x7F	; 127
     c92:	3f 2e       	mov	r3, r31
     c94:	16 c0       	rjmp	.+44     	; 0xcc2 <vfprintf+0x188>
     c96:	28 01       	movw	r4, r16
     c98:	22 e0       	ldi	r18, 0x02	; 2
     c9a:	42 0e       	add	r4, r18
     c9c:	51 1c       	adc	r5, r1
     c9e:	f8 01       	movw	r30, r16
     ca0:	a0 80       	ld	r10, Z
     ca2:	b1 80       	ldd	r11, Z+1	; 0x01
     ca4:	36 fe       	sbrs	r3, 6
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <vfprintf+0x174>
     ca8:	69 2d       	mov	r22, r9
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x178>
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	7f ef       	ldi	r23, 0xFF	; 255
     cb2:	c5 01       	movw	r24, r10
     cb4:	0e 94 7e 07 	call	0xefc	; 0xefc <strnlen_P>
     cb8:	4c 01       	movw	r8, r24
     cba:	f3 2d       	mov	r31, r3
     cbc:	f0 68       	ori	r31, 0x80	; 128
     cbe:	3f 2e       	mov	r3, r31
     cc0:	82 01       	movw	r16, r4
     cc2:	33 fc       	sbrc	r3, 3
     cc4:	1b c0       	rjmp	.+54     	; 0xcfc <vfprintf+0x1c2>
     cc6:	82 2d       	mov	r24, r2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 16       	cp	r8, r24
     ccc:	99 06       	cpc	r9, r25
     cce:	b0 f4       	brcc	.+44     	; 0xcfc <vfprintf+0x1c2>
     cd0:	b6 01       	movw	r22, r12
     cd2:	80 e2       	ldi	r24, 0x20	; 32
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     cda:	2a 94       	dec	r2
     cdc:	f4 cf       	rjmp	.-24     	; 0xcc6 <vfprintf+0x18c>
     cde:	f5 01       	movw	r30, r10
     ce0:	37 fc       	sbrc	r3, 7
     ce2:	85 91       	lpm	r24, Z+
     ce4:	37 fe       	sbrs	r3, 7
     ce6:	81 91       	ld	r24, Z+
     ce8:	5f 01       	movw	r10, r30
     cea:	b6 01       	movw	r22, r12
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     cf2:	21 10       	cpse	r2, r1
     cf4:	2a 94       	dec	r2
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	82 1a       	sub	r8, r18
     cfa:	91 08       	sbc	r9, r1
     cfc:	81 14       	cp	r8, r1
     cfe:	91 04       	cpc	r9, r1
     d00:	71 f7       	brne	.-36     	; 0xcde <vfprintf+0x1a4>
     d02:	e8 c0       	rjmp	.+464    	; 0xed4 <vfprintf+0x39a>
     d04:	84 36       	cpi	r24, 0x64	; 100
     d06:	11 f0       	breq	.+4      	; 0xd0c <vfprintf+0x1d2>
     d08:	89 36       	cpi	r24, 0x69	; 105
     d0a:	41 f5       	brne	.+80     	; 0xd5c <vfprintf+0x222>
     d0c:	f8 01       	movw	r30, r16
     d0e:	37 fe       	sbrs	r3, 7
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <vfprintf+0x1e6>
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	0c 5f       	subi	r16, 0xFC	; 252
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <vfprintf+0x1f6>
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	07 2e       	mov	r0, r23
     d26:	00 0c       	add	r0, r0
     d28:	88 0b       	sbc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	0e 5f       	subi	r16, 0xFE	; 254
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	f3 2d       	mov	r31, r3
     d32:	ff 76       	andi	r31, 0x6F	; 111
     d34:	3f 2e       	mov	r3, r31
     d36:	97 ff       	sbrs	r25, 7
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <vfprintf+0x212>
     d3a:	90 95       	com	r25
     d3c:	80 95       	com	r24
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	8f 4f       	sbci	r24, 0xFF	; 255
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	f0 68       	ori	r31, 0x80	; 128
     d4a:	3f 2e       	mov	r3, r31
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	a3 01       	movw	r20, r6
     d52:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__ultoa_invert>
     d56:	88 2e       	mov	r8, r24
     d58:	86 18       	sub	r8, r6
     d5a:	45 c0       	rjmp	.+138    	; 0xde6 <vfprintf+0x2ac>
     d5c:	85 37       	cpi	r24, 0x75	; 117
     d5e:	31 f4       	brne	.+12     	; 0xd6c <vfprintf+0x232>
     d60:	23 2d       	mov	r18, r3
     d62:	2f 7e       	andi	r18, 0xEF	; 239
     d64:	b2 2e       	mov	r11, r18
     d66:	2a e0       	ldi	r18, 0x0A	; 10
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	25 c0       	rjmp	.+74     	; 0xdb6 <vfprintf+0x27c>
     d6c:	93 2d       	mov	r25, r3
     d6e:	99 7f       	andi	r25, 0xF9	; 249
     d70:	b9 2e       	mov	r11, r25
     d72:	8f 36       	cpi	r24, 0x6F	; 111
     d74:	c1 f0       	breq	.+48     	; 0xda6 <vfprintf+0x26c>
     d76:	18 f4       	brcc	.+6      	; 0xd7e <vfprintf+0x244>
     d78:	88 35       	cpi	r24, 0x58	; 88
     d7a:	79 f0       	breq	.+30     	; 0xd9a <vfprintf+0x260>
     d7c:	b5 c0       	rjmp	.+362    	; 0xee8 <vfprintf+0x3ae>
     d7e:	80 37       	cpi	r24, 0x70	; 112
     d80:	19 f0       	breq	.+6      	; 0xd88 <vfprintf+0x24e>
     d82:	88 37       	cpi	r24, 0x78	; 120
     d84:	21 f0       	breq	.+8      	; 0xd8e <vfprintf+0x254>
     d86:	b0 c0       	rjmp	.+352    	; 0xee8 <vfprintf+0x3ae>
     d88:	e9 2f       	mov	r30, r25
     d8a:	e0 61       	ori	r30, 0x10	; 16
     d8c:	be 2e       	mov	r11, r30
     d8e:	b4 fe       	sbrs	r11, 4
     d90:	0d c0       	rjmp	.+26     	; 0xdac <vfprintf+0x272>
     d92:	fb 2d       	mov	r31, r11
     d94:	f4 60       	ori	r31, 0x04	; 4
     d96:	bf 2e       	mov	r11, r31
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vfprintf+0x272>
     d9a:	34 fe       	sbrs	r3, 4
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <vfprintf+0x278>
     d9e:	29 2f       	mov	r18, r25
     da0:	26 60       	ori	r18, 0x06	; 6
     da2:	b2 2e       	mov	r11, r18
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0x278>
     da6:	28 e0       	ldi	r18, 0x08	; 8
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <vfprintf+0x27c>
     dac:	20 e1       	ldi	r18, 0x10	; 16
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x27c>
     db2:	20 e1       	ldi	r18, 0x10	; 16
     db4:	32 e0       	ldi	r19, 0x02	; 2
     db6:	f8 01       	movw	r30, r16
     db8:	b7 fe       	sbrs	r11, 7
     dba:	07 c0       	rjmp	.+14     	; 0xdca <vfprintf+0x290>
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	0c 5f       	subi	r16, 0xFC	; 252
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <vfprintf+0x29c>
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 5f       	subi	r16, 0xFE	; 254
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	a3 01       	movw	r20, r6
     dd8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__ultoa_invert>
     ddc:	88 2e       	mov	r8, r24
     dde:	86 18       	sub	r8, r6
     de0:	fb 2d       	mov	r31, r11
     de2:	ff 77       	andi	r31, 0x7F	; 127
     de4:	3f 2e       	mov	r3, r31
     de6:	36 fe       	sbrs	r3, 6
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <vfprintf+0x2ca>
     dea:	23 2d       	mov	r18, r3
     dec:	2e 7f       	andi	r18, 0xFE	; 254
     dee:	a2 2e       	mov	r10, r18
     df0:	89 14       	cp	r8, r9
     df2:	58 f4       	brcc	.+22     	; 0xe0a <vfprintf+0x2d0>
     df4:	34 fe       	sbrs	r3, 4
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <vfprintf+0x2d4>
     df8:	32 fc       	sbrc	r3, 2
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x2d4>
     dfc:	83 2d       	mov	r24, r3
     dfe:	8e 7e       	andi	r24, 0xEE	; 238
     e00:	a8 2e       	mov	r10, r24
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <vfprintf+0x2d4>
     e04:	b8 2c       	mov	r11, r8
     e06:	a3 2c       	mov	r10, r3
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x2d6>
     e0a:	b8 2c       	mov	r11, r8
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <vfprintf+0x2d6>
     e0e:	b9 2c       	mov	r11, r9
     e10:	a4 fe       	sbrs	r10, 4
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <vfprintf+0x2f8>
     e14:	fe 01       	movw	r30, r28
     e16:	e8 0d       	add	r30, r8
     e18:	f1 1d       	adc	r31, r1
     e1a:	80 81       	ld	r24, Z
     e1c:	80 33       	cpi	r24, 0x30	; 48
     e1e:	21 f4       	brne	.+8      	; 0xe28 <vfprintf+0x2ee>
     e20:	9a 2d       	mov	r25, r10
     e22:	99 7e       	andi	r25, 0xE9	; 233
     e24:	a9 2e       	mov	r10, r25
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <vfprintf+0x300>
     e28:	a2 fe       	sbrs	r10, 2
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <vfprintf+0x2fe>
     e2c:	b3 94       	inc	r11
     e2e:	b3 94       	inc	r11
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <vfprintf+0x300>
     e32:	8a 2d       	mov	r24, r10
     e34:	86 78       	andi	r24, 0x86	; 134
     e36:	09 f0       	breq	.+2      	; 0xe3a <vfprintf+0x300>
     e38:	b3 94       	inc	r11
     e3a:	a3 fc       	sbrc	r10, 3
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <vfprintf+0x326>
     e3e:	a0 fe       	sbrs	r10, 0
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0x314>
     e42:	b2 14       	cp	r11, r2
     e44:	88 f4       	brcc	.+34     	; 0xe68 <vfprintf+0x32e>
     e46:	28 0c       	add	r2, r8
     e48:	92 2c       	mov	r9, r2
     e4a:	9b 18       	sub	r9, r11
     e4c:	0e c0       	rjmp	.+28     	; 0xe6a <vfprintf+0x330>
     e4e:	b2 14       	cp	r11, r2
     e50:	60 f4       	brcc	.+24     	; 0xe6a <vfprintf+0x330>
     e52:	b6 01       	movw	r22, r12
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     e5c:	b3 94       	inc	r11
     e5e:	f7 cf       	rjmp	.-18     	; 0xe4e <vfprintf+0x314>
     e60:	b2 14       	cp	r11, r2
     e62:	18 f4       	brcc	.+6      	; 0xe6a <vfprintf+0x330>
     e64:	2b 18       	sub	r2, r11
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x332>
     e68:	98 2c       	mov	r9, r8
     e6a:	21 2c       	mov	r2, r1
     e6c:	a4 fe       	sbrs	r10, 4
     e6e:	10 c0       	rjmp	.+32     	; 0xe90 <vfprintf+0x356>
     e70:	b6 01       	movw	r22, r12
     e72:	80 e3       	ldi	r24, 0x30	; 48
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     e7a:	a2 fe       	sbrs	r10, 2
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <vfprintf+0x372>
     e7e:	a1 fc       	sbrc	r10, 1
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <vfprintf+0x34e>
     e82:	88 e7       	ldi	r24, 0x78	; 120
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x352>
     e88:	88 e5       	ldi	r24, 0x58	; 88
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	b6 01       	movw	r22, r12
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <vfprintf+0x36e>
     e90:	8a 2d       	mov	r24, r10
     e92:	86 78       	andi	r24, 0x86	; 134
     e94:	59 f0       	breq	.+22     	; 0xeac <vfprintf+0x372>
     e96:	a1 fe       	sbrs	r10, 1
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x364>
     e9a:	8b e2       	ldi	r24, 0x2B	; 43
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <vfprintf+0x366>
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	a7 fc       	sbrc	r10, 7
     ea2:	8d e2       	ldi	r24, 0x2D	; 45
     ea4:	b6 01       	movw	r22, r12
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     eac:	89 14       	cp	r8, r9
     eae:	38 f4       	brcc	.+14     	; 0xebe <vfprintf+0x384>
     eb0:	b6 01       	movw	r22, r12
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     eba:	9a 94       	dec	r9
     ebc:	f7 cf       	rjmp	.-18     	; 0xeac <vfprintf+0x372>
     ebe:	8a 94       	dec	r8
     ec0:	f3 01       	movw	r30, r6
     ec2:	e8 0d       	add	r30, r8
     ec4:	f1 1d       	adc	r31, r1
     ec6:	80 81       	ld	r24, Z
     ec8:	b6 01       	movw	r22, r12
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     ed0:	81 10       	cpse	r8, r1
     ed2:	f5 cf       	rjmp	.-22     	; 0xebe <vfprintf+0x384>
     ed4:	22 20       	and	r2, r2
     ed6:	09 f4       	brne	.+2      	; 0xeda <vfprintf+0x3a0>
     ed8:	42 ce       	rjmp	.-892    	; 0xb5e <vfprintf+0x24>
     eda:	b6 01       	movw	r22, r12
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     ee4:	2a 94       	dec	r2
     ee6:	f6 cf       	rjmp	.-20     	; 0xed4 <vfprintf+0x39a>
     ee8:	f6 01       	movw	r30, r12
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	97 81       	ldd	r25, Z+7	; 0x07
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <vfprintf+0x3ba>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	2b 96       	adiw	r28, 0x0b	; 11
     ef6:	e2 e1       	ldi	r30, 0x12	; 18
     ef8:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__epilogue_restores__>

00000efc <strnlen_P>:
     efc:	fc 01       	movw	r30, r24
     efe:	05 90       	lpm	r0, Z+
     f00:	61 50       	subi	r22, 0x01	; 1
     f02:	70 40       	sbci	r23, 0x00	; 0
     f04:	01 10       	cpse	r0, r1
     f06:	d8 f7       	brcc	.-10     	; 0xefe <strnlen_P+0x2>
     f08:	80 95       	com	r24
     f0a:	90 95       	com	r25
     f0c:	8e 0f       	add	r24, r30
     f0e:	9f 1f       	adc	r25, r31
     f10:	08 95       	ret

00000f12 <strnlen>:
     f12:	fc 01       	movw	r30, r24
     f14:	61 50       	subi	r22, 0x01	; 1
     f16:	70 40       	sbci	r23, 0x00	; 0
     f18:	01 90       	ld	r0, Z+
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <fputc>:
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	fb 01       	movw	r30, r22
     f32:	23 81       	ldd	r18, Z+3	; 0x03
     f34:	21 fd       	sbrc	r18, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <fputc+0x16>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	2c c0       	rjmp	.+88     	; 0xf96 <fputc+0x6e>
     f3e:	22 ff       	sbrs	r18, 2
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <fputc+0x46>
     f42:	46 81       	ldd	r20, Z+6	; 0x06
     f44:	57 81       	ldd	r21, Z+7	; 0x07
     f46:	24 81       	ldd	r18, Z+4	; 0x04
     f48:	35 81       	ldd	r19, Z+5	; 0x05
     f4a:	42 17       	cp	r20, r18
     f4c:	53 07       	cpc	r21, r19
     f4e:	44 f4       	brge	.+16     	; 0xf60 <fputc+0x38>
     f50:	a0 81       	ld	r26, Z
     f52:	b1 81       	ldd	r27, Z+1	; 0x01
     f54:	9d 01       	movw	r18, r26
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	31 83       	std	Z+1, r19	; 0x01
     f5c:	20 83       	st	Z, r18
     f5e:	8c 93       	st	X, r24
     f60:	26 81       	ldd	r18, Z+6	; 0x06
     f62:	37 81       	ldd	r19, Z+7	; 0x07
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	37 83       	std	Z+7, r19	; 0x07
     f6a:	26 83       	std	Z+6, r18	; 0x06
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <fputc+0x6e>
     f6e:	8b 01       	movw	r16, r22
     f70:	ec 01       	movw	r28, r24
     f72:	fb 01       	movw	r30, r22
     f74:	00 84       	ldd	r0, Z+8	; 0x08
     f76:	f1 85       	ldd	r31, Z+9	; 0x09
     f78:	e0 2d       	mov	r30, r0
     f7a:	09 95       	icall
     f7c:	89 2b       	or	r24, r25
     f7e:	e1 f6       	brne	.-72     	; 0xf38 <fputc+0x10>
     f80:	d8 01       	movw	r26, r16
     f82:	16 96       	adiw	r26, 0x06	; 6
     f84:	8d 91       	ld	r24, X+
     f86:	9c 91       	ld	r25, X
     f88:	17 97       	sbiw	r26, 0x07	; 7
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	17 96       	adiw	r26, 0x07	; 7
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	16 97       	sbiw	r26, 0x06	; 6
     f94:	ce 01       	movw	r24, r28
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <__ultoa_invert>:
     fa0:	fa 01       	movw	r30, r20
     fa2:	aa 27       	eor	r26, r26
     fa4:	28 30       	cpi	r18, 0x08	; 8
     fa6:	51 f1       	breq	.+84     	; 0xffc <__ultoa_invert+0x5c>
     fa8:	20 31       	cpi	r18, 0x10	; 16
     faa:	81 f1       	breq	.+96     	; 0x100c <__ultoa_invert+0x6c>
     fac:	e8 94       	clt
     fae:	6f 93       	push	r22
     fb0:	6e 7f       	andi	r22, 0xFE	; 254
     fb2:	6e 5f       	subi	r22, 0xFE	; 254
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	af 4f       	sbci	r26, 0xFF	; 255
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	3e d0       	rcall	.+124    	; 0x103c <__ultoa_invert+0x9c>
     fc0:	b4 e0       	ldi	r27, 0x04	; 4
     fc2:	3c d0       	rcall	.+120    	; 0x103c <__ultoa_invert+0x9c>
     fc4:	67 0f       	add	r22, r23
     fc6:	78 1f       	adc	r23, r24
     fc8:	89 1f       	adc	r24, r25
     fca:	9a 1f       	adc	r25, r26
     fcc:	a1 1d       	adc	r26, r1
     fce:	68 0f       	add	r22, r24
     fd0:	79 1f       	adc	r23, r25
     fd2:	8a 1f       	adc	r24, r26
     fd4:	91 1d       	adc	r25, r1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	6a 0f       	add	r22, r26
     fda:	71 1d       	adc	r23, r1
     fdc:	81 1d       	adc	r24, r1
     fde:	91 1d       	adc	r25, r1
     fe0:	a1 1d       	adc	r26, r1
     fe2:	20 d0       	rcall	.+64     	; 0x1024 <__ultoa_invert+0x84>
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <__ultoa_invert+0x48>
     fe6:	68 94       	set
     fe8:	3f 91       	pop	r19
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	26 9f       	mul	r18, r22
     fee:	11 24       	eor	r1, r1
     ff0:	30 19       	sub	r19, r0
     ff2:	30 5d       	subi	r19, 0xD0	; 208
     ff4:	31 93       	st	Z+, r19
     ff6:	de f6       	brtc	.-74     	; 0xfae <__ultoa_invert+0xe>
     ff8:	cf 01       	movw	r24, r30
     ffa:	08 95       	ret
     ffc:	46 2f       	mov	r20, r22
     ffe:	47 70       	andi	r20, 0x07	; 7
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	41 93       	st	Z+, r20
    1004:	b3 e0       	ldi	r27, 0x03	; 3
    1006:	0f d0       	rcall	.+30     	; 0x1026 <__ultoa_invert+0x86>
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0x5c>
    100a:	f6 cf       	rjmp	.-20     	; 0xff8 <__ultoa_invert+0x58>
    100c:	46 2f       	mov	r20, r22
    100e:	4f 70       	andi	r20, 0x0F	; 15
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	4a 33       	cpi	r20, 0x3A	; 58
    1014:	18 f0       	brcs	.+6      	; 0x101c <__ultoa_invert+0x7c>
    1016:	49 5d       	subi	r20, 0xD9	; 217
    1018:	31 fd       	sbrc	r19, 1
    101a:	40 52       	subi	r20, 0x20	; 32
    101c:	41 93       	st	Z+, r20
    101e:	02 d0       	rcall	.+4      	; 0x1024 <__ultoa_invert+0x84>
    1020:	a9 f7       	brne	.-22     	; 0x100c <__ultoa_invert+0x6c>
    1022:	ea cf       	rjmp	.-44     	; 0xff8 <__ultoa_invert+0x58>
    1024:	b4 e0       	ldi	r27, 0x04	; 4
    1026:	a6 95       	lsr	r26
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__ultoa_invert+0x86>
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	08 95       	ret
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	0a 2e       	mov	r0, r26
    1042:	06 94       	lsr	r0
    1044:	57 95       	ror	r21
    1046:	47 95       	ror	r20
    1048:	37 95       	ror	r19
    104a:	27 95       	ror	r18
    104c:	ba 95       	dec	r27
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__ultoa_invert+0xa2>
    1050:	62 0f       	add	r22, r18
    1052:	73 1f       	adc	r23, r19
    1054:	84 1f       	adc	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	a0 1d       	adc	r26, r0
    105a:	08 95       	ret

0000105c <__prologue_saves__>:
    105c:	2f 92       	push	r2
    105e:	3f 92       	push	r3
    1060:	4f 92       	push	r4
    1062:	5f 92       	push	r5
    1064:	6f 92       	push	r6
    1066:	7f 92       	push	r7
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	ca 1b       	sub	r28, r26
    1086:	db 0b       	sbc	r29, r27
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	09 94       	ijmp

00001094 <__epilogue_restores__>:
    1094:	2a 88       	ldd	r2, Y+18	; 0x12
    1096:	39 88       	ldd	r3, Y+17	; 0x11
    1098:	48 88       	ldd	r4, Y+16	; 0x10
    109a:	5f 84       	ldd	r5, Y+15	; 0x0f
    109c:	6e 84       	ldd	r6, Y+14	; 0x0e
    109e:	7d 84       	ldd	r7, Y+13	; 0x0d
    10a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10a6:	b9 84       	ldd	r11, Y+9	; 0x09
    10a8:	c8 84       	ldd	r12, Y+8	; 0x08
    10aa:	df 80       	ldd	r13, Y+7	; 0x07
    10ac:	ee 80       	ldd	r14, Y+6	; 0x06
    10ae:	fd 80       	ldd	r15, Y+5	; 0x05
    10b0:	0c 81       	ldd	r16, Y+4	; 0x04
    10b2:	1b 81       	ldd	r17, Y+3	; 0x03
    10b4:	aa 81       	ldd	r26, Y+2	; 0x02
    10b6:	b9 81       	ldd	r27, Y+1	; 0x01
    10b8:	ce 0f       	add	r28, r30
    10ba:	d1 1d       	adc	r29, r1
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	ed 01       	movw	r28, r26
    10c8:	08 95       	ret

000010ca <_exit>:
    10ca:	f8 94       	cli

000010cc <__stop_program>:
    10cc:	ff cf       	rjmp	.-2      	; 0x10cc <__stop_program>
