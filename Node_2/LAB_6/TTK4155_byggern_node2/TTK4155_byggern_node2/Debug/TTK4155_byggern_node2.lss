
TTK4155_byggern_node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080c70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  000810a4  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081128  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081528  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000055b2  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f3b  00000000  00000000  00025a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000de4  00000000  00000000  000269a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000188  00000000  00000000  00027787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0002790f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000129dc  00000000  00000000  00027a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003c5e  00000000  00000000  0003a423  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055b42  00000000  00000000  0003e081  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004d8  00000000  00000000  00093bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 2d 04 08 00 29 04 08 00 29 04 08 00     ... -...)...)...
   80010:	29 04 08 00 29 04 08 00 29 04 08 00 00 00 00 00     )...)...).......
	...
   8002c:	29 04 08 00 29 04 08 00 00 00 00 00 29 04 08 00     )...).......)...
   8003c:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   8004c:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   8005c:	29 04 08 00 79 09 08 00 29 04 08 00 00 00 00 00     )...y...).......
   8006c:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
	...
   80084:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   80094:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   800a4:	00 00 00 00 29 04 08 00 29 04 08 00 29 04 08 00     ....)...)...)...
   800b4:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   800c4:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   800d4:	29 04 08 00 29 04 08 00 29 04 08 00 29 04 08 00     )...)...)...)...
   800e4:	29 04 08 00 29 04 08 00 65 03 08 00 29 04 08 00     )...)...e...)...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080c70 	.word	0x00080c70

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080c70 	.word	0x00080c70
   80154:	20000438 	.word	0x20000438
   80158:	00080c70 	.word	0x00080c70
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	// br = Baudrate
	// num_tx_mb = number of transmit buffers
	// num_rx_mb = number of receive buffers
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d036      	beq.n	802d6 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80268:	8803      	ldrh	r3, [r0, #0]
   8026a:	4a1c      	ldr	r2, [pc, #112]	; (802dc <can_send+0x88>)
   8026c:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   80270:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80274:	014b      	lsls	r3, r1, #5
   80276:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8027e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 8){
   80282:	7883      	ldrb	r3, [r0, #2]
   80284:	2b08      	cmp	r3, #8
   80286:	d901      	bls.n	8028c <can_send+0x38>
			can_msg->data_length = 8;
   80288:	2308      	movs	r3, #8
   8028a:	7083      	strb	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   8028c:	7982      	ldrb	r2, [r0, #6]
   8028e:	7943      	ldrb	r3, [r0, #5]
   80290:	041b      	lsls	r3, r3, #16
   80292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80296:	7902      	ldrb	r2, [r0, #4]
   80298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8029c:	78c2      	ldrb	r2, [r0, #3]
   8029e:	4313      	orrs	r3, r2
   802a0:	0149      	lsls	r1, r1, #5
   802a2:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802a6:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   802aa:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   802ae:	7a82      	ldrb	r2, [r0, #10]
   802b0:	7a43      	ldrb	r3, [r0, #9]
   802b2:	041b      	lsls	r3, r3, #16
   802b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802b8:	7a02      	ldrb	r2, [r0, #8]
   802ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802be:	79c2      	ldrb	r2, [r0, #7]
   802c0:	4313      	orrs	r3, r2
   802c2:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   802c6:	7883      	ldrb	r3, [r0, #2]
   802c8:	041b      	lsls	r3, r3, #16
   802ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802ce:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d2:	2000      	movs	r0, #0
   802d4:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   802d6:	2001      	movs	r0, #1
	}
	
}
   802d8:	4770      	bx	lr
   802da:	bf00      	nop
   802dc:	1ffc0000 	.word	0x1ffc0000

000802e0 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802e0:	014b      	lsls	r3, r1, #5
   802e2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802e6:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802ee:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802f2:	d033      	beq.n	8035c <can_receive+0x7c>
{
   802f4:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802f6:	014b      	lsls	r3, r1, #5
   802f8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802fc:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80300:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80304:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80308:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8030c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80310:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80312:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80316:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8031a:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8031c:	2300      	movs	r3, #0
   8031e:	e003      	b.n	80328 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80320:	18c6      	adds	r6, r0, r3
   80322:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80324:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   80326:	3301      	adds	r3, #1
   80328:	42ab      	cmp	r3, r5
   8032a:	da05      	bge.n	80338 <can_receive+0x58>
			if(i < 4)
   8032c:	2b03      	cmp	r3, #3
   8032e:	dcf7      	bgt.n	80320 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   80330:	18c6      	adds	r6, r0, r3
   80332:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   80334:	0a24      	lsrs	r4, r4, #8
   80336:	e7f6      	b.n	80326 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80338:	4b09      	ldr	r3, [pc, #36]	; (80360 <can_receive+0x80>)
   8033a:	f101 0210 	add.w	r2, r1, #16
   8033e:	0152      	lsls	r2, r2, #5
   80340:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80344:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80346:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   8034a:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8034e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80352:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80356:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80358:	bc70      	pop	{r4, r5, r6}
   8035a:	4770      	bx	lr
		return 1;
   8035c:	2001      	movs	r0, #1
   8035e:	4770      	bx	lr
   80360:	400b4000 	.word	0x400b4000

00080364 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80364:	b530      	push	{r4, r5, lr}
   80366:	b085      	sub	sp, #20
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
   80368:	4824      	ldr	r0, [pc, #144]	; (803fc <CAN0_Handler+0x98>)
   8036a:	4b25      	ldr	r3, [pc, #148]	; (80400 <CAN0_Handler+0x9c>)
   8036c:	4798      	blx	r3
	char can_sr = CAN0->CAN_SR; 
   8036e:	4b25      	ldr	r3, [pc, #148]	; (80404 <CAN0_Handler+0xa0>)
   80370:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80372:	f015 0f06 	tst.w	r5, #6
   80376:	d02c      	beq.n	803d2 <CAN0_Handler+0x6e>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80378:	f015 0f02 	tst.w	r5, #2
   8037c:	d111      	bne.n	803a2 <CAN0_Handler+0x3e>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8037e:	f015 0f04 	tst.w	r5, #4
   80382:	d013      	beq.n	803ac <CAN0_Handler+0x48>
		
		{
			can_receive(&message, 2);
   80384:	2102      	movs	r1, #2
   80386:	a801      	add	r0, sp, #4
   80388:	4b1f      	ldr	r3, [pc, #124]	; (80408 <CAN0_Handler+0xa4>)
   8038a:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8038c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80390:	481e      	ldr	r0, [pc, #120]	; (8040c <CAN0_Handler+0xa8>)
   80392:	4c1b      	ldr	r4, [pc, #108]	; (80400 <CAN0_Handler+0x9c>)
   80394:	47a0      	blx	r4
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80396:	f89d 1006 	ldrb.w	r1, [sp, #6]
   8039a:	481d      	ldr	r0, [pc, #116]	; (80410 <CAN0_Handler+0xac>)
   8039c:	47a0      	blx	r4
		for (int i = 0; i < message.data_length; i++)
   8039e:	2400      	movs	r4, #0
   803a0:	e010      	b.n	803c4 <CAN0_Handler+0x60>
			can_receive(&message, 1);
   803a2:	2101      	movs	r1, #1
   803a4:	a801      	add	r0, sp, #4
   803a6:	4b18      	ldr	r3, [pc, #96]	; (80408 <CAN0_Handler+0xa4>)
   803a8:	4798      	blx	r3
   803aa:	e7ef      	b.n	8038c <CAN0_Handler+0x28>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803ac:	4819      	ldr	r0, [pc, #100]	; (80414 <CAN0_Handler+0xb0>)
   803ae:	4b14      	ldr	r3, [pc, #80]	; (80400 <CAN0_Handler+0x9c>)
   803b0:	4798      	blx	r3
   803b2:	e7eb      	b.n	8038c <CAN0_Handler+0x28>
		{
			int8_t value = message.data[i];
   803b4:	ab04      	add	r3, sp, #16
   803b6:	4423      	add	r3, r4
			if(DEBUG_INTERRUPT)printf("%d ", value);
   803b8:	f913 1c09 	ldrsb.w	r1, [r3, #-9]
   803bc:	4816      	ldr	r0, [pc, #88]	; (80418 <CAN0_Handler+0xb4>)
   803be:	4b10      	ldr	r3, [pc, #64]	; (80400 <CAN0_Handler+0x9c>)
   803c0:	4798      	blx	r3
		for (int i = 0; i < message.data_length; i++)
   803c2:	3401      	adds	r4, #1
   803c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   803c8:	429c      	cmp	r4, r3
   803ca:	dbf3      	blt.n	803b4 <CAN0_Handler+0x50>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
   803cc:	4813      	ldr	r0, [pc, #76]	; (8041c <CAN0_Handler+0xb8>)
   803ce:	4b0c      	ldr	r3, [pc, #48]	; (80400 <CAN0_Handler+0x9c>)
   803d0:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   803d2:	f015 0f01 	tst.w	r5, #1
   803d6:	d109      	bne.n	803ec <CAN0_Handler+0x88>
	if(can_sr & CAN_SR_TOVF)
	{
		if(DEBUG_INTERRUPT)printf("CAN0 timer overflow\n\r");

	}
	printf("\n\r");
   803d8:	4810      	ldr	r0, [pc, #64]	; (8041c <CAN0_Handler+0xb8>)
   803da:	4b09      	ldr	r3, [pc, #36]	; (80400 <CAN0_Handler+0x9c>)
   803dc:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803de:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803e2:	4b0f      	ldr	r3, [pc, #60]	; (80420 <CAN0_Handler+0xbc>)
   803e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803e8:	b005      	add	sp, #20
   803ea:	bd30      	pop	{r4, r5, pc}
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
   803ec:	480d      	ldr	r0, [pc, #52]	; (80424 <CAN0_Handler+0xc0>)
   803ee:	4b04      	ldr	r3, [pc, #16]	; (80400 <CAN0_Handler+0x9c>)
   803f0:	4798      	blx	r3
		CAN0->CAN_IDR = CAN_IER_MB0;
   803f2:	2201      	movs	r2, #1
   803f4:	4b03      	ldr	r3, [pc, #12]	; (80404 <CAN0_Handler+0xa0>)
   803f6:	609a      	str	r2, [r3, #8]
   803f8:	e7ee      	b.n	803d8 <CAN0_Handler+0x74>
   803fa:	bf00      	nop
   803fc:	00080b50 	.word	0x00080b50
   80400:	000808c9 	.word	0x000808c9
   80404:	400b4000 	.word	0x400b4000
   80408:	000802e1 	.word	0x000802e1
   8040c:	00080b90 	.word	0x00080b90
   80410:	00080ba4 	.word	0x00080ba4
   80414:	00080b64 	.word	0x00080b64
   80418:	00080bc0 	.word	0x00080bc0
   8041c:	00080b8c 	.word	0x00080b8c
   80420:	e000e100 	.word	0xe000e100
   80424:	00080bc4 	.word	0x00080bc4

00080428 <Dummy_Handler>:
   80428:	e7fe      	b.n	80428 <Dummy_Handler>
	...

0008042c <Reset_Handler>:
   8042c:	b508      	push	{r3, lr}
   8042e:	4b11      	ldr	r3, [pc, #68]	; (80474 <Reset_Handler+0x48>)
   80430:	4a11      	ldr	r2, [pc, #68]	; (80478 <Reset_Handler+0x4c>)
   80432:	429a      	cmp	r2, r3
   80434:	d009      	beq.n	8044a <Reset_Handler+0x1e>
   80436:	4b0f      	ldr	r3, [pc, #60]	; (80474 <Reset_Handler+0x48>)
   80438:	4a0f      	ldr	r2, [pc, #60]	; (80478 <Reset_Handler+0x4c>)
   8043a:	e003      	b.n	80444 <Reset_Handler+0x18>
   8043c:	6811      	ldr	r1, [r2, #0]
   8043e:	6019      	str	r1, [r3, #0]
   80440:	3304      	adds	r3, #4
   80442:	3204      	adds	r2, #4
   80444:	490d      	ldr	r1, [pc, #52]	; (8047c <Reset_Handler+0x50>)
   80446:	428b      	cmp	r3, r1
   80448:	d3f8      	bcc.n	8043c <Reset_Handler+0x10>
   8044a:	4b0d      	ldr	r3, [pc, #52]	; (80480 <Reset_Handler+0x54>)
   8044c:	e002      	b.n	80454 <Reset_Handler+0x28>
   8044e:	2200      	movs	r2, #0
   80450:	601a      	str	r2, [r3, #0]
   80452:	3304      	adds	r3, #4
   80454:	4a0b      	ldr	r2, [pc, #44]	; (80484 <Reset_Handler+0x58>)
   80456:	4293      	cmp	r3, r2
   80458:	d3f9      	bcc.n	8044e <Reset_Handler+0x22>
   8045a:	4b0b      	ldr	r3, [pc, #44]	; (80488 <Reset_Handler+0x5c>)
   8045c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80464:	4a09      	ldr	r2, [pc, #36]	; (8048c <Reset_Handler+0x60>)
   80466:	6093      	str	r3, [r2, #8]
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <Reset_Handler+0x64>)
   8046a:	4798      	blx	r3
   8046c:	4b09      	ldr	r3, [pc, #36]	; (80494 <Reset_Handler+0x68>)
   8046e:	4798      	blx	r3
   80470:	e7fe      	b.n	80470 <Reset_Handler+0x44>
   80472:	bf00      	nop
   80474:	20000000 	.word	0x20000000
   80478:	00080c70 	.word	0x00080c70
   8047c:	20000434 	.word	0x20000434
   80480:	20000434 	.word	0x20000434
   80484:	200004b8 	.word	0x200004b8
   80488:	00080000 	.word	0x00080000
   8048c:	e000ed00 	.word	0xe000ed00
   80490:	000809e1 	.word	0x000809e1
   80494:	00080575 	.word	0x00080575

00080498 <SystemInit>:
   80498:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8049c:	4a20      	ldr	r2, [pc, #128]	; (80520 <SystemInit+0x88>)
   8049e:	6013      	str	r3, [r2, #0]
   804a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804a4:	6013      	str	r3, [r2, #0]
   804a6:	4b1f      	ldr	r3, [pc, #124]	; (80524 <SystemInit+0x8c>)
   804a8:	6a1b      	ldr	r3, [r3, #32]
   804aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804ae:	d107      	bne.n	804c0 <SystemInit+0x28>
   804b0:	4a1d      	ldr	r2, [pc, #116]	; (80528 <SystemInit+0x90>)
   804b2:	4b1c      	ldr	r3, [pc, #112]	; (80524 <SystemInit+0x8c>)
   804b4:	621a      	str	r2, [r3, #32]
   804b6:	4b1b      	ldr	r3, [pc, #108]	; (80524 <SystemInit+0x8c>)
   804b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ba:	f013 0f01 	tst.w	r3, #1
   804be:	d0fa      	beq.n	804b6 <SystemInit+0x1e>
   804c0:	4a1a      	ldr	r2, [pc, #104]	; (8052c <SystemInit+0x94>)
   804c2:	4b18      	ldr	r3, [pc, #96]	; (80524 <SystemInit+0x8c>)
   804c4:	621a      	str	r2, [r3, #32]
   804c6:	4b17      	ldr	r3, [pc, #92]	; (80524 <SystemInit+0x8c>)
   804c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804ce:	d0fa      	beq.n	804c6 <SystemInit+0x2e>
   804d0:	4a14      	ldr	r2, [pc, #80]	; (80524 <SystemInit+0x8c>)
   804d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804d4:	f023 0303 	bic.w	r3, r3, #3
   804d8:	f043 0301 	orr.w	r3, r3, #1
   804dc:	6313      	str	r3, [r2, #48]	; 0x30
   804de:	4b11      	ldr	r3, [pc, #68]	; (80524 <SystemInit+0x8c>)
   804e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804e2:	f013 0f08 	tst.w	r3, #8
   804e6:	d0fa      	beq.n	804de <SystemInit+0x46>
   804e8:	4a11      	ldr	r2, [pc, #68]	; (80530 <SystemInit+0x98>)
   804ea:	4b0e      	ldr	r3, [pc, #56]	; (80524 <SystemInit+0x8c>)
   804ec:	629a      	str	r2, [r3, #40]	; 0x28
   804ee:	4b0d      	ldr	r3, [pc, #52]	; (80524 <SystemInit+0x8c>)
   804f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f2:	f013 0f02 	tst.w	r3, #2
   804f6:	d0fa      	beq.n	804ee <SystemInit+0x56>
   804f8:	2211      	movs	r2, #17
   804fa:	4b0a      	ldr	r3, [pc, #40]	; (80524 <SystemInit+0x8c>)
   804fc:	631a      	str	r2, [r3, #48]	; 0x30
   804fe:	4b09      	ldr	r3, [pc, #36]	; (80524 <SystemInit+0x8c>)
   80500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80502:	f013 0f08 	tst.w	r3, #8
   80506:	d0fa      	beq.n	804fe <SystemInit+0x66>
   80508:	2212      	movs	r2, #18
   8050a:	4b06      	ldr	r3, [pc, #24]	; (80524 <SystemInit+0x8c>)
   8050c:	631a      	str	r2, [r3, #48]	; 0x30
   8050e:	4b05      	ldr	r3, [pc, #20]	; (80524 <SystemInit+0x8c>)
   80510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80512:	f013 0f08 	tst.w	r3, #8
   80516:	d0fa      	beq.n	8050e <SystemInit+0x76>
   80518:	4a06      	ldr	r2, [pc, #24]	; (80534 <SystemInit+0x9c>)
   8051a:	4b07      	ldr	r3, [pc, #28]	; (80538 <SystemInit+0xa0>)
   8051c:	601a      	str	r2, [r3, #0]
   8051e:	4770      	bx	lr
   80520:	400e0a00 	.word	0x400e0a00
   80524:	400e0600 	.word	0x400e0600
   80528:	00370809 	.word	0x00370809
   8052c:	01370809 	.word	0x01370809
   80530:	200d3f01 	.word	0x200d3f01
   80534:	0501bd00 	.word	0x0501bd00
   80538:	20000000 	.word	0x20000000

0008053c <inits>:
#include "CAN/can_controller.h"
#include "CAN/can_interrupt.h"

#define CAN_BAUDRATE_REG 0x290165

void inits(){
   8053c:	b508      	push	{r3, lr}
	SystemInit();
   8053e:	4b07      	ldr	r3, [pc, #28]	; (8055c <inits+0x20>)
   80540:	4798      	blx	r3
	LEDs_init();
   80542:	4b07      	ldr	r3, [pc, #28]	; (80560 <inits+0x24>)
   80544:	4798      	blx	r3
	configure_uart();	
   80546:	4b07      	ldr	r3, [pc, #28]	; (80564 <inits+0x28>)
   80548:	4798      	blx	r3
	can_init_def_tx_rx_mb(CAN_BAUDRATE_REG);
   8054a:	4807      	ldr	r0, [pc, #28]	; (80568 <inits+0x2c>)
   8054c:	4b07      	ldr	r3, [pc, #28]	; (8056c <inits+0x30>)
   8054e:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
   80550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80554:	4b06      	ldr	r3, [pc, #24]	; (80570 <inits+0x34>)
   80556:	605a      	str	r2, [r3, #4]
   80558:	bd08      	pop	{r3, pc}
   8055a:	bf00      	nop
   8055c:	00080499 	.word	0x00080499
   80560:	000805b5 	.word	0x000805b5
   80564:	000808ed 	.word	0x000808ed
   80568:	00290165 	.word	0x00290165
   8056c:	00080245 	.word	0x00080245
   80570:	400e1a50 	.word	0x400e1a50

00080574 <main>:
}

int main(void)
{
   80574:	b500      	push	{lr}
   80576:	b085      	sub	sp, #20
	inits();
   80578:	4b08      	ldr	r3, [pc, #32]	; (8059c <main+0x28>)
   8057a:	4798      	blx	r3
	CAN_MESSAGE CAN_test = {
   8057c:	4a08      	ldr	r2, [pc, #32]	; (805a0 <main+0x2c>)
   8057e:	ab01      	add	r3, sp, #4
   80580:	ca07      	ldmia	r2, {r0, r1, r2}
   80582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.id = 818,
		.data_length = 8,
		.data = {77, 101, 108, 100, 105, 110, 103, 33}
	};

	can_send(&CAN_test, 0);
   80586:	2100      	movs	r1, #0
   80588:	4618      	mov	r0, r3
   8058a:	4b06      	ldr	r3, [pc, #24]	; (805a4 <main+0x30>)
   8058c:	4798      	blx	r3
	printf("Heiheihallo heiheiheibrfgmbpreogmmrgklegmrnoigm\n\r");
   8058e:	4806      	ldr	r0, [pc, #24]	; (805a8 <main+0x34>)
   80590:	4b06      	ldr	r3, [pc, #24]	; (805ac <main+0x38>)
   80592:	4798      	blx	r3
    while (1) 
    {
		LEDs_blink();
   80594:	4b06      	ldr	r3, [pc, #24]	; (805b0 <main+0x3c>)
   80596:	4798      	blx	r3
   80598:	e7fc      	b.n	80594 <main+0x20>
   8059a:	bf00      	nop
   8059c:	0008053d 	.word	0x0008053d
   805a0:	00080be0 	.word	0x00080be0
   805a4:	00080255 	.word	0x00080255
   805a8:	00080bec 	.word	0x00080bec
   805ac:	000808c9 	.word	0x000808c9
   805b0:	000805e5 	.word	0x000805e5

000805b4 <LEDs_init>:
   805b4:	4b08      	ldr	r3, [pc, #32]	; (805d8 <LEDs_init+0x24>)
   805b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   805ba:	6019      	str	r1, [r3, #0]
   805bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   805c0:	601a      	str	r2, [r3, #0]
   805c2:	6119      	str	r1, [r3, #16]
   805c4:	611a      	str	r2, [r3, #16]
   805c6:	6619      	str	r1, [r3, #96]	; 0x60
   805c8:	661a      	str	r2, [r3, #96]	; 0x60
   805ca:	4b04      	ldr	r3, [pc, #16]	; (805dc <LEDs_init+0x28>)
   805cc:	4a04      	ldr	r2, [pc, #16]	; (805e0 <LEDs_init+0x2c>)
   805ce:	605a      	str	r2, [r3, #4]
   805d0:	2201      	movs	r2, #1
   805d2:	601a      	str	r2, [r3, #0]
   805d4:	4770      	bx	lr
   805d6:	bf00      	nop
   805d8:	400e0e00 	.word	0x400e0e00
   805dc:	e000e010 	.word	0xe000e010
   805e0:	007fffff 	.word	0x007fffff

000805e4 <LEDs_blink>:
   805e4:	4b12      	ldr	r3, [pc, #72]	; (80630 <LEDs_blink+0x4c>)
   805e6:	681b      	ldr	r3, [r3, #0]
   805e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   805ec:	d014      	beq.n	80618 <LEDs_blink+0x34>
   805ee:	4b11      	ldr	r3, [pc, #68]	; (80634 <LEDs_blink+0x50>)
   805f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   805f2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   805f6:	d010      	beq.n	8061a <LEDs_blink+0x36>
   805f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   805fc:	4b0d      	ldr	r3, [pc, #52]	; (80634 <LEDs_blink+0x50>)
   805fe:	635a      	str	r2, [r3, #52]	; 0x34
   80600:	4b0c      	ldr	r3, [pc, #48]	; (80634 <LEDs_blink+0x50>)
   80602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80604:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80608:	d00c      	beq.n	80624 <LEDs_blink+0x40>
   8060a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   8060e:	4b09      	ldr	r3, [pc, #36]	; (80634 <LEDs_blink+0x50>)
   80610:	635a      	str	r2, [r3, #52]	; 0x34
   80612:	2200      	movs	r2, #0
   80614:	4b06      	ldr	r3, [pc, #24]	; (80630 <LEDs_blink+0x4c>)
   80616:	609a      	str	r2, [r3, #8]
   80618:	4770      	bx	lr
   8061a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8061e:	4b05      	ldr	r3, [pc, #20]	; (80634 <LEDs_blink+0x50>)
   80620:	631a      	str	r2, [r3, #48]	; 0x30
   80622:	e7ed      	b.n	80600 <LEDs_blink+0x1c>
   80624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   80628:	4b02      	ldr	r3, [pc, #8]	; (80634 <LEDs_blink+0x50>)
   8062a:	631a      	str	r2, [r3, #48]	; 0x30
   8062c:	e7f1      	b.n	80612 <LEDs_blink+0x2e>
   8062e:	bf00      	nop
   80630:	e000e010 	.word	0xe000e010
   80634:	400e0e00 	.word	0x400e0e00

00080638 <printchar>:
   80638:	b508      	push	{r3, lr}
   8063a:	b2c8      	uxtb	r0, r1
   8063c:	4b01      	ldr	r3, [pc, #4]	; (80644 <printchar+0xc>)
   8063e:	4798      	blx	r3
   80640:	bd08      	pop	{r3, pc}
   80642:	bf00      	nop
   80644:	00080955 	.word	0x00080955

00080648 <prints>:
   80648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8064c:	4607      	mov	r7, r0
   8064e:	460e      	mov	r6, r1
   80650:	1e15      	subs	r5, r2, #0
   80652:	dd02      	ble.n	8065a <prints+0x12>
   80654:	460a      	mov	r2, r1
   80656:	2100      	movs	r1, #0
   80658:	e004      	b.n	80664 <prints+0x1c>
   8065a:	f04f 0820 	mov.w	r8, #32
   8065e:	e00e      	b.n	8067e <prints+0x36>
   80660:	3101      	adds	r1, #1
   80662:	3201      	adds	r2, #1
   80664:	7810      	ldrb	r0, [r2, #0]
   80666:	2800      	cmp	r0, #0
   80668:	d1fa      	bne.n	80660 <prints+0x18>
   8066a:	42a9      	cmp	r1, r5
   8066c:	da01      	bge.n	80672 <prints+0x2a>
   8066e:	1a6d      	subs	r5, r5, r1
   80670:	e000      	b.n	80674 <prints+0x2c>
   80672:	2500      	movs	r5, #0
   80674:	f013 0f02 	tst.w	r3, #2
   80678:	d106      	bne.n	80688 <prints+0x40>
   8067a:	f04f 0820 	mov.w	r8, #32
   8067e:	f013 0401 	ands.w	r4, r3, #1
   80682:	d00a      	beq.n	8069a <prints+0x52>
   80684:	2400      	movs	r4, #0
   80686:	e010      	b.n	806aa <prints+0x62>
   80688:	f04f 0830 	mov.w	r8, #48	; 0x30
   8068c:	e7f7      	b.n	8067e <prints+0x36>
   8068e:	4641      	mov	r1, r8
   80690:	4638      	mov	r0, r7
   80692:	4b0d      	ldr	r3, [pc, #52]	; (806c8 <prints+0x80>)
   80694:	4798      	blx	r3
   80696:	3401      	adds	r4, #1
   80698:	3d01      	subs	r5, #1
   8069a:	2d00      	cmp	r5, #0
   8069c:	dcf7      	bgt.n	8068e <prints+0x46>
   8069e:	e004      	b.n	806aa <prints+0x62>
   806a0:	4638      	mov	r0, r7
   806a2:	4b09      	ldr	r3, [pc, #36]	; (806c8 <prints+0x80>)
   806a4:	4798      	blx	r3
   806a6:	3401      	adds	r4, #1
   806a8:	3601      	adds	r6, #1
   806aa:	7831      	ldrb	r1, [r6, #0]
   806ac:	2900      	cmp	r1, #0
   806ae:	d1f7      	bne.n	806a0 <prints+0x58>
   806b0:	e005      	b.n	806be <prints+0x76>
   806b2:	4641      	mov	r1, r8
   806b4:	4638      	mov	r0, r7
   806b6:	4b04      	ldr	r3, [pc, #16]	; (806c8 <prints+0x80>)
   806b8:	4798      	blx	r3
   806ba:	3401      	adds	r4, #1
   806bc:	3d01      	subs	r5, #1
   806be:	2d00      	cmp	r5, #0
   806c0:	dcf7      	bgt.n	806b2 <prints+0x6a>
   806c2:	4620      	mov	r0, r4
   806c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806c8:	00080639 	.word	0x00080639

000806cc <printi>:
   806cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   806ce:	b085      	sub	sp, #20
   806d0:	4607      	mov	r7, r0
   806d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   806d4:	b151      	cbz	r1, 806ec <printi+0x20>
   806d6:	461e      	mov	r6, r3
   806d8:	460c      	mov	r4, r1
   806da:	b113      	cbz	r3, 806e2 <printi+0x16>
   806dc:	2a0a      	cmp	r2, #10
   806de:	d012      	beq.n	80706 <printi+0x3a>
   806e0:	2600      	movs	r6, #0
   806e2:	ad04      	add	r5, sp, #16
   806e4:	2300      	movs	r3, #0
   806e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
   806ea:	e018      	b.n	8071e <printi+0x52>
   806ec:	2330      	movs	r3, #48	; 0x30
   806ee:	f88d 3004 	strb.w	r3, [sp, #4]
   806f2:	2300      	movs	r3, #0
   806f4:	f88d 3005 	strb.w	r3, [sp, #5]
   806f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806fc:	a901      	add	r1, sp, #4
   806fe:	4638      	mov	r0, r7
   80700:	4c1b      	ldr	r4, [pc, #108]	; (80770 <printi+0xa4>)
   80702:	47a0      	blx	r4
   80704:	e029      	b.n	8075a <printi+0x8e>
   80706:	2900      	cmp	r1, #0
   80708:	db01      	blt.n	8070e <printi+0x42>
   8070a:	2600      	movs	r6, #0
   8070c:	e7e9      	b.n	806e2 <printi+0x16>
   8070e:	424c      	negs	r4, r1
   80710:	2601      	movs	r6, #1
   80712:	e7e6      	b.n	806e2 <printi+0x16>
   80714:	3330      	adds	r3, #48	; 0x30
   80716:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8071a:	fbb4 f4f2 	udiv	r4, r4, r2
   8071e:	b14c      	cbz	r4, 80734 <printi+0x68>
   80720:	fbb4 f3f2 	udiv	r3, r4, r2
   80724:	fb02 4313 	mls	r3, r2, r3, r4
   80728:	2b09      	cmp	r3, #9
   8072a:	ddf3      	ble.n	80714 <printi+0x48>
   8072c:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80730:	440b      	add	r3, r1
   80732:	e7ef      	b.n	80714 <printi+0x48>
   80734:	b156      	cbz	r6, 8074c <printi+0x80>
   80736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80738:	b11b      	cbz	r3, 80742 <printi+0x76>
   8073a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8073c:	f013 0f02 	tst.w	r3, #2
   80740:	d10d      	bne.n	8075e <printi+0x92>
   80742:	232d      	movs	r3, #45	; 0x2d
   80744:	f805 3c01 	strb.w	r3, [r5, #-1]
   80748:	3d01      	subs	r5, #1
   8074a:	2600      	movs	r6, #0
   8074c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8074e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80750:	4629      	mov	r1, r5
   80752:	4638      	mov	r0, r7
   80754:	4c06      	ldr	r4, [pc, #24]	; (80770 <printi+0xa4>)
   80756:	47a0      	blx	r4
   80758:	4430      	add	r0, r6
   8075a:	b005      	add	sp, #20
   8075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8075e:	212d      	movs	r1, #45	; 0x2d
   80760:	4638      	mov	r0, r7
   80762:	4b04      	ldr	r3, [pc, #16]	; (80774 <printi+0xa8>)
   80764:	4798      	blx	r3
   80766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80768:	3b01      	subs	r3, #1
   8076a:	930a      	str	r3, [sp, #40]	; 0x28
   8076c:	e7ee      	b.n	8074c <printi+0x80>
   8076e:	bf00      	nop
   80770:	00080649 	.word	0x00080649
   80774:	00080639 	.word	0x00080639

00080778 <print>:
   80778:	b5f0      	push	{r4, r5, r6, r7, lr}
   8077a:	b089      	sub	sp, #36	; 0x24
   8077c:	4606      	mov	r6, r0
   8077e:	460c      	mov	r4, r1
   80780:	9205      	str	r2, [sp, #20]
   80782:	2500      	movs	r5, #0
   80784:	e081      	b.n	8088a <print+0x112>
   80786:	1ca2      	adds	r2, r4, #2
   80788:	2301      	movs	r3, #1
   8078a:	e08b      	b.n	808a4 <print+0x12c>
   8078c:	3401      	adds	r4, #1
   8078e:	f043 0302 	orr.w	r3, r3, #2
   80792:	7822      	ldrb	r2, [r4, #0]
   80794:	2a30      	cmp	r2, #48	; 0x30
   80796:	d0f9      	beq.n	8078c <print+0x14>
   80798:	2200      	movs	r2, #0
   8079a:	e006      	b.n	807aa <print+0x32>
   8079c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   807a0:	0050      	lsls	r0, r2, #1
   807a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   807a6:	4402      	add	r2, r0
   807a8:	3401      	adds	r4, #1
   807aa:	7821      	ldrb	r1, [r4, #0]
   807ac:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   807b0:	b2c0      	uxtb	r0, r0
   807b2:	2809      	cmp	r0, #9
   807b4:	d9f2      	bls.n	8079c <print+0x24>
   807b6:	2973      	cmp	r1, #115	; 0x73
   807b8:	d018      	beq.n	807ec <print+0x74>
   807ba:	2964      	cmp	r1, #100	; 0x64
   807bc:	d022      	beq.n	80804 <print+0x8c>
   807be:	2978      	cmp	r1, #120	; 0x78
   807c0:	d02f      	beq.n	80822 <print+0xaa>
   807c2:	2958      	cmp	r1, #88	; 0x58
   807c4:	d03c      	beq.n	80840 <print+0xc8>
   807c6:	2975      	cmp	r1, #117	; 0x75
   807c8:	d049      	beq.n	8085e <print+0xe6>
   807ca:	2963      	cmp	r1, #99	; 0x63
   807cc:	d15c      	bne.n	80888 <print+0x110>
   807ce:	9905      	ldr	r1, [sp, #20]
   807d0:	1d08      	adds	r0, r1, #4
   807d2:	9005      	str	r0, [sp, #20]
   807d4:	7809      	ldrb	r1, [r1, #0]
   807d6:	f88d 101c 	strb.w	r1, [sp, #28]
   807da:	2100      	movs	r1, #0
   807dc:	f88d 101d 	strb.w	r1, [sp, #29]
   807e0:	a907      	add	r1, sp, #28
   807e2:	4630      	mov	r0, r6
   807e4:	4f34      	ldr	r7, [pc, #208]	; (808b8 <print+0x140>)
   807e6:	47b8      	blx	r7
   807e8:	4405      	add	r5, r0
   807ea:	e04d      	b.n	80888 <print+0x110>
   807ec:	9905      	ldr	r1, [sp, #20]
   807ee:	1d08      	adds	r0, r1, #4
   807f0:	9005      	str	r0, [sp, #20]
   807f2:	6809      	ldr	r1, [r1, #0]
   807f4:	b121      	cbz	r1, 80800 <print+0x88>
   807f6:	4630      	mov	r0, r6
   807f8:	4f2f      	ldr	r7, [pc, #188]	; (808b8 <print+0x140>)
   807fa:	47b8      	blx	r7
   807fc:	4405      	add	r5, r0
   807fe:	e043      	b.n	80888 <print+0x110>
   80800:	492e      	ldr	r1, [pc, #184]	; (808bc <print+0x144>)
   80802:	e7f8      	b.n	807f6 <print+0x7e>
   80804:	9905      	ldr	r1, [sp, #20]
   80806:	1d08      	adds	r0, r1, #4
   80808:	9005      	str	r0, [sp, #20]
   8080a:	6809      	ldr	r1, [r1, #0]
   8080c:	2061      	movs	r0, #97	; 0x61
   8080e:	9002      	str	r0, [sp, #8]
   80810:	9301      	str	r3, [sp, #4]
   80812:	9200      	str	r2, [sp, #0]
   80814:	2301      	movs	r3, #1
   80816:	220a      	movs	r2, #10
   80818:	4630      	mov	r0, r6
   8081a:	4f29      	ldr	r7, [pc, #164]	; (808c0 <print+0x148>)
   8081c:	47b8      	blx	r7
   8081e:	4405      	add	r5, r0
   80820:	e032      	b.n	80888 <print+0x110>
   80822:	9905      	ldr	r1, [sp, #20]
   80824:	1d08      	adds	r0, r1, #4
   80826:	9005      	str	r0, [sp, #20]
   80828:	6809      	ldr	r1, [r1, #0]
   8082a:	2061      	movs	r0, #97	; 0x61
   8082c:	9002      	str	r0, [sp, #8]
   8082e:	9301      	str	r3, [sp, #4]
   80830:	9200      	str	r2, [sp, #0]
   80832:	2300      	movs	r3, #0
   80834:	2210      	movs	r2, #16
   80836:	4630      	mov	r0, r6
   80838:	4f21      	ldr	r7, [pc, #132]	; (808c0 <print+0x148>)
   8083a:	47b8      	blx	r7
   8083c:	4405      	add	r5, r0
   8083e:	e023      	b.n	80888 <print+0x110>
   80840:	9905      	ldr	r1, [sp, #20]
   80842:	1d08      	adds	r0, r1, #4
   80844:	9005      	str	r0, [sp, #20]
   80846:	6809      	ldr	r1, [r1, #0]
   80848:	2041      	movs	r0, #65	; 0x41
   8084a:	9002      	str	r0, [sp, #8]
   8084c:	9301      	str	r3, [sp, #4]
   8084e:	9200      	str	r2, [sp, #0]
   80850:	2300      	movs	r3, #0
   80852:	2210      	movs	r2, #16
   80854:	4630      	mov	r0, r6
   80856:	4f1a      	ldr	r7, [pc, #104]	; (808c0 <print+0x148>)
   80858:	47b8      	blx	r7
   8085a:	4405      	add	r5, r0
   8085c:	e014      	b.n	80888 <print+0x110>
   8085e:	9905      	ldr	r1, [sp, #20]
   80860:	1d08      	adds	r0, r1, #4
   80862:	9005      	str	r0, [sp, #20]
   80864:	6809      	ldr	r1, [r1, #0]
   80866:	2061      	movs	r0, #97	; 0x61
   80868:	9002      	str	r0, [sp, #8]
   8086a:	9301      	str	r3, [sp, #4]
   8086c:	9200      	str	r2, [sp, #0]
   8086e:	2300      	movs	r3, #0
   80870:	220a      	movs	r2, #10
   80872:	4630      	mov	r0, r6
   80874:	4f12      	ldr	r7, [pc, #72]	; (808c0 <print+0x148>)
   80876:	47b8      	blx	r7
   80878:	4405      	add	r5, r0
   8087a:	e005      	b.n	80888 <print+0x110>
   8087c:	4614      	mov	r4, r2
   8087e:	7821      	ldrb	r1, [r4, #0]
   80880:	4630      	mov	r0, r6
   80882:	4b10      	ldr	r3, [pc, #64]	; (808c4 <print+0x14c>)
   80884:	4798      	blx	r3
   80886:	3501      	adds	r5, #1
   80888:	3401      	adds	r4, #1
   8088a:	7823      	ldrb	r3, [r4, #0]
   8088c:	b163      	cbz	r3, 808a8 <print+0x130>
   8088e:	2b25      	cmp	r3, #37	; 0x25
   80890:	d1f5      	bne.n	8087e <print+0x106>
   80892:	1c62      	adds	r2, r4, #1
   80894:	7863      	ldrb	r3, [r4, #1]
   80896:	b13b      	cbz	r3, 808a8 <print+0x130>
   80898:	2b25      	cmp	r3, #37	; 0x25
   8089a:	d0ef      	beq.n	8087c <print+0x104>
   8089c:	2b2d      	cmp	r3, #45	; 0x2d
   8089e:	f43f af72 	beq.w	80786 <print+0xe>
   808a2:	2300      	movs	r3, #0
   808a4:	4614      	mov	r4, r2
   808a6:	e774      	b.n	80792 <print+0x1a>
   808a8:	b116      	cbz	r6, 808b0 <print+0x138>
   808aa:	6833      	ldr	r3, [r6, #0]
   808ac:	2200      	movs	r2, #0
   808ae:	701a      	strb	r2, [r3, #0]
   808b0:	4628      	mov	r0, r5
   808b2:	b009      	add	sp, #36	; 0x24
   808b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808b6:	bf00      	nop
   808b8:	00080649 	.word	0x00080649
   808bc:	00080c20 	.word	0x00080c20
   808c0:	000806cd 	.word	0x000806cd
   808c4:	00080639 	.word	0x00080639

000808c8 <printf>:
   808c8:	b40f      	push	{r0, r1, r2, r3}
   808ca:	b500      	push	{lr}
   808cc:	b083      	sub	sp, #12
   808ce:	aa04      	add	r2, sp, #16
   808d0:	f852 1b04 	ldr.w	r1, [r2], #4
   808d4:	9201      	str	r2, [sp, #4]
   808d6:	2000      	movs	r0, #0
   808d8:	4b03      	ldr	r3, [pc, #12]	; (808e8 <printf+0x20>)
   808da:	4798      	blx	r3
   808dc:	b003      	add	sp, #12
   808de:	f85d eb04 	ldr.w	lr, [sp], #4
   808e2:	b004      	add	sp, #16
   808e4:	4770      	bx	lr
   808e6:	bf00      	nop
   808e8:	00080779 	.word	0x00080779

000808ec <configure_uart>:
   808ec:	4b16      	ldr	r3, [pc, #88]	; (80948 <configure_uart+0x5c>)
   808ee:	2200      	movs	r2, #0
   808f0:	701a      	strb	r2, [r3, #0]
   808f2:	705a      	strb	r2, [r3, #1]
   808f4:	4b15      	ldr	r3, [pc, #84]	; (8094c <configure_uart+0x60>)
   808f6:	f44f 7140 	mov.w	r1, #768	; 0x300
   808fa:	6459      	str	r1, [r3, #68]	; 0x44
   808fc:	6059      	str	r1, [r3, #4]
   808fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80900:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80902:	4002      	ands	r2, r0
   80904:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80908:	671a      	str	r2, [r3, #112]	; 0x70
   8090a:	6659      	str	r1, [r3, #100]	; 0x64
   8090c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80910:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80914:	611a      	str	r2, [r3, #16]
   80916:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8091a:	21ac      	movs	r1, #172	; 0xac
   8091c:	6019      	str	r1, [r3, #0]
   8091e:	f240 2123 	movw	r1, #547	; 0x223
   80922:	6219      	str	r1, [r3, #32]
   80924:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80928:	6059      	str	r1, [r3, #4]
   8092a:	f240 2102 	movw	r1, #514	; 0x202
   8092e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80932:	f04f 31ff 	mov.w	r1, #4294967295
   80936:	60d9      	str	r1, [r3, #12]
   80938:	21e1      	movs	r1, #225	; 0xe1
   8093a:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8093c:	4904      	ldr	r1, [pc, #16]	; (80950 <configure_uart+0x64>)
   8093e:	600a      	str	r2, [r1, #0]
   80940:	2250      	movs	r2, #80	; 0x50
   80942:	601a      	str	r2, [r3, #0]
   80944:	4770      	bx	lr
   80946:	bf00      	nop
   80948:	20000450 	.word	0x20000450
   8094c:	400e0e00 	.word	0x400e0e00
   80950:	e000e100 	.word	0xe000e100

00080954 <uart_putchar>:
   80954:	4b07      	ldr	r3, [pc, #28]	; (80974 <uart_putchar+0x20>)
   80956:	695b      	ldr	r3, [r3, #20]
   80958:	f013 0f02 	tst.w	r3, #2
   8095c:	d008      	beq.n	80970 <uart_putchar+0x1c>
   8095e:	4b05      	ldr	r3, [pc, #20]	; (80974 <uart_putchar+0x20>)
   80960:	61d8      	str	r0, [r3, #28]
   80962:	4b04      	ldr	r3, [pc, #16]	; (80974 <uart_putchar+0x20>)
   80964:	695b      	ldr	r3, [r3, #20]
   80966:	f413 7f00 	tst.w	r3, #512	; 0x200
   8096a:	d0fa      	beq.n	80962 <uart_putchar+0xe>
   8096c:	2000      	movs	r0, #0
   8096e:	4770      	bx	lr
   80970:	2001      	movs	r0, #1
   80972:	4770      	bx	lr
   80974:	400e0800 	.word	0x400e0800

00080978 <UART_Handler>:
   80978:	b508      	push	{r3, lr}
   8097a:	4b15      	ldr	r3, [pc, #84]	; (809d0 <UART_Handler+0x58>)
   8097c:	695b      	ldr	r3, [r3, #20]
   8097e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80982:	d003      	beq.n	8098c <UART_Handler+0x14>
   80984:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80988:	4a11      	ldr	r2, [pc, #68]	; (809d0 <UART_Handler+0x58>)
   8098a:	6011      	str	r1, [r2, #0]
   8098c:	f013 0f01 	tst.w	r3, #1
   80990:	d012      	beq.n	809b8 <UART_Handler+0x40>
   80992:	4810      	ldr	r0, [pc, #64]	; (809d4 <UART_Handler+0x5c>)
   80994:	7842      	ldrb	r2, [r0, #1]
   80996:	1c53      	adds	r3, r2, #1
   80998:	4259      	negs	r1, r3
   8099a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8099e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   809a2:	bf58      	it	pl
   809a4:	424b      	negpl	r3, r1
   809a6:	7801      	ldrb	r1, [r0, #0]
   809a8:	428b      	cmp	r3, r1
   809aa:	d006      	beq.n	809ba <UART_Handler+0x42>
   809ac:	4908      	ldr	r1, [pc, #32]	; (809d0 <UART_Handler+0x58>)
   809ae:	6988      	ldr	r0, [r1, #24]
   809b0:	4908      	ldr	r1, [pc, #32]	; (809d4 <UART_Handler+0x5c>)
   809b2:	440a      	add	r2, r1
   809b4:	7090      	strb	r0, [r2, #2]
   809b6:	704b      	strb	r3, [r1, #1]
   809b8:	bd08      	pop	{r3, pc}
   809ba:	4807      	ldr	r0, [pc, #28]	; (809d8 <UART_Handler+0x60>)
   809bc:	4b07      	ldr	r3, [pc, #28]	; (809dc <UART_Handler+0x64>)
   809be:	4798      	blx	r3
   809c0:	4b04      	ldr	r3, [pc, #16]	; (809d4 <UART_Handler+0x5c>)
   809c2:	7859      	ldrb	r1, [r3, #1]
   809c4:	4a02      	ldr	r2, [pc, #8]	; (809d0 <UART_Handler+0x58>)
   809c6:	6992      	ldr	r2, [r2, #24]
   809c8:	440b      	add	r3, r1
   809ca:	709a      	strb	r2, [r3, #2]
   809cc:	bd08      	pop	{r3, pc}
   809ce:	bf00      	nop
   809d0:	400e0800 	.word	0x400e0800
   809d4:	20000450 	.word	0x20000450
   809d8:	00080c28 	.word	0x00080c28
   809dc:	000808c9 	.word	0x000808c9

000809e0 <__libc_init_array>:
   809e0:	b570      	push	{r4, r5, r6, lr}
   809e2:	4e0f      	ldr	r6, [pc, #60]	; (80a20 <__libc_init_array+0x40>)
   809e4:	4d0f      	ldr	r5, [pc, #60]	; (80a24 <__libc_init_array+0x44>)
   809e6:	1b76      	subs	r6, r6, r5
   809e8:	10b6      	asrs	r6, r6, #2
   809ea:	bf18      	it	ne
   809ec:	2400      	movne	r4, #0
   809ee:	d005      	beq.n	809fc <__libc_init_array+0x1c>
   809f0:	3401      	adds	r4, #1
   809f2:	f855 3b04 	ldr.w	r3, [r5], #4
   809f6:	4798      	blx	r3
   809f8:	42a6      	cmp	r6, r4
   809fa:	d1f9      	bne.n	809f0 <__libc_init_array+0x10>
   809fc:	4e0a      	ldr	r6, [pc, #40]	; (80a28 <__libc_init_array+0x48>)
   809fe:	4d0b      	ldr	r5, [pc, #44]	; (80a2c <__libc_init_array+0x4c>)
   80a00:	f000 f924 	bl	80c4c <_init>
   80a04:	1b76      	subs	r6, r6, r5
   80a06:	10b6      	asrs	r6, r6, #2
   80a08:	bf18      	it	ne
   80a0a:	2400      	movne	r4, #0
   80a0c:	d006      	beq.n	80a1c <__libc_init_array+0x3c>
   80a0e:	3401      	adds	r4, #1
   80a10:	f855 3b04 	ldr.w	r3, [r5], #4
   80a14:	4798      	blx	r3
   80a16:	42a6      	cmp	r6, r4
   80a18:	d1f9      	bne.n	80a0e <__libc_init_array+0x2e>
   80a1a:	bd70      	pop	{r4, r5, r6, pc}
   80a1c:	bd70      	pop	{r4, r5, r6, pc}
   80a1e:	bf00      	nop
   80a20:	00080c58 	.word	0x00080c58
   80a24:	00080c58 	.word	0x00080c58
   80a28:	00080c60 	.word	0x00080c60
   80a2c:	00080c58 	.word	0x00080c58

00080a30 <register_fini>:
   80a30:	4b02      	ldr	r3, [pc, #8]	; (80a3c <register_fini+0xc>)
   80a32:	b113      	cbz	r3, 80a3a <register_fini+0xa>
   80a34:	4802      	ldr	r0, [pc, #8]	; (80a40 <register_fini+0x10>)
   80a36:	f000 b805 	b.w	80a44 <atexit>
   80a3a:	4770      	bx	lr
   80a3c:	00000000 	.word	0x00000000
   80a40:	00080a51 	.word	0x00080a51

00080a44 <atexit>:
   80a44:	2300      	movs	r3, #0
   80a46:	4601      	mov	r1, r0
   80a48:	461a      	mov	r2, r3
   80a4a:	4618      	mov	r0, r3
   80a4c:	f000 b81e 	b.w	80a8c <__register_exitproc>

00080a50 <__libc_fini_array>:
   80a50:	b538      	push	{r3, r4, r5, lr}
   80a52:	4c0a      	ldr	r4, [pc, #40]	; (80a7c <__libc_fini_array+0x2c>)
   80a54:	4d0a      	ldr	r5, [pc, #40]	; (80a80 <__libc_fini_array+0x30>)
   80a56:	1b64      	subs	r4, r4, r5
   80a58:	10a4      	asrs	r4, r4, #2
   80a5a:	d00a      	beq.n	80a72 <__libc_fini_array+0x22>
   80a5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a60:	3b01      	subs	r3, #1
   80a62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a66:	3c01      	subs	r4, #1
   80a68:	f855 3904 	ldr.w	r3, [r5], #-4
   80a6c:	4798      	blx	r3
   80a6e:	2c00      	cmp	r4, #0
   80a70:	d1f9      	bne.n	80a66 <__libc_fini_array+0x16>
   80a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a76:	f000 b8f3 	b.w	80c60 <_fini>
   80a7a:	bf00      	nop
   80a7c:	00080c70 	.word	0x00080c70
   80a80:	00080c6c 	.word	0x00080c6c

00080a84 <__retarget_lock_acquire_recursive>:
   80a84:	4770      	bx	lr
   80a86:	bf00      	nop

00080a88 <__retarget_lock_release_recursive>:
   80a88:	4770      	bx	lr
   80a8a:	bf00      	nop

00080a8c <__register_exitproc>:
   80a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a90:	4d2c      	ldr	r5, [pc, #176]	; (80b44 <__register_exitproc+0xb8>)
   80a92:	4606      	mov	r6, r0
   80a94:	6828      	ldr	r0, [r5, #0]
   80a96:	4698      	mov	r8, r3
   80a98:	460f      	mov	r7, r1
   80a9a:	4691      	mov	r9, r2
   80a9c:	f7ff fff2 	bl	80a84 <__retarget_lock_acquire_recursive>
   80aa0:	4b29      	ldr	r3, [pc, #164]	; (80b48 <__register_exitproc+0xbc>)
   80aa2:	681c      	ldr	r4, [r3, #0]
   80aa4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80aa8:	2b00      	cmp	r3, #0
   80aaa:	d03e      	beq.n	80b2a <__register_exitproc+0x9e>
   80aac:	685a      	ldr	r2, [r3, #4]
   80aae:	2a1f      	cmp	r2, #31
   80ab0:	dc1c      	bgt.n	80aec <__register_exitproc+0x60>
   80ab2:	f102 0e01 	add.w	lr, r2, #1
   80ab6:	b176      	cbz	r6, 80ad6 <__register_exitproc+0x4a>
   80ab8:	2101      	movs	r1, #1
   80aba:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80abe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80ac2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80ac6:	4091      	lsls	r1, r2
   80ac8:	4308      	orrs	r0, r1
   80aca:	2e02      	cmp	r6, #2
   80acc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ad0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80ad4:	d023      	beq.n	80b1e <__register_exitproc+0x92>
   80ad6:	3202      	adds	r2, #2
   80ad8:	f8c3 e004 	str.w	lr, [r3, #4]
   80adc:	6828      	ldr	r0, [r5, #0]
   80ade:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80ae2:	f7ff ffd1 	bl	80a88 <__retarget_lock_release_recursive>
   80ae6:	2000      	movs	r0, #0
   80ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80aec:	4b17      	ldr	r3, [pc, #92]	; (80b4c <__register_exitproc+0xc0>)
   80aee:	b30b      	cbz	r3, 80b34 <__register_exitproc+0xa8>
   80af0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80af4:	f3af 8000 	nop.w
   80af8:	4603      	mov	r3, r0
   80afa:	b1d8      	cbz	r0, 80b34 <__register_exitproc+0xa8>
   80afc:	2000      	movs	r0, #0
   80afe:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80b02:	f04f 0e01 	mov.w	lr, #1
   80b06:	6058      	str	r0, [r3, #4]
   80b08:	6019      	str	r1, [r3, #0]
   80b0a:	4602      	mov	r2, r0
   80b0c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b14:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b18:	2e00      	cmp	r6, #0
   80b1a:	d0dc      	beq.n	80ad6 <__register_exitproc+0x4a>
   80b1c:	e7cc      	b.n	80ab8 <__register_exitproc+0x2c>
   80b1e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b22:	4301      	orrs	r1, r0
   80b24:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b28:	e7d5      	b.n	80ad6 <__register_exitproc+0x4a>
   80b2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b32:	e7bb      	b.n	80aac <__register_exitproc+0x20>
   80b34:	6828      	ldr	r0, [r5, #0]
   80b36:	f7ff ffa7 	bl	80a88 <__retarget_lock_release_recursive>
   80b3a:	f04f 30ff 	mov.w	r0, #4294967295
   80b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b42:	bf00      	nop
   80b44:	20000430 	.word	0x20000430
   80b48:	00080c48 	.word	0x00080c48
   80b4c:	00000000 	.word	0x00000000
   80b50:	304e4143 	.word	0x304e4143
   80b54:	746e6920 	.word	0x746e6920
   80b58:	75727265 	.word	0x75727265
   80b5c:	0d0a7470 	.word	0x0d0a7470
   80b60:	00000000 	.word	0x00000000
   80b64:	304e4143 	.word	0x304e4143
   80b68:	73656d20 	.word	0x73656d20
   80b6c:	65676173 	.word	0x65676173
   80b70:	72726120 	.word	0x72726120
   80b74:	64657669 	.word	0x64657669
   80b78:	206e6920 	.word	0x206e6920
   80b7c:	2d6e6f6e 	.word	0x2d6e6f6e
   80b80:	64657375 	.word	0x64657375
   80b84:	69616d20 	.word	0x69616d20
   80b88:	786f626c 	.word	0x786f626c
   80b8c:	00000d0a 	.word	0x00000d0a
   80b90:	7373656d 	.word	0x7373656d
   80b94:	20656761 	.word	0x20656761
   80b98:	203a6469 	.word	0x203a6469
   80b9c:	0d0a6425 	.word	0x0d0a6425
   80ba0:	00000000 	.word	0x00000000
   80ba4:	7373656d 	.word	0x7373656d
   80ba8:	20656761 	.word	0x20656761
   80bac:	61746164 	.word	0x61746164
   80bb0:	6e656c20 	.word	0x6e656c20
   80bb4:	3a687467 	.word	0x3a687467
   80bb8:	0a642520 	.word	0x0a642520
   80bbc:	0000000d 	.word	0x0000000d
   80bc0:	00206425 	.word	0x00206425
   80bc4:	304e4143 	.word	0x304e4143
   80bc8:	30424d20 	.word	0x30424d20
   80bcc:	61657220 	.word	0x61657220
   80bd0:	74207964 	.word	0x74207964
   80bd4:	6573206f 	.word	0x6573206f
   80bd8:	0a20646e 	.word	0x0a20646e
   80bdc:	0000000d 	.word	0x0000000d
   80be0:	4d080332 	.word	0x4d080332
   80be4:	69646c65 	.word	0x69646c65
   80be8:	0021676e 	.word	0x0021676e
   80bec:	68696548 	.word	0x68696548
   80bf0:	61686965 	.word	0x61686965
   80bf4:	206f6c6c 	.word	0x206f6c6c
   80bf8:	68696568 	.word	0x68696568
   80bfc:	65686965 	.word	0x65686965
   80c00:	66726269 	.word	0x66726269
   80c04:	70626d67 	.word	0x70626d67
   80c08:	676f6572 	.word	0x676f6572
   80c0c:	67726d6d 	.word	0x67726d6d
   80c10:	67656c6b 	.word	0x67656c6b
   80c14:	6f6e726d 	.word	0x6f6e726d
   80c18:	0a6d6769 	.word	0x0a6d6769
   80c1c:	0000000d 	.word	0x0000000d
   80c20:	6c756e28 	.word	0x6c756e28
   80c24:	0000296c 	.word	0x0000296c
   80c28:	3a525245 	.word	0x3a525245
   80c2c:	52415520 	.word	0x52415520
   80c30:	58522054 	.word	0x58522054
   80c34:	66756220 	.word	0x66756220
   80c38:	20726566 	.word	0x20726566
   80c3c:	66207369 	.word	0x66207369
   80c40:	0a6c6c75 	.word	0x0a6c6c75
   80c44:	0000000d 	.word	0x0000000d

00080c48 <_global_impure_ptr>:
   80c48:	20000008                                ... 

00080c4c <_init>:
   80c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c4e:	bf00      	nop
   80c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c52:	bc08      	pop	{r3}
   80c54:	469e      	mov	lr, r3
   80c56:	4770      	bx	lr

00080c58 <__init_array_start>:
   80c58:	00080a31 	.word	0x00080a31

00080c5c <__frame_dummy_init_array_entry>:
   80c5c:	00080119                                ....

00080c60 <_fini>:
   80c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c62:	bf00      	nop
   80c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c66:	bc08      	pop	{r3}
   80c68:	469e      	mov	lr, r3
   80c6a:	4770      	bx	lr

00080c6c <__fini_array_start>:
   80c6c:	000800f5 	.word	0x000800f5
