
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00000f22  00000fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001da  008001da  00001090  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001465  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c84  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc3  00000000  00000000  00003381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e6  00000000  00000000  00004b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_1>
   8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_2>
   c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e2       	ldi	r30, 0x22	; 34
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 3d       	cpi	r26, 0xDA	; 218
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa ed       	ldi	r26, 0xDA	; 218
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 3e       	cpi	r26, 0xE6	; 230
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  a6:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
  cc:	8f b5       	in	r24, 0x2f	; 47
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
  d8:	8f b5       	in	r24, 0x2f	; 47
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
  e4:	8e b5       	in	r24, 0x2e	; 46
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8f bd       	out	0x2f, r24	; 47
 102:	08 95       	ret

00000104 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <adc_read+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <adc_read+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
 118:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x121a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	91 e3       	ldi	r25, 0x31	; 49
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <adc_read+0x1a>
 122:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <adc_read+0x3e>
		adc_value[i] = adc[i];
 12a:	f9 01       	movw	r30, r18
 12c:	fc 5e       	subi	r31, 0xEC	; 236
 12e:	90 81       	ld	r25, Z
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	24 30       	cpi	r18, 0x04	; 4
 144:	31 05       	cpc	r19, r1
 146:	88 f3       	brcs	.-30     	; 0x12a <adc_read+0x26>
		adc_value[i] = adc[i];
	}
	
	
	
	return adc_value[channel];
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e8 0f       	add	r30, r24
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 16a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 174:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
	printf("offset_x: %d, offset_y: %d\r\n", offset_x, offset_y);
 178:	1f 92       	push	r1
 17a:	8f 93       	push	r24
 17c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <offset_x>
 180:	1f 92       	push	r1
 182:	8f 93       	push	r24
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	08 95       	ret

0000019e <adc_conv_js_val>:

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
 19e:	86 17       	cp	r24, r22
 1a0:	a0 f0       	brcs	.+40     	; 0x1ca <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
 1a2:	46 2f       	mov	r20, r22
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	24 1b       	sub	r18, r20
 1ac:	35 0b       	sbc	r19, r21
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	62 9f       	mul	r22, r18
 1b2:	c0 01       	movw	r24, r0
 1b4:	63 9f       	mul	r22, r19
 1b6:	90 0d       	add	r25, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	6f ef       	ldi	r22, 0xFF	; 255
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	64 1b       	sub	r22, r20
 1c0:	75 0b       	sbc	r23, r21
 1c2:	0e 94 ca 02 	call	0x594	; 0x594 <__divmodhi4>
 1c6:	86 2f       	mov	r24, r22
 1c8:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	26 1b       	sub	r18, r22
 1d2:	37 0b       	sbc	r19, r23
 1d4:	44 e6       	ldi	r20, 0x64	; 100
 1d6:	42 9f       	mul	r20, r18
 1d8:	c0 01       	movw	r24, r0
 1da:	43 9f       	mul	r20, r19
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	0e 94 ca 02 	call	0x594	; 0x594 <__divmodhi4>
 1e4:	86 2f       	mov	r24, r22
}
 1e6:	08 95       	ret

000001e8 <pos_read>:

pos_t pos_read()
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
 1ec:	c0 91 db 01 	lds	r28, 0x01DB	; 0x8001db <offset_x>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 1f6:	6c 2f       	mov	r22, r28
 1f8:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 1fc:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
 1fe:	d0 91 da 01 	lds	r29, 0x01DA	; 0x8001da <__data_end>
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 208:	6d 2f       	mov	r22, r29
 20a:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 20e:	98 2f       	mov	r25, r24
	
	return positions;
}
 210:	8c 2f       	mov	r24, r28
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
 218:	28 2f       	mov	r18, r24
 21a:	8d 5f       	subi	r24, 0xFD	; 253
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	48 f4       	brcc	.+18     	; 0x232 <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 220:	89 2f       	mov	r24, r25
 222:	9d 5f       	subi	r25, 0xFD	; 253
 224:	97 30       	cpi	r25, 0x07	; 7
 226:	d8 f0       	brcs	.+54     	; 0x25e <dir_read+0x46>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	dc f4       	brge	.+54     	; 0x262 <dir_read+0x4a>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	dc f0       	brlt	.+54     	; 0x266 <dir_read+0x4e>
 230:	15 c0       	rjmp	.+42     	; 0x25c <dir_read+0x44>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
 232:	24 30       	cpi	r18, 0x04	; 4
 234:	4c f0       	brlt	.+18     	; 0x248 <dir_read+0x30>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 236:	89 2f       	mov	r24, r25
 238:	9d 5f       	subi	r25, 0xFD	; 253
 23a:	97 30       	cpi	r25, 0x07	; 7
 23c:	b0 f0       	brcs	.+44     	; 0x26a <dir_read+0x52>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	b4 f4       	brge	.+44     	; 0x26e <dir_read+0x56>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	b4 f0       	brlt	.+44     	; 0x272 <dir_read+0x5a>
 246:	0a c0       	rjmp	.+20     	; 0x25c <dir_read+0x44>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
 248:	23 30       	cpi	r18, 0x03	; 3
 24a:	44 f4       	brge	.+16     	; 0x25c <dir_read+0x44>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 24c:	89 2f       	mov	r24, r25
 24e:	9d 5f       	subi	r25, 0xFD	; 253
 250:	97 30       	cpi	r25, 0x07	; 7
 252:	88 f0       	brcs	.+34     	; 0x276 <dir_read+0x5e>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 254:	84 30       	cpi	r24, 0x04	; 4
 256:	8c f4       	brge	.+34     	; 0x27a <dir_read+0x62>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	8c f0       	brlt	.+34     	; 0x27e <dir_read+0x66>
			return DOWN_LEFT;
		}
	}
}
 25c:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
 27e:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
 280:	08 95       	ret

00000282 <slider_read>:

uint8_t slider_read(uint8_t channel)
{
	return (100 * adc_read(channel) / ADC_MAX);
 282:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 286:	24 e6       	ldi	r18, 0x64	; 100
 288:	82 9f       	mul	r24, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	6f ef       	ldi	r22, 0xFF	; 255
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 ca 02 	call	0x594	; 0x594 <__divmodhi4>
 296:	86 2f       	mov	r24, r22
 298:	08 95       	ret

0000029a <main>:

int main(void){
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;
	USART_drv_init(MYUBRR);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 bd 02 	call	0x57a	; 0x57a <USART_drv_init>
	SRAM_init();
 2a2:	0e 94 ae 02 	call	0x55c	; 0x55c <SRAM_init>
	adc_drv_init();
 2a6:	0e 94 57 00 	call	0xae	; 0xae <adc_drv_init>
	ext_button_drv_init();
 2aa:	0e 94 3b 02 	call	0x476	; 0x476 <ext_button_drv_init>
	adc_calibrate();
 2ae:	0e 94 b2 00 	call	0x164	; 0x164 <adc_calibrate>
	oled_init();
 2b2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <oled_init>
	//oled_write_data(0b00111100);
	//oled_write_data(0b00011000);

    while (1){
		
		printf("----------------------------------\r\n");
 2b6:	83 e2       	ldi	r24, 0x23	; 35
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <puts>
		joystick_pos = pos_read();
 2be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <pos_read>
 2c2:	e8 2e       	mov	r14, r24
 2c4:	f9 2e       	mov	r15, r25
		joystick_dir = dir_read(joystick_pos);
 2c6:	0e 94 0c 01 	call	0x218	; 0x218 <dir_read>
 2ca:	d8 2e       	mov	r13, r24
		slider1 = slider_read(LEFT_SLIDER_CHANNEL);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2d4:	8c 01       	movw	r16, r24
		slider2 = slider_read(RIGHT_SLIDER_CHANNEL);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2de:	ec 01       	movw	r28, r24
		printf("X: %d\r\n", joystick_pos.X);
 2e0:	8e 2d       	mov	r24, r14
 2e2:	0e 2c       	mov	r0, r14
 2e4:	00 0c       	add	r0, r0
 2e6:	99 0b       	sbc	r25, r25
 2e8:	9f 93       	push	r25
 2ea:	ef 92       	push	r14
 2ec:	87 e4       	ldi	r24, 0x47	; 71
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	9f 93       	push	r25
 2f2:	8f 93       	push	r24
 2f4:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
		printf("Y: %d\r\n", joystick_pos.Y);
 2f8:	8f 2d       	mov	r24, r15
 2fa:	0f 2c       	mov	r0, r15
 2fc:	00 0c       	add	r0, r0
 2fe:	99 0b       	sbc	r25, r25
 300:	9f 93       	push	r25
 302:	ff 92       	push	r15
 304:	8f e4       	ldi	r24, 0x4F	; 79
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
		printf("Joystick direction: %d\r\n", joystick_dir);
 310:	1f 92       	push	r1
 312:	df 92       	push	r13
 314:	87 e5       	ldi	r24, 0x57	; 87
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
		printf("Left slider: %d\r\n", slider1);
 320:	c8 01       	movw	r24, r16
 322:	99 27       	eor	r25, r25
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	80 e7       	ldi	r24, 0x70	; 112
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
		printf("Right slider: %d\r\n", slider2);
 334:	ce 01       	movw	r24, r28
 336:	99 27       	eor	r25, r25
 338:	9f 93       	push	r25
 33a:	8f 93       	push	r24
 33c:	82 e8       	ldi	r24, 0x82	; 130
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	0e 94 3d 03 	call	0x67a	; 0x67a <printf>
		printf("----------------------------------\r\n");
 348:	83 e2       	ldi	r24, 0x23	; 35
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <puts>
		oled_write_data(0b00011000);
 350:	88 e1       	ldi	r24, 0x18	; 24
 352:	0e 94 ab 02 	call	0x556	; 0x556 <oled_write_data>
		oled_write_data(0b00011000);
 356:	88 e1       	ldi	r24, 0x18	; 24
 358:	0e 94 ab 02 	call	0x556	; 0x556 <oled_write_data>
		oled_write_data(0b01111110);
 35c:	8e e7       	ldi	r24, 0x7E	; 126
 35e:	0e 94 ab 02 	call	0x556	; 0x556 <oled_write_data>
		oled_write_data(0b00111100);
 362:	8c e3       	ldi	r24, 0x3C	; 60
 364:	0e 94 ab 02 	call	0x556	; 0x556 <oled_write_data>
		oled_write_data(0b00011000);
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	0e 94 ab 02 	call	0x556	; 0x556 <oled_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	8f e7       	ldi	r24, 0x7F	; 127
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0xda>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0xe4>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xe6>
 380:	8d b7       	in	r24, 0x3d	; 61
 382:	9e b7       	in	r25, 0x3e	; 62
 384:	44 96       	adiw	r24, 0x14	; 20
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	9e bf       	out	0x3e, r25	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	8d bf       	out	0x3d, r24	; 61
 390:	92 cf       	rjmp	.-220    	; 0x2b6 <main+0x1c>

00000392 <__vector_1>:
#define RIGHT_BUTTON_PIN PD3
#define JOYSTICK_BUTTON_PIN PE0


ISR (INT0_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	printf("Left button pressed\r\n");
 3b4:	85 e9       	ldi	r24, 0x95	; 149
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <puts>


}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_2>:

ISR (INT1_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	printf("Right button pressed\r\n");
 400:	8a ea       	ldi	r24, 0xAA	; 170
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 53 03 	call	0x6a6	; 0x6a6 <puts>
}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_3>:

ISR (INT2_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	printf("Joystick button pressed\r\n");
 44c:	80 ec       	ldi	r24, 0xC0	; 192
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 53 03 	call	0x6a6	; 0x6a6 <puts>


}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <ext_button_drv_init>:
void ext_button_drv_init(void)
{
	/*
	to do:			
	*/
	clear_bit(DDRD, LEFT_BUTTON_PIN);
 476:	81 b3       	in	r24, 0x11	; 17
 478:	8b 7f       	andi	r24, 0xFB	; 251
 47a:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
 47c:	81 b3       	in	r24, 0x11	; 17
 47e:	87 7f       	andi	r24, 0xF7	; 247
 480:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
 482:	86 b1       	in	r24, 0x06	; 6
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
 488:	f8 94       	cli
	// Enables interrupt on pin INT0, INT1
	set_bit(GICR, LEFT_BUTTON_ISR_REGISTER);
 48a:	8b b7       	in	r24, 0x3b	; 59
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	8b bf       	out	0x3b, r24	; 59
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
 490:	8b b7       	in	r24, 0x3b	; 59
 492:	80 68       	ori	r24, 0x80	; 128
 494:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT2, INT1 & INT0
	set_bit(MCUCR, ISC11);
 496:	85 b7       	in	r24, 0x35	; 53
 498:	88 60       	ori	r24, 0x08	; 8
 49a:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
 49c:	85 b7       	in	r24, 0x35	; 53
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC01);
 4a2:	85 b7       	in	r24, 0x35	; 53
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC00);
 4a8:	85 b7       	in	r24, 0x35	; 53
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
 4ae:	8b b7       	in	r24, 0x3b	; 59
 4b0:	8e 7f       	andi	r24, 0xFE	; 254
 4b2:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
 4b4:	86 b7       	in	r24, 0x36	; 54
 4b6:	8e 7f       	andi	r24, 0xFE	; 254
 4b8:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
 4ba:	8a b7       	in	r24, 0x3a	; 58
 4bc:	80 62       	ori	r24, 0x20	; 32
 4be:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
 4c0:	8b b7       	in	r24, 0x3b	; 59
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();	
 4c6:	78 94       	sei
 4c8:	08 95       	ret

000004ca <oled_write_cmd>:
{
	
}

void oled_pos(/*row, column*/)
{
 4ca:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe1a>
 4ce:	08 95       	ret

000004d0 <oled_init>:
 4d0:	8e ea       	ldi	r24, 0xAE	; 174
 4d2:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4d6:	81 ea       	ldi	r24, 0xA1	; 161
 4d8:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4dc:	8a ed       	ldi	r24, 0xDA	; 218
 4de:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4e2:	82 e1       	ldi	r24, 0x12	; 18
 4e4:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4e8:	88 ec       	ldi	r24, 0xC8	; 200
 4ea:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4ee:	88 ea       	ldi	r24, 0xA8	; 168
 4f0:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 4fa:	85 ed       	ldi	r24, 0xD5	; 213
 4fc:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 500:	80 e8       	ldi	r24, 0x80	; 128
 502:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 506:	81 e8       	ldi	r24, 0x81	; 129
 508:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 512:	89 ed       	ldi	r24, 0xD9	; 217
 514:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 518:	81 e2       	ldi	r24, 0x21	; 33
 51a:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 52a:	8b ed       	ldi	r24, 0xDB	; 219
 52c:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 530:	80 e3       	ldi	r24, 0x30	; 48
 532:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 536:	8d ea       	ldi	r24, 0xAD	; 173
 538:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 542:	84 ea       	ldi	r24, 0xA4	; 164
 544:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 548:	86 ea       	ldi	r24, 0xA6	; 166
 54a:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 54e:	8f ea       	ldi	r24, 0xAF	; 175
 550:	0e 94 65 02 	call	0x4ca	; 0x4ca <oled_write_cmd>
 554:	08 95       	ret

00000556 <oled_write_data>:
}

void oled_write_data(char data) // Volatile
{
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
 556:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x101a>
 55a:	08 95       	ret

0000055c <SRAM_init>:
 55c:	85 b7       	in	r24, 0x35	; 53
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	85 bf       	out	0x35, r24	; 53
 562:	80 b7       	in	r24, 0x30	; 48
 564:	80 62       	ori	r24, 0x20	; 32
 566:	80 bf       	out	0x30, r24	; 48
 568:	08 95       	ret

0000056a <USART_Transmit>:
 56a:	5d 9b       	sbis	0x0b, 5	; 11
 56c:	fe cf       	rjmp	.-4      	; 0x56a <USART_Transmit>
 56e:	8c b9       	out	0x0c, r24	; 12
 570:	08 95       	ret

00000572 <USART_Receive>:
 572:	5f 9b       	sbis	0x0b, 7	; 11
 574:	fe cf       	rjmp	.-4      	; 0x572 <USART_Receive>
 576:	8c b1       	in	r24, 0x0c	; 12
 578:	08 95       	ret

0000057a <USART_drv_init>:
 57a:	90 bd       	out	0x20, r25	; 32
 57c:	89 b9       	out	0x09, r24	; 9
 57e:	88 e1       	ldi	r24, 0x18	; 24
 580:	8a b9       	out	0x0a, r24	; 10
 582:	8e e8       	ldi	r24, 0x8E	; 142
 584:	80 bd       	out	0x20, r24	; 32
 586:	69 eb       	ldi	r22, 0xB9	; 185
 588:	72 e0       	ldi	r23, 0x02	; 2
 58a:	85 eb       	ldi	r24, 0xB5	; 181
 58c:	92 e0       	ldi	r25, 0x02	; 2
 58e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fdevopen>
 592:	08 95       	ret

00000594 <__divmodhi4>:
 594:	97 fb       	bst	r25, 7
 596:	07 2e       	mov	r0, r23
 598:	16 f4       	brtc	.+4      	; 0x59e <__divmodhi4+0xa>
 59a:	00 94       	com	r0
 59c:	07 d0       	rcall	.+14     	; 0x5ac <__divmodhi4_neg1>
 59e:	77 fd       	sbrc	r23, 7
 5a0:	09 d0       	rcall	.+18     	; 0x5b4 <__divmodhi4_neg2>
 5a2:	0e 94 de 02 	call	0x5bc	; 0x5bc <__udivmodhi4>
 5a6:	07 fc       	sbrc	r0, 7
 5a8:	05 d0       	rcall	.+10     	; 0x5b4 <__divmodhi4_neg2>
 5aa:	3e f4       	brtc	.+14     	; 0x5ba <__divmodhi4_exit>

000005ac <__divmodhi4_neg1>:
 5ac:	90 95       	com	r25
 5ae:	81 95       	neg	r24
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__divmodhi4_neg2>:
 5b4:	70 95       	com	r23
 5b6:	61 95       	neg	r22
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ba <__divmodhi4_exit>:
 5ba:	08 95       	ret

000005bc <__udivmodhi4>:
 5bc:	aa 1b       	sub	r26, r26
 5be:	bb 1b       	sub	r27, r27
 5c0:	51 e1       	ldi	r21, 0x11	; 17
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <__udivmodhi4_ep>

000005c4 <__udivmodhi4_loop>:
 5c4:	aa 1f       	adc	r26, r26
 5c6:	bb 1f       	adc	r27, r27
 5c8:	a6 17       	cp	r26, r22
 5ca:	b7 07       	cpc	r27, r23
 5cc:	10 f0       	brcs	.+4      	; 0x5d2 <__udivmodhi4_ep>
 5ce:	a6 1b       	sub	r26, r22
 5d0:	b7 0b       	sbc	r27, r23

000005d2 <__udivmodhi4_ep>:
 5d2:	88 1f       	adc	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	5a 95       	dec	r21
 5d8:	a9 f7       	brne	.-22     	; 0x5c4 <__udivmodhi4_loop>
 5da:	80 95       	com	r24
 5dc:	90 95       	com	r25
 5de:	bc 01       	movw	r22, r24
 5e0:	cd 01       	movw	r24, r26
 5e2:	08 95       	ret

000005e4 <fdevopen>:
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	31 f4       	brne	.+12     	; 0x5fc <fdevopen+0x18>
 5f0:	61 15       	cp	r22, r1
 5f2:	71 05       	cpc	r23, r1
 5f4:	19 f4       	brne	.+6      	; 0x5fc <fdevopen+0x18>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	3a c0       	rjmp	.+116    	; 0x670 <fdevopen+0x8c>
 5fc:	8b 01       	movw	r16, r22
 5fe:	ec 01       	movw	r28, r24
 600:	6e e0       	ldi	r22, 0x0E	; 14
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 64 05 	call	0xac8	; 0xac8 <calloc>
 60c:	fc 01       	movw	r30, r24
 60e:	89 2b       	or	r24, r25
 610:	91 f3       	breq	.-28     	; 0x5f6 <fdevopen+0x12>
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	83 83       	std	Z+3, r24	; 0x03
 616:	01 15       	cp	r16, r1
 618:	11 05       	cpc	r17, r1
 61a:	71 f0       	breq	.+28     	; 0x638 <fdevopen+0x54>
 61c:	13 87       	std	Z+11, r17	; 0x0b
 61e:	02 87       	std	Z+10, r16	; 0x0a
 620:	81 e8       	ldi	r24, 0x81	; 129
 622:	83 83       	std	Z+3, r24	; 0x03
 624:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__iob>
 628:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__iob+0x1>
 62c:	89 2b       	or	r24, r25
 62e:	21 f4       	brne	.+8      	; 0x638 <fdevopen+0x54>
 630:	f0 93 dd 01 	sts	0x01DD, r31	; 0x8001dd <__iob+0x1>
 634:	e0 93 dc 01 	sts	0x01DC, r30	; 0x8001dc <__iob>
 638:	20 97       	sbiw	r28, 0x00	; 0
 63a:	c9 f0       	breq	.+50     	; 0x66e <fdevopen+0x8a>
 63c:	d1 87       	std	Z+9, r29	; 0x09
 63e:	c0 87       	std	Z+8, r28	; 0x08
 640:	83 81       	ldd	r24, Z+3	; 0x03
 642:	82 60       	ori	r24, 0x02	; 2
 644:	83 83       	std	Z+3, r24	; 0x03
 646:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x2>
 64a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x3>
 64e:	89 2b       	or	r24, r25
 650:	71 f4       	brne	.+28     	; 0x66e <fdevopen+0x8a>
 652:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__iob+0x3>
 656:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__iob+0x2>
 65a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__iob+0x4>
 65e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__iob+0x5>
 662:	89 2b       	or	r24, r25
 664:	21 f4       	brne	.+8      	; 0x66e <fdevopen+0x8a>
 666:	f0 93 e1 01 	sts	0x01E1, r31	; 0x8001e1 <__iob+0x5>
 66a:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <__iob+0x4>
 66e:	cf 01       	movw	r24, r30
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	08 95       	ret

0000067a <printf>:
 67a:	a0 e0       	ldi	r26, 0x00	; 0
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e3 e4       	ldi	r30, 0x43	; 67
 680:	f3 e0       	ldi	r31, 0x03	; 3
 682:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__prologue_saves__+0x20>
 686:	ae 01       	movw	r20, r28
 688:	4b 5f       	subi	r20, 0xFB	; 251
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	fa 01       	movw	r30, r20
 68e:	61 91       	ld	r22, Z+
 690:	71 91       	ld	r23, Z+
 692:	af 01       	movw	r20, r30
 694:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x2>
 698:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x3>
 69c:	0e 94 83 03 	call	0x706	; 0x706 <vfprintf>
 6a0:	e2 e0       	ldi	r30, 0x02	; 2
 6a2:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__epilogue_restores__+0x20>

000006a6 <puts>:
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__iob+0x2>
 6b2:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__iob+0x3>
 6b6:	23 81       	ldd	r18, Z+3	; 0x03
 6b8:	21 ff       	sbrs	r18, 1
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <puts+0x4c>
 6bc:	8c 01       	movw	r16, r24
 6be:	d0 e0       	ldi	r29, 0x00	; 0
 6c0:	c0 e0       	ldi	r28, 0x00	; 0
 6c2:	f8 01       	movw	r30, r16
 6c4:	81 91       	ld	r24, Z+
 6c6:	8f 01       	movw	r16, r30
 6c8:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <__iob+0x2>
 6cc:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <__iob+0x3>
 6d0:	db 01       	movw	r26, r22
 6d2:	18 96       	adiw	r26, 0x08	; 8
 6d4:	ed 91       	ld	r30, X+
 6d6:	fc 91       	ld	r31, X
 6d8:	19 97       	sbiw	r26, 0x09	; 9
 6da:	88 23       	and	r24, r24
 6dc:	31 f0       	breq	.+12     	; 0x6ea <puts+0x44>
 6de:	09 95       	icall
 6e0:	89 2b       	or	r24, r25
 6e2:	79 f3       	breq	.-34     	; 0x6c2 <puts+0x1c>
 6e4:	df ef       	ldi	r29, 0xFF	; 255
 6e6:	cf ef       	ldi	r28, 0xFF	; 255
 6e8:	ec cf       	rjmp	.-40     	; 0x6c2 <puts+0x1c>
 6ea:	8a e0       	ldi	r24, 0x0A	; 10
 6ec:	09 95       	icall
 6ee:	89 2b       	or	r24, r25
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <puts+0x52>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <puts+0x56>
 6f8:	8d 2f       	mov	r24, r29
 6fa:	9c 2f       	mov	r25, r28
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	08 95       	ret

00000706 <vfprintf>:
 706:	ab e0       	ldi	r26, 0x0B	; 11
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	e9 e8       	ldi	r30, 0x89	; 137
 70c:	f3 e0       	ldi	r31, 0x03	; 3
 70e:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__prologue_saves__>
 712:	6c 01       	movw	r12, r24
 714:	7b 01       	movw	r14, r22
 716:	8a 01       	movw	r16, r20
 718:	fc 01       	movw	r30, r24
 71a:	17 82       	std	Z+7, r1	; 0x07
 71c:	16 82       	std	Z+6, r1	; 0x06
 71e:	83 81       	ldd	r24, Z+3	; 0x03
 720:	81 ff       	sbrs	r24, 1
 722:	cc c1       	rjmp	.+920    	; 0xabc <vfprintf+0x3b6>
 724:	ce 01       	movw	r24, r28
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	3c 01       	movw	r6, r24
 72a:	f6 01       	movw	r30, r12
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	f7 01       	movw	r30, r14
 730:	93 fd       	sbrc	r25, 3
 732:	85 91       	lpm	r24, Z+
 734:	93 ff       	sbrs	r25, 3
 736:	81 91       	ld	r24, Z+
 738:	7f 01       	movw	r14, r30
 73a:	88 23       	and	r24, r24
 73c:	09 f4       	brne	.+2      	; 0x740 <vfprintf+0x3a>
 73e:	ba c1       	rjmp	.+884    	; 0xab4 <vfprintf+0x3ae>
 740:	85 32       	cpi	r24, 0x25	; 37
 742:	39 f4       	brne	.+14     	; 0x752 <vfprintf+0x4c>
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	7f 01       	movw	r14, r30
 74e:	85 32       	cpi	r24, 0x25	; 37
 750:	29 f4       	brne	.+10     	; 0x75c <vfprintf+0x56>
 752:	b6 01       	movw	r22, r12
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 75a:	e7 cf       	rjmp	.-50     	; 0x72a <vfprintf+0x24>
 75c:	91 2c       	mov	r9, r1
 75e:	21 2c       	mov	r2, r1
 760:	31 2c       	mov	r3, r1
 762:	ff e1       	ldi	r31, 0x1F	; 31
 764:	f3 15       	cp	r31, r3
 766:	d8 f0       	brcs	.+54     	; 0x79e <vfprintf+0x98>
 768:	8b 32       	cpi	r24, 0x2B	; 43
 76a:	79 f0       	breq	.+30     	; 0x78a <vfprintf+0x84>
 76c:	38 f4       	brcc	.+14     	; 0x77c <vfprintf+0x76>
 76e:	80 32       	cpi	r24, 0x20	; 32
 770:	79 f0       	breq	.+30     	; 0x790 <vfprintf+0x8a>
 772:	83 32       	cpi	r24, 0x23	; 35
 774:	a1 f4       	brne	.+40     	; 0x79e <vfprintf+0x98>
 776:	23 2d       	mov	r18, r3
 778:	20 61       	ori	r18, 0x10	; 16
 77a:	1d c0       	rjmp	.+58     	; 0x7b6 <vfprintf+0xb0>
 77c:	8d 32       	cpi	r24, 0x2D	; 45
 77e:	61 f0       	breq	.+24     	; 0x798 <vfprintf+0x92>
 780:	80 33       	cpi	r24, 0x30	; 48
 782:	69 f4       	brne	.+26     	; 0x79e <vfprintf+0x98>
 784:	23 2d       	mov	r18, r3
 786:	21 60       	ori	r18, 0x01	; 1
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <vfprintf+0xb0>
 78a:	83 2d       	mov	r24, r3
 78c:	82 60       	ori	r24, 0x02	; 2
 78e:	38 2e       	mov	r3, r24
 790:	e3 2d       	mov	r30, r3
 792:	e4 60       	ori	r30, 0x04	; 4
 794:	3e 2e       	mov	r3, r30
 796:	2a c0       	rjmp	.+84     	; 0x7ec <vfprintf+0xe6>
 798:	f3 2d       	mov	r31, r3
 79a:	f8 60       	ori	r31, 0x08	; 8
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <vfprintf+0xd2>
 79e:	37 fc       	sbrc	r3, 7
 7a0:	2d c0       	rjmp	.+90     	; 0x7fc <vfprintf+0xf6>
 7a2:	20 ed       	ldi	r18, 0xD0	; 208
 7a4:	28 0f       	add	r18, r24
 7a6:	2a 30       	cpi	r18, 0x0A	; 10
 7a8:	40 f0       	brcs	.+16     	; 0x7ba <vfprintf+0xb4>
 7aa:	8e 32       	cpi	r24, 0x2E	; 46
 7ac:	b9 f4       	brne	.+46     	; 0x7dc <vfprintf+0xd6>
 7ae:	36 fc       	sbrc	r3, 6
 7b0:	81 c1       	rjmp	.+770    	; 0xab4 <vfprintf+0x3ae>
 7b2:	23 2d       	mov	r18, r3
 7b4:	20 64       	ori	r18, 0x40	; 64
 7b6:	32 2e       	mov	r3, r18
 7b8:	19 c0       	rjmp	.+50     	; 0x7ec <vfprintf+0xe6>
 7ba:	36 fe       	sbrs	r3, 6
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0xc4>
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	98 9e       	mul	r9, r24
 7c2:	20 0d       	add	r18, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	92 2e       	mov	r9, r18
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <vfprintf+0xe6>
 7ca:	ea e0       	ldi	r30, 0x0A	; 10
 7cc:	2e 9e       	mul	r2, r30
 7ce:	20 0d       	add	r18, r0
 7d0:	11 24       	eor	r1, r1
 7d2:	22 2e       	mov	r2, r18
 7d4:	f3 2d       	mov	r31, r3
 7d6:	f0 62       	ori	r31, 0x20	; 32
 7d8:	3f 2e       	mov	r3, r31
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0xe6>
 7dc:	8c 36       	cpi	r24, 0x6C	; 108
 7de:	21 f4       	brne	.+8      	; 0x7e8 <vfprintf+0xe2>
 7e0:	83 2d       	mov	r24, r3
 7e2:	80 68       	ori	r24, 0x80	; 128
 7e4:	38 2e       	mov	r3, r24
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0xe6>
 7e8:	88 36       	cpi	r24, 0x68	; 104
 7ea:	41 f4       	brne	.+16     	; 0x7fc <vfprintf+0xf6>
 7ec:	f7 01       	movw	r30, r14
 7ee:	93 fd       	sbrc	r25, 3
 7f0:	85 91       	lpm	r24, Z+
 7f2:	93 ff       	sbrs	r25, 3
 7f4:	81 91       	ld	r24, Z+
 7f6:	7f 01       	movw	r14, r30
 7f8:	81 11       	cpse	r24, r1
 7fa:	b3 cf       	rjmp	.-154    	; 0x762 <vfprintf+0x5c>
 7fc:	98 2f       	mov	r25, r24
 7fe:	9f 7d       	andi	r25, 0xDF	; 223
 800:	95 54       	subi	r25, 0x45	; 69
 802:	93 30       	cpi	r25, 0x03	; 3
 804:	28 f4       	brcc	.+10     	; 0x810 <vfprintf+0x10a>
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	9f e3       	ldi	r25, 0x3F	; 63
 80c:	99 83       	std	Y+1, r25	; 0x01
 80e:	0d c0       	rjmp	.+26     	; 0x82a <vfprintf+0x124>
 810:	83 36       	cpi	r24, 0x63	; 99
 812:	31 f0       	breq	.+12     	; 0x820 <vfprintf+0x11a>
 814:	83 37       	cpi	r24, 0x73	; 115
 816:	71 f0       	breq	.+28     	; 0x834 <vfprintf+0x12e>
 818:	83 35       	cpi	r24, 0x53	; 83
 81a:	09 f0       	breq	.+2      	; 0x81e <vfprintf+0x118>
 81c:	59 c0       	rjmp	.+178    	; 0x8d0 <vfprintf+0x1ca>
 81e:	21 c0       	rjmp	.+66     	; 0x862 <vfprintf+0x15c>
 820:	f8 01       	movw	r30, r16
 822:	80 81       	ld	r24, Z
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	88 24       	eor	r8, r8
 82c:	83 94       	inc	r8
 82e:	91 2c       	mov	r9, r1
 830:	53 01       	movw	r10, r6
 832:	13 c0       	rjmp	.+38     	; 0x85a <vfprintf+0x154>
 834:	28 01       	movw	r4, r16
 836:	f2 e0       	ldi	r31, 0x02	; 2
 838:	4f 0e       	add	r4, r31
 83a:	51 1c       	adc	r5, r1
 83c:	f8 01       	movw	r30, r16
 83e:	a0 80       	ld	r10, Z
 840:	b1 80       	ldd	r11, Z+1	; 0x01
 842:	36 fe       	sbrs	r3, 6
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x146>
 846:	69 2d       	mov	r22, r9
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x14a>
 84c:	6f ef       	ldi	r22, 0xFF	; 255
 84e:	7f ef       	ldi	r23, 0xFF	; 255
 850:	c5 01       	movw	r24, r10
 852:	0e 94 b3 06 	call	0xd66	; 0xd66 <strnlen>
 856:	4c 01       	movw	r8, r24
 858:	82 01       	movw	r16, r4
 85a:	f3 2d       	mov	r31, r3
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	16 c0       	rjmp	.+44     	; 0x88e <vfprintf+0x188>
 862:	28 01       	movw	r4, r16
 864:	22 e0       	ldi	r18, 0x02	; 2
 866:	42 0e       	add	r4, r18
 868:	51 1c       	adc	r5, r1
 86a:	f8 01       	movw	r30, r16
 86c:	a0 80       	ld	r10, Z
 86e:	b1 80       	ldd	r11, Z+1	; 0x01
 870:	36 fe       	sbrs	r3, 6
 872:	03 c0       	rjmp	.+6      	; 0x87a <vfprintf+0x174>
 874:	69 2d       	mov	r22, r9
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <vfprintf+0x178>
 87a:	6f ef       	ldi	r22, 0xFF	; 255
 87c:	7f ef       	ldi	r23, 0xFF	; 255
 87e:	c5 01       	movw	r24, r10
 880:	0e 94 a1 06 	call	0xd42	; 0xd42 <strnlen_P>
 884:	4c 01       	movw	r8, r24
 886:	f3 2d       	mov	r31, r3
 888:	f0 68       	ori	r31, 0x80	; 128
 88a:	3f 2e       	mov	r3, r31
 88c:	82 01       	movw	r16, r4
 88e:	33 fc       	sbrc	r3, 3
 890:	1b c0       	rjmp	.+54     	; 0x8c8 <vfprintf+0x1c2>
 892:	82 2d       	mov	r24, r2
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	88 16       	cp	r8, r24
 898:	99 06       	cpc	r9, r25
 89a:	b0 f4       	brcc	.+44     	; 0x8c8 <vfprintf+0x1c2>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f4 cf       	rjmp	.-24     	; 0x892 <vfprintf+0x18c>
 8aa:	f5 01       	movw	r30, r10
 8ac:	37 fc       	sbrc	r3, 7
 8ae:	85 91       	lpm	r24, Z+
 8b0:	37 fe       	sbrs	r3, 7
 8b2:	81 91       	ld	r24, Z+
 8b4:	5f 01       	movw	r10, r30
 8b6:	b6 01       	movw	r22, r12
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 8be:	21 10       	cpse	r2, r1
 8c0:	2a 94       	dec	r2
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	82 1a       	sub	r8, r18
 8c6:	91 08       	sbc	r9, r1
 8c8:	81 14       	cp	r8, r1
 8ca:	91 04       	cpc	r9, r1
 8cc:	71 f7       	brne	.-36     	; 0x8aa <vfprintf+0x1a4>
 8ce:	e8 c0       	rjmp	.+464    	; 0xaa0 <vfprintf+0x39a>
 8d0:	84 36       	cpi	r24, 0x64	; 100
 8d2:	11 f0       	breq	.+4      	; 0x8d8 <vfprintf+0x1d2>
 8d4:	89 36       	cpi	r24, 0x69	; 105
 8d6:	41 f5       	brne	.+80     	; 0x928 <vfprintf+0x222>
 8d8:	f8 01       	movw	r30, r16
 8da:	37 fe       	sbrs	r3, 7
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <vfprintf+0x1e6>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	82 81       	ldd	r24, Z+2	; 0x02
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x1f6>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	07 2e       	mov	r0, r23
 8f2:	00 0c       	add	r0, r0
 8f4:	88 0b       	sbc	r24, r24
 8f6:	99 0b       	sbc	r25, r25
 8f8:	0e 5f       	subi	r16, 0xFE	; 254
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	f3 2d       	mov	r31, r3
 8fe:	ff 76       	andi	r31, 0x6F	; 111
 900:	3f 2e       	mov	r3, r31
 902:	97 ff       	sbrs	r25, 7
 904:	09 c0       	rjmp	.+18     	; 0x918 <vfprintf+0x212>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	f0 68       	ori	r31, 0x80	; 128
 916:	3f 2e       	mov	r3, r31
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	a3 01       	movw	r20, r6
 91e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__ultoa_invert>
 922:	88 2e       	mov	r8, r24
 924:	86 18       	sub	r8, r6
 926:	45 c0       	rjmp	.+138    	; 0x9b2 <vfprintf+0x2ac>
 928:	85 37       	cpi	r24, 0x75	; 117
 92a:	31 f4       	brne	.+12     	; 0x938 <vfprintf+0x232>
 92c:	23 2d       	mov	r18, r3
 92e:	2f 7e       	andi	r18, 0xEF	; 239
 930:	b2 2e       	mov	r11, r18
 932:	2a e0       	ldi	r18, 0x0A	; 10
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	25 c0       	rjmp	.+74     	; 0x982 <vfprintf+0x27c>
 938:	93 2d       	mov	r25, r3
 93a:	99 7f       	andi	r25, 0xF9	; 249
 93c:	b9 2e       	mov	r11, r25
 93e:	8f 36       	cpi	r24, 0x6F	; 111
 940:	c1 f0       	breq	.+48     	; 0x972 <vfprintf+0x26c>
 942:	18 f4       	brcc	.+6      	; 0x94a <vfprintf+0x244>
 944:	88 35       	cpi	r24, 0x58	; 88
 946:	79 f0       	breq	.+30     	; 0x966 <vfprintf+0x260>
 948:	b5 c0       	rjmp	.+362    	; 0xab4 <vfprintf+0x3ae>
 94a:	80 37       	cpi	r24, 0x70	; 112
 94c:	19 f0       	breq	.+6      	; 0x954 <vfprintf+0x24e>
 94e:	88 37       	cpi	r24, 0x78	; 120
 950:	21 f0       	breq	.+8      	; 0x95a <vfprintf+0x254>
 952:	b0 c0       	rjmp	.+352    	; 0xab4 <vfprintf+0x3ae>
 954:	e9 2f       	mov	r30, r25
 956:	e0 61       	ori	r30, 0x10	; 16
 958:	be 2e       	mov	r11, r30
 95a:	b4 fe       	sbrs	r11, 4
 95c:	0d c0       	rjmp	.+26     	; 0x978 <vfprintf+0x272>
 95e:	fb 2d       	mov	r31, r11
 960:	f4 60       	ori	r31, 0x04	; 4
 962:	bf 2e       	mov	r11, r31
 964:	09 c0       	rjmp	.+18     	; 0x978 <vfprintf+0x272>
 966:	34 fe       	sbrs	r3, 4
 968:	0a c0       	rjmp	.+20     	; 0x97e <vfprintf+0x278>
 96a:	29 2f       	mov	r18, r25
 96c:	26 60       	ori	r18, 0x06	; 6
 96e:	b2 2e       	mov	r11, r18
 970:	06 c0       	rjmp	.+12     	; 0x97e <vfprintf+0x278>
 972:	28 e0       	ldi	r18, 0x08	; 8
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	05 c0       	rjmp	.+10     	; 0x982 <vfprintf+0x27c>
 978:	20 e1       	ldi	r18, 0x10	; 16
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	02 c0       	rjmp	.+4      	; 0x982 <vfprintf+0x27c>
 97e:	20 e1       	ldi	r18, 0x10	; 16
 980:	32 e0       	ldi	r19, 0x02	; 2
 982:	f8 01       	movw	r30, r16
 984:	b7 fe       	sbrs	r11, 7
 986:	07 c0       	rjmp	.+14     	; 0x996 <vfprintf+0x290>
 988:	60 81       	ld	r22, Z
 98a:	71 81       	ldd	r23, Z+1	; 0x01
 98c:	82 81       	ldd	r24, Z+2	; 0x02
 98e:	93 81       	ldd	r25, Z+3	; 0x03
 990:	0c 5f       	subi	r16, 0xFC	; 252
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <vfprintf+0x29c>
 996:	60 81       	ld	r22, Z
 998:	71 81       	ldd	r23, Z+1	; 0x01
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 5f       	subi	r16, 0xFE	; 254
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	a3 01       	movw	r20, r6
 9a4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__ultoa_invert>
 9a8:	88 2e       	mov	r8, r24
 9aa:	86 18       	sub	r8, r6
 9ac:	fb 2d       	mov	r31, r11
 9ae:	ff 77       	andi	r31, 0x7F	; 127
 9b0:	3f 2e       	mov	r3, r31
 9b2:	36 fe       	sbrs	r3, 6
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <vfprintf+0x2ca>
 9b6:	23 2d       	mov	r18, r3
 9b8:	2e 7f       	andi	r18, 0xFE	; 254
 9ba:	a2 2e       	mov	r10, r18
 9bc:	89 14       	cp	r8, r9
 9be:	58 f4       	brcc	.+22     	; 0x9d6 <vfprintf+0x2d0>
 9c0:	34 fe       	sbrs	r3, 4
 9c2:	0b c0       	rjmp	.+22     	; 0x9da <vfprintf+0x2d4>
 9c4:	32 fc       	sbrc	r3, 2
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <vfprintf+0x2d4>
 9c8:	83 2d       	mov	r24, r3
 9ca:	8e 7e       	andi	r24, 0xEE	; 238
 9cc:	a8 2e       	mov	r10, r24
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <vfprintf+0x2d4>
 9d0:	b8 2c       	mov	r11, r8
 9d2:	a3 2c       	mov	r10, r3
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <vfprintf+0x2d6>
 9d6:	b8 2c       	mov	r11, r8
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <vfprintf+0x2d6>
 9da:	b9 2c       	mov	r11, r9
 9dc:	a4 fe       	sbrs	r10, 4
 9de:	0f c0       	rjmp	.+30     	; 0x9fe <vfprintf+0x2f8>
 9e0:	fe 01       	movw	r30, r28
 9e2:	e8 0d       	add	r30, r8
 9e4:	f1 1d       	adc	r31, r1
 9e6:	80 81       	ld	r24, Z
 9e8:	80 33       	cpi	r24, 0x30	; 48
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <vfprintf+0x2ee>
 9ec:	9a 2d       	mov	r25, r10
 9ee:	99 7e       	andi	r25, 0xE9	; 233
 9f0:	a9 2e       	mov	r10, r25
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <vfprintf+0x300>
 9f4:	a2 fe       	sbrs	r10, 2
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0x2fe>
 9f8:	b3 94       	inc	r11
 9fa:	b3 94       	inc	r11
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <vfprintf+0x300>
 9fe:	8a 2d       	mov	r24, r10
 a00:	86 78       	andi	r24, 0x86	; 134
 a02:	09 f0       	breq	.+2      	; 0xa06 <vfprintf+0x300>
 a04:	b3 94       	inc	r11
 a06:	a3 fc       	sbrc	r10, 3
 a08:	11 c0       	rjmp	.+34     	; 0xa2c <vfprintf+0x326>
 a0a:	a0 fe       	sbrs	r10, 0
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0x314>
 a0e:	b2 14       	cp	r11, r2
 a10:	88 f4       	brcc	.+34     	; 0xa34 <vfprintf+0x32e>
 a12:	28 0c       	add	r2, r8
 a14:	92 2c       	mov	r9, r2
 a16:	9b 18       	sub	r9, r11
 a18:	0e c0       	rjmp	.+28     	; 0xa36 <vfprintf+0x330>
 a1a:	b2 14       	cp	r11, r2
 a1c:	60 f4       	brcc	.+24     	; 0xa36 <vfprintf+0x330>
 a1e:	b6 01       	movw	r22, r12
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a28:	b3 94       	inc	r11
 a2a:	f7 cf       	rjmp	.-18     	; 0xa1a <vfprintf+0x314>
 a2c:	b2 14       	cp	r11, r2
 a2e:	18 f4       	brcc	.+6      	; 0xa36 <vfprintf+0x330>
 a30:	2b 18       	sub	r2, r11
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <vfprintf+0x332>
 a34:	98 2c       	mov	r9, r8
 a36:	21 2c       	mov	r2, r1
 a38:	a4 fe       	sbrs	r10, 4
 a3a:	10 c0       	rjmp	.+32     	; 0xa5c <vfprintf+0x356>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e3       	ldi	r24, 0x30	; 48
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a46:	a2 fe       	sbrs	r10, 2
 a48:	17 c0       	rjmp	.+46     	; 0xa78 <vfprintf+0x372>
 a4a:	a1 fc       	sbrc	r10, 1
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <vfprintf+0x34e>
 a4e:	88 e7       	ldi	r24, 0x78	; 120
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <vfprintf+0x352>
 a54:	88 e5       	ldi	r24, 0x58	; 88
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	b6 01       	movw	r22, r12
 a5a:	0c c0       	rjmp	.+24     	; 0xa74 <vfprintf+0x36e>
 a5c:	8a 2d       	mov	r24, r10
 a5e:	86 78       	andi	r24, 0x86	; 134
 a60:	59 f0       	breq	.+22     	; 0xa78 <vfprintf+0x372>
 a62:	a1 fe       	sbrs	r10, 1
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <vfprintf+0x364>
 a66:	8b e2       	ldi	r24, 0x2B	; 43
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <vfprintf+0x366>
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	a7 fc       	sbrc	r10, 7
 a6e:	8d e2       	ldi	r24, 0x2D	; 45
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a78:	89 14       	cp	r8, r9
 a7a:	38 f4       	brcc	.+14     	; 0xa8a <vfprintf+0x384>
 a7c:	b6 01       	movw	r22, r12
 a7e:	80 e3       	ldi	r24, 0x30	; 48
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a86:	9a 94       	dec	r9
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <vfprintf+0x372>
 a8a:	8a 94       	dec	r8
 a8c:	f3 01       	movw	r30, r6
 a8e:	e8 0d       	add	r30, r8
 a90:	f1 1d       	adc	r31, r1
 a92:	80 81       	ld	r24, Z
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a9c:	81 10       	cpse	r8, r1
 a9e:	f5 cf       	rjmp	.-22     	; 0xa8a <vfprintf+0x384>
 aa0:	22 20       	and	r2, r2
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <vfprintf+0x3a0>
 aa4:	42 ce       	rjmp	.-892    	; 0x72a <vfprintf+0x24>
 aa6:	b6 01       	movw	r22, r12
 aa8:	80 e2       	ldi	r24, 0x20	; 32
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 ab0:	2a 94       	dec	r2
 ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <vfprintf+0x39a>
 ab4:	f6 01       	movw	r30, r12
 ab6:	86 81       	ldd	r24, Z+6	; 0x06
 ab8:	97 81       	ldd	r25, Z+7	; 0x07
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x3ba>
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	9f ef       	ldi	r25, 0xFF	; 255
 ac0:	2b 96       	adiw	r28, 0x0b	; 11
 ac2:	e2 e1       	ldi	r30, 0x12	; 18
 ac4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__epilogue_restores__>

00000ac8 <calloc>:
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	86 9f       	mul	r24, r22
 ad2:	80 01       	movw	r16, r0
 ad4:	87 9f       	mul	r24, r23
 ad6:	10 0d       	add	r17, r0
 ad8:	96 9f       	mul	r25, r22
 ada:	10 0d       	add	r17, r0
 adc:	11 24       	eor	r1, r1
 ade:	c8 01       	movw	r24, r16
 ae0:	0e 94 80 05 	call	0xb00	; 0xb00 <malloc>
 ae4:	ec 01       	movw	r28, r24
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	29 f0       	breq	.+10     	; 0xaf4 <calloc+0x2c>
 aea:	a8 01       	movw	r20, r16
 aec:	60 e0       	ldi	r22, 0x00	; 0
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	0e 94 ac 06 	call	0xd58	; 0xd58 <memset>
 af4:	ce 01       	movw	r24, r28
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	08 95       	ret

00000b00 <malloc>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	91 05       	cpc	r25, r1
 b0c:	10 f4       	brcc	.+4      	; 0xb12 <malloc+0x12>
 b0e:	82 e0       	ldi	r24, 0x02	; 2
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <__flp>
 b16:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <__flp+0x1>
 b1a:	20 e0       	ldi	r18, 0x00	; 0
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	a0 e0       	ldi	r26, 0x00	; 0
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	30 97       	sbiw	r30, 0x00	; 0
 b24:	19 f1       	breq	.+70     	; 0xb6c <malloc+0x6c>
 b26:	40 81       	ld	r20, Z
 b28:	51 81       	ldd	r21, Z+1	; 0x01
 b2a:	02 81       	ldd	r16, Z+2	; 0x02
 b2c:	13 81       	ldd	r17, Z+3	; 0x03
 b2e:	48 17       	cp	r20, r24
 b30:	59 07       	cpc	r21, r25
 b32:	c8 f0       	brcs	.+50     	; 0xb66 <malloc+0x66>
 b34:	84 17       	cp	r24, r20
 b36:	95 07       	cpc	r25, r21
 b38:	69 f4       	brne	.+26     	; 0xb54 <malloc+0x54>
 b3a:	10 97       	sbiw	r26, 0x00	; 0
 b3c:	31 f0       	breq	.+12     	; 0xb4a <malloc+0x4a>
 b3e:	12 96       	adiw	r26, 0x02	; 2
 b40:	0c 93       	st	X, r16
 b42:	12 97       	sbiw	r26, 0x02	; 2
 b44:	13 96       	adiw	r26, 0x03	; 3
 b46:	1c 93       	st	X, r17
 b48:	27 c0       	rjmp	.+78     	; 0xb98 <malloc+0x98>
 b4a:	00 93 e4 01 	sts	0x01E4, r16	; 0x8001e4 <__flp>
 b4e:	10 93 e5 01 	sts	0x01E5, r17	; 0x8001e5 <__flp+0x1>
 b52:	22 c0       	rjmp	.+68     	; 0xb98 <malloc+0x98>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	19 f0       	breq	.+6      	; 0xb60 <malloc+0x60>
 b5a:	42 17       	cp	r20, r18
 b5c:	53 07       	cpc	r21, r19
 b5e:	18 f4       	brcc	.+6      	; 0xb66 <malloc+0x66>
 b60:	9a 01       	movw	r18, r20
 b62:	bd 01       	movw	r22, r26
 b64:	ef 01       	movw	r28, r30
 b66:	df 01       	movw	r26, r30
 b68:	f8 01       	movw	r30, r16
 b6a:	db cf       	rjmp	.-74     	; 0xb22 <malloc+0x22>
 b6c:	21 15       	cp	r18, r1
 b6e:	31 05       	cpc	r19, r1
 b70:	f9 f0       	breq	.+62     	; 0xbb0 <malloc+0xb0>
 b72:	28 1b       	sub	r18, r24
 b74:	39 0b       	sbc	r19, r25
 b76:	24 30       	cpi	r18, 0x04	; 4
 b78:	31 05       	cpc	r19, r1
 b7a:	80 f4       	brcc	.+32     	; 0xb9c <malloc+0x9c>
 b7c:	8a 81       	ldd	r24, Y+2	; 0x02
 b7e:	9b 81       	ldd	r25, Y+3	; 0x03
 b80:	61 15       	cp	r22, r1
 b82:	71 05       	cpc	r23, r1
 b84:	21 f0       	breq	.+8      	; 0xb8e <malloc+0x8e>
 b86:	fb 01       	movw	r30, r22
 b88:	93 83       	std	Z+3, r25	; 0x03
 b8a:	82 83       	std	Z+2, r24	; 0x02
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <malloc+0x96>
 b8e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__flp+0x1>
 b92:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__flp>
 b96:	fe 01       	movw	r30, r28
 b98:	32 96       	adiw	r30, 0x02	; 2
 b9a:	44 c0       	rjmp	.+136    	; 0xc24 <malloc+0x124>
 b9c:	fe 01       	movw	r30, r28
 b9e:	e2 0f       	add	r30, r18
 ba0:	f3 1f       	adc	r31, r19
 ba2:	81 93       	st	Z+, r24
 ba4:	91 93       	st	Z+, r25
 ba6:	22 50       	subi	r18, 0x02	; 2
 ba8:	31 09       	sbc	r19, r1
 baa:	39 83       	std	Y+1, r19	; 0x01
 bac:	28 83       	st	Y, r18
 bae:	3a c0       	rjmp	.+116    	; 0xc24 <malloc+0x124>
 bb0:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 bb4:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 bb8:	23 2b       	or	r18, r19
 bba:	41 f4       	brne	.+16     	; 0xbcc <malloc+0xcc>
 bbc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 bc0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 bc4:	30 93 e3 01 	sts	0x01E3, r19	; 0x8001e3 <__brkval+0x1>
 bc8:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <__brkval>
 bcc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 bd0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 bd4:	21 15       	cp	r18, r1
 bd6:	31 05       	cpc	r19, r1
 bd8:	41 f4       	brne	.+16     	; 0xbea <malloc+0xea>
 bda:	2d b7       	in	r18, 0x3d	; 61
 bdc:	3e b7       	in	r19, 0x3e	; 62
 bde:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 be2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 be6:	24 1b       	sub	r18, r20
 be8:	35 0b       	sbc	r19, r21
 bea:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__brkval>
 bee:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__brkval+0x1>
 bf2:	e2 17       	cp	r30, r18
 bf4:	f3 07       	cpc	r31, r19
 bf6:	a0 f4       	brcc	.+40     	; 0xc20 <malloc+0x120>
 bf8:	2e 1b       	sub	r18, r30
 bfa:	3f 0b       	sbc	r19, r31
 bfc:	28 17       	cp	r18, r24
 bfe:	39 07       	cpc	r19, r25
 c00:	78 f0       	brcs	.+30     	; 0xc20 <malloc+0x120>
 c02:	ac 01       	movw	r20, r24
 c04:	4e 5f       	subi	r20, 0xFE	; 254
 c06:	5f 4f       	sbci	r21, 0xFF	; 255
 c08:	24 17       	cp	r18, r20
 c0a:	35 07       	cpc	r19, r21
 c0c:	48 f0       	brcs	.+18     	; 0xc20 <malloc+0x120>
 c0e:	4e 0f       	add	r20, r30
 c10:	5f 1f       	adc	r21, r31
 c12:	50 93 e3 01 	sts	0x01E3, r21	; 0x8001e3 <__brkval+0x1>
 c16:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <__brkval>
 c1a:	81 93       	st	Z+, r24
 c1c:	91 93       	st	Z+, r25
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <malloc+0x124>
 c20:	e0 e0       	ldi	r30, 0x00	; 0
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	cf 01       	movw	r24, r30
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	1f 91       	pop	r17
 c2c:	0f 91       	pop	r16
 c2e:	08 95       	ret

00000c30 <free>:
 c30:	cf 93       	push	r28
 c32:	df 93       	push	r29
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	09 f4       	brne	.+2      	; 0xc3a <free+0xa>
 c38:	81 c0       	rjmp	.+258    	; 0xd3c <free+0x10c>
 c3a:	fc 01       	movw	r30, r24
 c3c:	32 97       	sbiw	r30, 0x02	; 2
 c3e:	13 82       	std	Z+3, r1	; 0x03
 c40:	12 82       	std	Z+2, r1	; 0x02
 c42:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <__flp>
 c46:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <__flp+0x1>
 c4a:	10 97       	sbiw	r26, 0x00	; 0
 c4c:	81 f4       	brne	.+32     	; 0xc6e <free+0x3e>
 c4e:	20 81       	ld	r18, Z
 c50:	31 81       	ldd	r19, Z+1	; 0x01
 c52:	82 0f       	add	r24, r18
 c54:	93 1f       	adc	r25, r19
 c56:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 c5a:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 c5e:	28 17       	cp	r18, r24
 c60:	39 07       	cpc	r19, r25
 c62:	51 f5       	brne	.+84     	; 0xcb8 <free+0x88>
 c64:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__brkval+0x1>
 c68:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__brkval>
 c6c:	67 c0       	rjmp	.+206    	; 0xd3c <free+0x10c>
 c6e:	ed 01       	movw	r28, r26
 c70:	20 e0       	ldi	r18, 0x00	; 0
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	ce 17       	cp	r28, r30
 c76:	df 07       	cpc	r29, r31
 c78:	40 f4       	brcc	.+16     	; 0xc8a <free+0x5a>
 c7a:	4a 81       	ldd	r20, Y+2	; 0x02
 c7c:	5b 81       	ldd	r21, Y+3	; 0x03
 c7e:	9e 01       	movw	r18, r28
 c80:	41 15       	cp	r20, r1
 c82:	51 05       	cpc	r21, r1
 c84:	f1 f0       	breq	.+60     	; 0xcc2 <free+0x92>
 c86:	ea 01       	movw	r28, r20
 c88:	f5 cf       	rjmp	.-22     	; 0xc74 <free+0x44>
 c8a:	d3 83       	std	Z+3, r29	; 0x03
 c8c:	c2 83       	std	Z+2, r28	; 0x02
 c8e:	40 81       	ld	r20, Z
 c90:	51 81       	ldd	r21, Z+1	; 0x01
 c92:	84 0f       	add	r24, r20
 c94:	95 1f       	adc	r25, r21
 c96:	c8 17       	cp	r28, r24
 c98:	d9 07       	cpc	r29, r25
 c9a:	59 f4       	brne	.+22     	; 0xcb2 <free+0x82>
 c9c:	88 81       	ld	r24, Y
 c9e:	99 81       	ldd	r25, Y+1	; 0x01
 ca0:	84 0f       	add	r24, r20
 ca2:	95 1f       	adc	r25, r21
 ca4:	02 96       	adiw	r24, 0x02	; 2
 ca6:	91 83       	std	Z+1, r25	; 0x01
 ca8:	80 83       	st	Z, r24
 caa:	8a 81       	ldd	r24, Y+2	; 0x02
 cac:	9b 81       	ldd	r25, Y+3	; 0x03
 cae:	93 83       	std	Z+3, r25	; 0x03
 cb0:	82 83       	std	Z+2, r24	; 0x02
 cb2:	21 15       	cp	r18, r1
 cb4:	31 05       	cpc	r19, r1
 cb6:	29 f4       	brne	.+10     	; 0xcc2 <free+0x92>
 cb8:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__flp+0x1>
 cbc:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__flp>
 cc0:	3d c0       	rjmp	.+122    	; 0xd3c <free+0x10c>
 cc2:	e9 01       	movw	r28, r18
 cc4:	fb 83       	std	Y+3, r31	; 0x03
 cc6:	ea 83       	std	Y+2, r30	; 0x02
 cc8:	49 91       	ld	r20, Y+
 cca:	59 91       	ld	r21, Y+
 ccc:	c4 0f       	add	r28, r20
 cce:	d5 1f       	adc	r29, r21
 cd0:	ec 17       	cp	r30, r28
 cd2:	fd 07       	cpc	r31, r29
 cd4:	61 f4       	brne	.+24     	; 0xcee <free+0xbe>
 cd6:	80 81       	ld	r24, Z
 cd8:	91 81       	ldd	r25, Z+1	; 0x01
 cda:	84 0f       	add	r24, r20
 cdc:	95 1f       	adc	r25, r21
 cde:	02 96       	adiw	r24, 0x02	; 2
 ce0:	e9 01       	movw	r28, r18
 ce2:	99 83       	std	Y+1, r25	; 0x01
 ce4:	88 83       	st	Y, r24
 ce6:	82 81       	ldd	r24, Z+2	; 0x02
 ce8:	93 81       	ldd	r25, Z+3	; 0x03
 cea:	9b 83       	std	Y+3, r25	; 0x03
 cec:	8a 83       	std	Y+2, r24	; 0x02
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	12 96       	adiw	r26, 0x02	; 2
 cf4:	8d 91       	ld	r24, X+
 cf6:	9c 91       	ld	r25, X
 cf8:	13 97       	sbiw	r26, 0x03	; 3
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	19 f0       	breq	.+6      	; 0xd04 <free+0xd4>
 cfe:	fd 01       	movw	r30, r26
 d00:	dc 01       	movw	r26, r24
 d02:	f7 cf       	rjmp	.-18     	; 0xcf2 <free+0xc2>
 d04:	8d 91       	ld	r24, X+
 d06:	9c 91       	ld	r25, X
 d08:	11 97       	sbiw	r26, 0x01	; 1
 d0a:	9d 01       	movw	r18, r26
 d0c:	2e 5f       	subi	r18, 0xFE	; 254
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	82 0f       	add	r24, r18
 d12:	93 1f       	adc	r25, r19
 d14:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 d18:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	69 f4       	brne	.+26     	; 0xd3c <free+0x10c>
 d22:	30 97       	sbiw	r30, 0x00	; 0
 d24:	29 f4       	brne	.+10     	; 0xd30 <free+0x100>
 d26:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <__flp+0x1>
 d2a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__flp>
 d2e:	02 c0       	rjmp	.+4      	; 0xd34 <free+0x104>
 d30:	13 82       	std	Z+3, r1	; 0x03
 d32:	12 82       	std	Z+2, r1	; 0x02
 d34:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <__brkval+0x1>
 d38:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <__brkval>
 d3c:	df 91       	pop	r29
 d3e:	cf 91       	pop	r28
 d40:	08 95       	ret

00000d42 <strnlen_P>:
 d42:	fc 01       	movw	r30, r24
 d44:	05 90       	lpm	r0, Z+
 d46:	61 50       	subi	r22, 0x01	; 1
 d48:	70 40       	sbci	r23, 0x00	; 0
 d4a:	01 10       	cpse	r0, r1
 d4c:	d8 f7       	brcc	.-10     	; 0xd44 <strnlen_P+0x2>
 d4e:	80 95       	com	r24
 d50:	90 95       	com	r25
 d52:	8e 0f       	add	r24, r30
 d54:	9f 1f       	adc	r25, r31
 d56:	08 95       	ret

00000d58 <memset>:
 d58:	dc 01       	movw	r26, r24
 d5a:	01 c0       	rjmp	.+2      	; 0xd5e <memset+0x6>
 d5c:	6d 93       	st	X+, r22
 d5e:	41 50       	subi	r20, 0x01	; 1
 d60:	50 40       	sbci	r21, 0x00	; 0
 d62:	e0 f7       	brcc	.-8      	; 0xd5c <memset+0x4>
 d64:	08 95       	ret

00000d66 <strnlen>:
 d66:	fc 01       	movw	r30, r24
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 90       	ld	r0, Z+
 d6e:	01 10       	cpse	r0, r1
 d70:	d8 f7       	brcc	.-10     	; 0xd68 <strnlen+0x2>
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	8e 0f       	add	r24, r30
 d78:	9f 1f       	adc	r25, r31
 d7a:	08 95       	ret

00000d7c <fputc>:
 d7c:	0f 93       	push	r16
 d7e:	1f 93       	push	r17
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	fb 01       	movw	r30, r22
 d86:	23 81       	ldd	r18, Z+3	; 0x03
 d88:	21 fd       	sbrc	r18, 1
 d8a:	03 c0       	rjmp	.+6      	; 0xd92 <fputc+0x16>
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	9f ef       	ldi	r25, 0xFF	; 255
 d90:	2c c0       	rjmp	.+88     	; 0xdea <fputc+0x6e>
 d92:	22 ff       	sbrs	r18, 2
 d94:	16 c0       	rjmp	.+44     	; 0xdc2 <fputc+0x46>
 d96:	46 81       	ldd	r20, Z+6	; 0x06
 d98:	57 81       	ldd	r21, Z+7	; 0x07
 d9a:	24 81       	ldd	r18, Z+4	; 0x04
 d9c:	35 81       	ldd	r19, Z+5	; 0x05
 d9e:	42 17       	cp	r20, r18
 da0:	53 07       	cpc	r21, r19
 da2:	44 f4       	brge	.+16     	; 0xdb4 <fputc+0x38>
 da4:	a0 81       	ld	r26, Z
 da6:	b1 81       	ldd	r27, Z+1	; 0x01
 da8:	9d 01       	movw	r18, r26
 daa:	2f 5f       	subi	r18, 0xFF	; 255
 dac:	3f 4f       	sbci	r19, 0xFF	; 255
 dae:	31 83       	std	Z+1, r19	; 0x01
 db0:	20 83       	st	Z, r18
 db2:	8c 93       	st	X, r24
 db4:	26 81       	ldd	r18, Z+6	; 0x06
 db6:	37 81       	ldd	r19, Z+7	; 0x07
 db8:	2f 5f       	subi	r18, 0xFF	; 255
 dba:	3f 4f       	sbci	r19, 0xFF	; 255
 dbc:	37 83       	std	Z+7, r19	; 0x07
 dbe:	26 83       	std	Z+6, r18	; 0x06
 dc0:	14 c0       	rjmp	.+40     	; 0xdea <fputc+0x6e>
 dc2:	8b 01       	movw	r16, r22
 dc4:	ec 01       	movw	r28, r24
 dc6:	fb 01       	movw	r30, r22
 dc8:	00 84       	ldd	r0, Z+8	; 0x08
 dca:	f1 85       	ldd	r31, Z+9	; 0x09
 dcc:	e0 2d       	mov	r30, r0
 dce:	09 95       	icall
 dd0:	89 2b       	or	r24, r25
 dd2:	e1 f6       	brne	.-72     	; 0xd8c <fputc+0x10>
 dd4:	d8 01       	movw	r26, r16
 dd6:	16 96       	adiw	r26, 0x06	; 6
 dd8:	8d 91       	ld	r24, X+
 dda:	9c 91       	ld	r25, X
 ddc:	17 97       	sbiw	r26, 0x07	; 7
 dde:	01 96       	adiw	r24, 0x01	; 1
 de0:	17 96       	adiw	r26, 0x07	; 7
 de2:	9c 93       	st	X, r25
 de4:	8e 93       	st	-X, r24
 de6:	16 97       	sbiw	r26, 0x06	; 6
 de8:	ce 01       	movw	r24, r28
 dea:	df 91       	pop	r29
 dec:	cf 91       	pop	r28
 dee:	1f 91       	pop	r17
 df0:	0f 91       	pop	r16
 df2:	08 95       	ret

00000df4 <__ultoa_invert>:
 df4:	fa 01       	movw	r30, r20
 df6:	aa 27       	eor	r26, r26
 df8:	28 30       	cpi	r18, 0x08	; 8
 dfa:	51 f1       	breq	.+84     	; 0xe50 <__ultoa_invert+0x5c>
 dfc:	20 31       	cpi	r18, 0x10	; 16
 dfe:	81 f1       	breq	.+96     	; 0xe60 <__ultoa_invert+0x6c>
 e00:	e8 94       	clt
 e02:	6f 93       	push	r22
 e04:	6e 7f       	andi	r22, 0xFE	; 254
 e06:	6e 5f       	subi	r22, 0xFE	; 254
 e08:	7f 4f       	sbci	r23, 0xFF	; 255
 e0a:	8f 4f       	sbci	r24, 0xFF	; 255
 e0c:	9f 4f       	sbci	r25, 0xFF	; 255
 e0e:	af 4f       	sbci	r26, 0xFF	; 255
 e10:	b1 e0       	ldi	r27, 0x01	; 1
 e12:	3e d0       	rcall	.+124    	; 0xe90 <__ultoa_invert+0x9c>
 e14:	b4 e0       	ldi	r27, 0x04	; 4
 e16:	3c d0       	rcall	.+120    	; 0xe90 <__ultoa_invert+0x9c>
 e18:	67 0f       	add	r22, r23
 e1a:	78 1f       	adc	r23, r24
 e1c:	89 1f       	adc	r24, r25
 e1e:	9a 1f       	adc	r25, r26
 e20:	a1 1d       	adc	r26, r1
 e22:	68 0f       	add	r22, r24
 e24:	79 1f       	adc	r23, r25
 e26:	8a 1f       	adc	r24, r26
 e28:	91 1d       	adc	r25, r1
 e2a:	a1 1d       	adc	r26, r1
 e2c:	6a 0f       	add	r22, r26
 e2e:	71 1d       	adc	r23, r1
 e30:	81 1d       	adc	r24, r1
 e32:	91 1d       	adc	r25, r1
 e34:	a1 1d       	adc	r26, r1
 e36:	20 d0       	rcall	.+64     	; 0xe78 <__ultoa_invert+0x84>
 e38:	09 f4       	brne	.+2      	; 0xe3c <__ultoa_invert+0x48>
 e3a:	68 94       	set
 e3c:	3f 91       	pop	r19
 e3e:	2a e0       	ldi	r18, 0x0A	; 10
 e40:	26 9f       	mul	r18, r22
 e42:	11 24       	eor	r1, r1
 e44:	30 19       	sub	r19, r0
 e46:	30 5d       	subi	r19, 0xD0	; 208
 e48:	31 93       	st	Z+, r19
 e4a:	de f6       	brtc	.-74     	; 0xe02 <__ultoa_invert+0xe>
 e4c:	cf 01       	movw	r24, r30
 e4e:	08 95       	ret
 e50:	46 2f       	mov	r20, r22
 e52:	47 70       	andi	r20, 0x07	; 7
 e54:	40 5d       	subi	r20, 0xD0	; 208
 e56:	41 93       	st	Z+, r20
 e58:	b3 e0       	ldi	r27, 0x03	; 3
 e5a:	0f d0       	rcall	.+30     	; 0xe7a <__ultoa_invert+0x86>
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__ultoa_invert+0x5c>
 e5e:	f6 cf       	rjmp	.-20     	; 0xe4c <__ultoa_invert+0x58>
 e60:	46 2f       	mov	r20, r22
 e62:	4f 70       	andi	r20, 0x0F	; 15
 e64:	40 5d       	subi	r20, 0xD0	; 208
 e66:	4a 33       	cpi	r20, 0x3A	; 58
 e68:	18 f0       	brcs	.+6      	; 0xe70 <__ultoa_invert+0x7c>
 e6a:	49 5d       	subi	r20, 0xD9	; 217
 e6c:	31 fd       	sbrc	r19, 1
 e6e:	40 52       	subi	r20, 0x20	; 32
 e70:	41 93       	st	Z+, r20
 e72:	02 d0       	rcall	.+4      	; 0xe78 <__ultoa_invert+0x84>
 e74:	a9 f7       	brne	.-22     	; 0xe60 <__ultoa_invert+0x6c>
 e76:	ea cf       	rjmp	.-44     	; 0xe4c <__ultoa_invert+0x58>
 e78:	b4 e0       	ldi	r27, 0x04	; 4
 e7a:	a6 95       	lsr	r26
 e7c:	97 95       	ror	r25
 e7e:	87 95       	ror	r24
 e80:	77 95       	ror	r23
 e82:	67 95       	ror	r22
 e84:	ba 95       	dec	r27
 e86:	c9 f7       	brne	.-14     	; 0xe7a <__ultoa_invert+0x86>
 e88:	00 97       	sbiw	r24, 0x00	; 0
 e8a:	61 05       	cpc	r22, r1
 e8c:	71 05       	cpc	r23, r1
 e8e:	08 95       	ret
 e90:	9b 01       	movw	r18, r22
 e92:	ac 01       	movw	r20, r24
 e94:	0a 2e       	mov	r0, r26
 e96:	06 94       	lsr	r0
 e98:	57 95       	ror	r21
 e9a:	47 95       	ror	r20
 e9c:	37 95       	ror	r19
 e9e:	27 95       	ror	r18
 ea0:	ba 95       	dec	r27
 ea2:	c9 f7       	brne	.-14     	; 0xe96 <__ultoa_invert+0xa2>
 ea4:	62 0f       	add	r22, r18
 ea6:	73 1f       	adc	r23, r19
 ea8:	84 1f       	adc	r24, r20
 eaa:	95 1f       	adc	r25, r21
 eac:	a0 1d       	adc	r26, r0
 eae:	08 95       	ret

00000eb0 <__prologue_saves__>:
 eb0:	2f 92       	push	r2
 eb2:	3f 92       	push	r3
 eb4:	4f 92       	push	r4
 eb6:	5f 92       	push	r5
 eb8:	6f 92       	push	r6
 eba:	7f 92       	push	r7
 ebc:	8f 92       	push	r8
 ebe:	9f 92       	push	r9
 ec0:	af 92       	push	r10
 ec2:	bf 92       	push	r11
 ec4:	cf 92       	push	r12
 ec6:	df 92       	push	r13
 ec8:	ef 92       	push	r14
 eca:	ff 92       	push	r15
 ecc:	0f 93       	push	r16
 ece:	1f 93       	push	r17
 ed0:	cf 93       	push	r28
 ed2:	df 93       	push	r29
 ed4:	cd b7       	in	r28, 0x3d	; 61
 ed6:	de b7       	in	r29, 0x3e	; 62
 ed8:	ca 1b       	sub	r28, r26
 eda:	db 0b       	sbc	r29, r27
 edc:	0f b6       	in	r0, 0x3f	; 63
 ede:	f8 94       	cli
 ee0:	de bf       	out	0x3e, r29	; 62
 ee2:	0f be       	out	0x3f, r0	; 63
 ee4:	cd bf       	out	0x3d, r28	; 61
 ee6:	09 94       	ijmp

00000ee8 <__epilogue_restores__>:
 ee8:	2a 88       	ldd	r2, Y+18	; 0x12
 eea:	39 88       	ldd	r3, Y+17	; 0x11
 eec:	48 88       	ldd	r4, Y+16	; 0x10
 eee:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ef4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef8:	aa 84       	ldd	r10, Y+10	; 0x0a
 efa:	b9 84       	ldd	r11, Y+9	; 0x09
 efc:	c8 84       	ldd	r12, Y+8	; 0x08
 efe:	df 80       	ldd	r13, Y+7	; 0x07
 f00:	ee 80       	ldd	r14, Y+6	; 0x06
 f02:	fd 80       	ldd	r15, Y+5	; 0x05
 f04:	0c 81       	ldd	r16, Y+4	; 0x04
 f06:	1b 81       	ldd	r17, Y+3	; 0x03
 f08:	aa 81       	ldd	r26, Y+2	; 0x02
 f0a:	b9 81       	ldd	r27, Y+1	; 0x01
 f0c:	ce 0f       	add	r28, r30
 f0e:	d1 1d       	adc	r29, r1
 f10:	0f b6       	in	r0, 0x3f	; 63
 f12:	f8 94       	cli
 f14:	de bf       	out	0x3e, r29	; 62
 f16:	0f be       	out	0x3f, r0	; 63
 f18:	cd bf       	out	0x3d, r28	; 61
 f1a:	ed 01       	movw	r28, r26
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>
