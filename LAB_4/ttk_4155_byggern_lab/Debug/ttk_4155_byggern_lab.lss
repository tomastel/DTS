
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00000ffe  00001092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001da  008001da  0000116c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001624  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cee  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dac  00000000  00000000  0000368e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  0000443c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000737  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  00004fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_1>
   8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_2>
   c:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ef       	ldi	r30, 0xFE	; 254
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 3d       	cpi	r26, 0xDA	; 218
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa ed       	ldi	r26, 0xDA	; 218
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 3e       	cpi	r26, 0xE8	; 232
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  a6:	0c 94 fd 07 	jmp	0xffa	; 0xffa <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
  cc:	8f b5       	in	r24, 0x2f	; 47
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
  d8:	8f b5       	in	r24, 0x2f	; 47
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
  e4:	8e b5       	in	r24, 0x2e	; 46
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8f bd       	out	0x2f, r24	; 47
 102:	08 95       	ret

00000104 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <adc_read+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <adc_read+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
 118:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1218>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	91 e3       	ldi	r25, 0x31	; 49
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <adc_read+0x1a>
 122:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <adc_read+0x3e>
		adc_value[i] = adc[i];
 12a:	f9 01       	movw	r30, r18
 12c:	fc 5e       	subi	r31, 0xEC	; 236
 12e:	90 81       	ld	r25, Z
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	24 30       	cpi	r18, 0x04	; 4
 144:	31 05       	cpc	r19, r1
 146:	88 f3       	brcs	.-30     	; 0x12a <adc_read+0x26>
		adc_value[i] = adc[i];
	}
	
	
	
	return adc_value[channel];
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e8 0f       	add	r30, r24
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 16a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 174:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
	printf("offset_x: %d, offset_y: %d\r\n", offset_x, offset_y);
 178:	1f 92       	push	r1
 17a:	8f 93       	push	r24
 17c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <offset_x>
 180:	1f 92       	push	r1
 182:	8f 93       	push	r24
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	08 95       	ret

0000019e <adc_conv_js_val>:

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
 19e:	86 17       	cp	r24, r22
 1a0:	a0 f0       	brcs	.+40     	; 0x1ca <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
 1a2:	46 2f       	mov	r20, r22
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	24 1b       	sub	r18, r20
 1ac:	35 0b       	sbc	r19, r21
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	62 9f       	mul	r22, r18
 1b2:	c0 01       	movw	r24, r0
 1b4:	63 9f       	mul	r22, r19
 1b6:	90 0d       	add	r25, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	6f ef       	ldi	r22, 0xFF	; 255
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	64 1b       	sub	r22, r20
 1c0:	75 0b       	sbc	r23, r21
 1c2:	0e 94 38 03 	call	0x670	; 0x670 <__divmodhi4>
 1c6:	86 2f       	mov	r24, r22
 1c8:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	26 1b       	sub	r18, r22
 1d2:	37 0b       	sbc	r19, r23
 1d4:	44 e6       	ldi	r20, 0x64	; 100
 1d6:	42 9f       	mul	r20, r18
 1d8:	c0 01       	movw	r24, r0
 1da:	43 9f       	mul	r20, r19
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	0e 94 38 03 	call	0x670	; 0x670 <__divmodhi4>
 1e4:	86 2f       	mov	r24, r22
}
 1e6:	08 95       	ret

000001e8 <pos_read>:

pos_t pos_read()
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
 1ec:	c0 91 db 01 	lds	r28, 0x01DB	; 0x8001db <offset_x>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 1f6:	6c 2f       	mov	r22, r28
 1f8:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 1fc:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
 1fe:	d0 91 da 01 	lds	r29, 0x01DA	; 0x8001da <__data_end>
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 208:	6d 2f       	mov	r22, r29
 20a:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_conv_js_val>
 20e:	98 2f       	mov	r25, r24
	
	return positions;
}
 210:	8c 2f       	mov	r24, r28
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
 218:	28 2f       	mov	r18, r24
 21a:	8d 5f       	subi	r24, 0xFD	; 253
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	48 f4       	brcc	.+18     	; 0x232 <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 220:	89 2f       	mov	r24, r25
 222:	9d 5f       	subi	r25, 0xFD	; 253
 224:	97 30       	cpi	r25, 0x07	; 7
 226:	d8 f0       	brcs	.+54     	; 0x25e <dir_read+0x46>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	dc f4       	brge	.+54     	; 0x262 <dir_read+0x4a>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	dc f0       	brlt	.+54     	; 0x266 <dir_read+0x4e>
 230:	15 c0       	rjmp	.+42     	; 0x25c <dir_read+0x44>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
 232:	24 30       	cpi	r18, 0x04	; 4
 234:	4c f0       	brlt	.+18     	; 0x248 <dir_read+0x30>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 236:	89 2f       	mov	r24, r25
 238:	9d 5f       	subi	r25, 0xFD	; 253
 23a:	97 30       	cpi	r25, 0x07	; 7
 23c:	b0 f0       	brcs	.+44     	; 0x26a <dir_read+0x52>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	b4 f4       	brge	.+44     	; 0x26e <dir_read+0x56>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	b4 f0       	brlt	.+44     	; 0x272 <dir_read+0x5a>
 246:	0a c0       	rjmp	.+20     	; 0x25c <dir_read+0x44>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
 248:	23 30       	cpi	r18, 0x03	; 3
 24a:	44 f4       	brge	.+16     	; 0x25c <dir_read+0x44>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 24c:	89 2f       	mov	r24, r25
 24e:	9d 5f       	subi	r25, 0xFD	; 253
 250:	97 30       	cpi	r25, 0x07	; 7
 252:	88 f0       	brcs	.+34     	; 0x276 <dir_read+0x5e>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 254:	84 30       	cpi	r24, 0x04	; 4
 256:	8c f4       	brge	.+34     	; 0x27a <dir_read+0x62>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	8c f0       	brlt	.+34     	; 0x27e <dir_read+0x66>
			return DOWN_LEFT;
		}
	}
}
 25c:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
 27e:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
 280:	08 95       	ret

00000282 <slider_read>:

uint8_t slider_read(uint8_t channel)
{
	return (100 * adc_read(channel) / ADC_MAX);
 282:	0e 94 82 00 	call	0x104	; 0x104 <adc_read>
 286:	24 e6       	ldi	r18, 0x64	; 100
 288:	82 9f       	mul	r24, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	6f ef       	ldi	r22, 0xFF	; 255
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 38 03 	call	0x670	; 0x670 <__divmodhi4>
 296:	86 2f       	mov	r24, r22
 298:	08 95       	ret

0000029a <main>:

int main(void){
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;
	USART_drv_init(MYUBRR);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 2b 03 	call	0x656	; 0x656 <USART_drv_init>
	SRAM_init();
 2a2:	0e 94 1c 03 	call	0x638	; 0x638 <SRAM_init>
	adc_drv_init();
 2a6:	0e 94 57 00 	call	0xae	; 0xae <adc_drv_init>
	ext_button_drv_init();
 2aa:	0e 94 28 02 	call	0x450	; 0x450 <ext_button_drv_init>
	adc_calibrate();
 2ae:	0e 94 b2 00 	call	0x164	; 0x164 <adc_calibrate>
	oled_init();
 2b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <oled_init>
	oled_set_brightness(100);
 2b6:	84 e6       	ldi	r24, 0x64	; 100
 2b8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_set_brightness>

    while (1){
		
		printf("----------------------------------\r\n");
 2bc:	83 e2       	ldi	r24, 0x23	; 35
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 c1 03 	call	0x782	; 0x782 <puts>
		joystick_pos = pos_read();
 2c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <pos_read>
 2c8:	e8 2e       	mov	r14, r24
 2ca:	f9 2e       	mov	r15, r25
		joystick_dir = dir_read(joystick_pos);
 2cc:	0e 94 0c 01 	call	0x218	; 0x218 <dir_read>
 2d0:	d8 2e       	mov	r13, r24
		slider1 = slider_read(LEFT_SLIDER_CHANNEL);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2da:	8c 01       	movw	r16, r24
		slider2 = slider_read(RIGHT_SLIDER_CHANNEL);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 41 01 	call	0x282	; 0x282 <slider_read>
 2e4:	ec 01       	movw	r28, r24
		printf("X: %d\r\n", joystick_pos.X);
 2e6:	8e 2d       	mov	r24, r14
 2e8:	0e 2c       	mov	r0, r14
 2ea:	00 0c       	add	r0, r0
 2ec:	99 0b       	sbc	r25, r25
 2ee:	9f 93       	push	r25
 2f0:	ef 92       	push	r14
 2f2:	87 e4       	ldi	r24, 0x47	; 71
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
		printf("Y: %d\r\n", joystick_pos.Y);
 2fe:	8f 2d       	mov	r24, r15
 300:	0f 2c       	mov	r0, r15
 302:	00 0c       	add	r0, r0
 304:	99 0b       	sbc	r25, r25
 306:	9f 93       	push	r25
 308:	ff 92       	push	r15
 30a:	8f e4       	ldi	r24, 0x4F	; 79
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
		printf("Joystick direction: %d\r\n", joystick_dir);
 316:	1f 92       	push	r1
 318:	df 92       	push	r13
 31a:	87 e5       	ldi	r24, 0x57	; 87
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
		printf("Left slider: %d\r\n", slider1);
 326:	c8 01       	movw	r24, r16
 328:	99 27       	eor	r25, r25
 32a:	9f 93       	push	r25
 32c:	8f 93       	push	r24
 32e:	80 e7       	ldi	r24, 0x70	; 112
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
		printf("Right slider: %d\r\n", slider2);
 33a:	ce 01       	movw	r24, r28
 33c:	99 27       	eor	r25, r25
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	82 e8       	ldi	r24, 0x82	; 130
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	0e 94 ab 03 	call	0x756	; 0x756 <printf>
		printf("----------------------------------\r\n");
 34e:	83 e2       	ldi	r24, 0x23	; 35
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 c1 03 	call	0x782	; 0x782 <puts>
		oled_testingtesting();
 356:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <oled_testingtesting>
 35a:	8d b7       	in	r24, 0x3d	; 61
 35c:	9e b7       	in	r25, 0x3e	; 62
 35e:	44 96       	adiw	r24, 0x14	; 20
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	9e bf       	out	0x3e, r25	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	8d bf       	out	0x3d, r24	; 61
 36a:	a8 cf       	rjmp	.-176    	; 0x2bc <main+0x22>

0000036c <__vector_1>:
#define RIGHT_BUTTON_PIN PD3
#define JOYSTICK_BUTTON_PIN PE0


ISR (INT0_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	printf("Left button pressed\r\n");
 38e:	85 e9       	ldi	r24, 0x95	; 149
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 c1 03 	call	0x782	; 0x782 <puts>


}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_2>:

ISR (INT1_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
	printf("Right button pressed\r\n");
 3da:	8a ea       	ldi	r24, 0xAA	; 170
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 c1 03 	call	0x782	; 0x782 <puts>
}
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__vector_3>:

ISR (INT2_vect)
{
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
	printf("Joystick button pressed\r\n");
 426:	80 ec       	ldi	r24, 0xC0	; 192
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 c1 03 	call	0x782	; 0x782 <puts>


}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <ext_button_drv_init>:
void ext_button_drv_init(void)
{
	/*
	to do:			
	*/
	clear_bit(DDRD, LEFT_BUTTON_PIN);
 450:	81 b3       	in	r24, 0x11	; 17
 452:	8b 7f       	andi	r24, 0xFB	; 251
 454:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
 456:	81 b3       	in	r24, 0x11	; 17
 458:	87 7f       	andi	r24, 0xF7	; 247
 45a:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
 45c:	86 b1       	in	r24, 0x06	; 6
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
 462:	f8 94       	cli
	// Enables interrupt on pin INT0, INT1
	set_bit(GICR, LEFT_BUTTON_ISR_REGISTER);
 464:	8b b7       	in	r24, 0x3b	; 59
 466:	80 64       	ori	r24, 0x40	; 64
 468:	8b bf       	out	0x3b, r24	; 59
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
 46a:	8b b7       	in	r24, 0x3b	; 59
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT2, INT1 & INT0
	set_bit(MCUCR, ISC11);
 470:	85 b7       	in	r24, 0x35	; 53
 472:	88 60       	ori	r24, 0x08	; 8
 474:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
 476:	85 b7       	in	r24, 0x35	; 53
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC01);
 47c:	85 b7       	in	r24, 0x35	; 53
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC00);
 482:	85 b7       	in	r24, 0x35	; 53
 484:	81 60       	ori	r24, 0x01	; 1
 486:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
 488:	8b b7       	in	r24, 0x3b	; 59
 48a:	8e 7f       	andi	r24, 0xFE	; 254
 48c:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
 48e:	86 b7       	in	r24, 0x36	; 54
 490:	8e 7f       	andi	r24, 0xFE	; 254
 492:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
 494:	8a b7       	in	r24, 0x3a	; 58
 496:	80 62       	ori	r24, 0x20	; 32
 498:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
 49a:	8b b7       	in	r24, 0x3b	; 59
 49c:	80 62       	ori	r24, 0x20	; 32
 49e:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();	
 4a0:	78 94       	sei
 4a2:	08 95       	ret

000004a4 <oled_write_cmd>:
	oled_data_reg[0] = data;
	oled_cursor_counter++;
}

void oled_print(/*char**/)
{
 4a4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe18>
 4a8:	08 95       	ret

000004aa <oled_write_data>:
 4aa:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1018>
 4ae:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <oled_cursor_counter>
 4b2:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <oled_cursor_counter+0x1>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <oled_cursor_counter+0x1>
 4bc:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <oled_cursor_counter>
 4c0:	08 95       	ret

000004c2 <oled_reset>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <oled_reset+0x12>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
 4d2:	21 96       	adiw	r28, 0x01	; 1
 4d4:	c1 15       	cp	r28, r1
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	d8 07       	cpc	r29, r24
 4da:	c4 f3       	brlt	.-16     	; 0x4cc <oled_reset+0xa>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <oled_init>:
 4e2:	8e ea       	ldi	r24, 0xAE	; 174
 4e4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 4e8:	81 ea       	ldi	r24, 0xA1	; 161
 4ea:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 4ee:	8a ed       	ldi	r24, 0xDA	; 218
 4f0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 4f4:	82 e1       	ldi	r24, 0x12	; 18
 4f6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 4fa:	88 ec       	ldi	r24, 0xC8	; 200
 4fc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 500:	88 ea       	ldi	r24, 0xA8	; 168
 502:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 506:	8f e3       	ldi	r24, 0x3F	; 63
 508:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 50c:	85 ed       	ldi	r24, 0xD5	; 213
 50e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 512:	80 e8       	ldi	r24, 0x80	; 128
 514:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 518:	81 e8       	ldi	r24, 0x81	; 129
 51a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 524:	89 ed       	ldi	r24, 0xD9	; 217
 526:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 52a:	81 e2       	ldi	r24, 0x21	; 33
 52c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 53c:	8b ed       	ldi	r24, 0xDB	; 219
 53e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 542:	80 e3       	ldi	r24, 0x30	; 48
 544:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 548:	8d ea       	ldi	r24, 0xAD	; 173
 54a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 554:	84 ea       	ldi	r24, 0xA4	; 164
 556:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 55a:	86 ea       	ldi	r24, 0xA6	; 166
 55c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 560:	8f ea       	ldi	r24, 0xAF	; 175
 562:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 566:	81 e2       	ldi	r24, 0x21	; 33
 568:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 578:	82 e2       	ldi	r24, 0x22	; 34
 57a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
 58a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <oled_reset>
 58e:	08 95       	ret

00000590 <oled_home>:
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <oled_cursor_counter>
 59c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <oled_cursor_counter+0x1>
 5a0:	00 e0       	ldi	r16, 0x00	; 0
 5a2:	14 e0       	ldi	r17, 0x04	; 4
 5a4:	08 1b       	sub	r16, r24
 5a6:	19 0b       	sbc	r17, r25
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <oled_home+0x26>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
 5b4:	21 96       	adiw	r28, 0x01	; 1
 5b6:	c0 17       	cp	r28, r16
 5b8:	d1 07       	cpc	r29, r17
 5ba:	c8 f3       	brcs	.-14     	; 0x5ae <oled_home+0x1e>
 5bc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <oled_reset>
 5c0:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <oled_cursor_counter+0x1>
 5c4:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <oled_cursor_counter>
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <oled_set_brightness>:
	
}

void oled_set_brightness(uint8_t lvl_percent)
{
 5d2:	cf 93       	push	r28
	uint8_t lvl = lvl_percent * 255 / 100;
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	82 9f       	mul	r24, r18
 5d8:	c0 01       	movw	r24, r0
 5da:	11 24       	eor	r1, r1
 5dc:	64 e6       	ldi	r22, 0x64	; 100
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	0e 94 38 03 	call	0x670	; 0x670 <__divmodhi4>
 5e4:	c6 2f       	mov	r28, r22
	oled_write_cmd(0x81); //contrast control
 5e6:	81 e8       	ldi	r24, 0x81	; 129
 5e8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
	oled_write_cmd(lvl);
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 52 02 	call	0x4a4	; 0x4a4 <oled_write_cmd>
}
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <oled_testingtesting>:

void oled_testingtesting()
{
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
	for(int i = 0; i < 50; i++){
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
 5fe:	14 c0       	rjmp	.+40     	; 0x628 <oled_testingtesting+0x32>
		oled_write_data(0b00011000); // Write arrow
 600:	88 e1       	ldi	r24, 0x18	; 24
 602:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
		oled_write_data(0b00011000);
 606:	88 e1       	ldi	r24, 0x18	; 24
 608:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
		oled_write_data(0b01111110);
 60c:	8e e7       	ldi	r24, 0x7E	; 126
 60e:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
		oled_write_data(0b00111100);
 612:	8c e3       	ldi	r24, 0x3C	; 60
 614:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
		oled_write_data(0b00011000);
 618:	88 e1       	ldi	r24, 0x18	; 24
 61a:	0e 94 55 02 	call	0x4aa	; 0x4aa <oled_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 ef       	ldi	r25, 0xF0	; 240
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <oled_testingtesting+0x2c>
	oled_write_cmd(lvl);
}

void oled_testingtesting()
{
	for(int i = 0; i < 50; i++){
 626:	21 96       	adiw	r28, 0x01	; 1
 628:	c2 33       	cpi	r28, 0x32	; 50
 62a:	d1 05       	cpc	r29, r1
 62c:	4c f3       	brlt	.-46     	; 0x600 <oled_testingtesting+0xa>
		oled_write_data(0b01111110);
		oled_write_data(0b00111100);
		oled_write_data(0b00011000);
		_delay_ms(50);
	}
	oled_home();
 62e:	0e 94 c8 02 	call	0x590	; 0x590 <oled_home>
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <SRAM_init>:
 638:	85 b7       	in	r24, 0x35	; 53
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	85 bf       	out	0x35, r24	; 53
 63e:	80 b7       	in	r24, 0x30	; 48
 640:	80 62       	ori	r24, 0x20	; 32
 642:	80 bf       	out	0x30, r24	; 48
 644:	08 95       	ret

00000646 <USART_Transmit>:
 646:	5d 9b       	sbis	0x0b, 5	; 11
 648:	fe cf       	rjmp	.-4      	; 0x646 <USART_Transmit>
 64a:	8c b9       	out	0x0c, r24	; 12
 64c:	08 95       	ret

0000064e <USART_Receive>:
 64e:	5f 9b       	sbis	0x0b, 7	; 11
 650:	fe cf       	rjmp	.-4      	; 0x64e <USART_Receive>
 652:	8c b1       	in	r24, 0x0c	; 12
 654:	08 95       	ret

00000656 <USART_drv_init>:
 656:	90 bd       	out	0x20, r25	; 32
 658:	89 b9       	out	0x09, r24	; 9
 65a:	88 e1       	ldi	r24, 0x18	; 24
 65c:	8a b9       	out	0x0a, r24	; 10
 65e:	8e e8       	ldi	r24, 0x8E	; 142
 660:	80 bd       	out	0x20, r24	; 32
 662:	67 e2       	ldi	r22, 0x27	; 39
 664:	73 e0       	ldi	r23, 0x03	; 3
 666:	83 e2       	ldi	r24, 0x23	; 35
 668:	93 e0       	ldi	r25, 0x03	; 3
 66a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <fdevopen>
 66e:	08 95       	ret

00000670 <__divmodhi4>:
 670:	97 fb       	bst	r25, 7
 672:	07 2e       	mov	r0, r23
 674:	16 f4       	brtc	.+4      	; 0x67a <__divmodhi4+0xa>
 676:	00 94       	com	r0
 678:	07 d0       	rcall	.+14     	; 0x688 <__divmodhi4_neg1>
 67a:	77 fd       	sbrc	r23, 7
 67c:	09 d0       	rcall	.+18     	; 0x690 <__divmodhi4_neg2>
 67e:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodhi4>
 682:	07 fc       	sbrc	r0, 7
 684:	05 d0       	rcall	.+10     	; 0x690 <__divmodhi4_neg2>
 686:	3e f4       	brtc	.+14     	; 0x696 <__divmodhi4_exit>

00000688 <__divmodhi4_neg1>:
 688:	90 95       	com	r25
 68a:	81 95       	neg	r24
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <__divmodhi4_neg2>:
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255

00000696 <__divmodhi4_exit>:
 696:	08 95       	ret

00000698 <__udivmodhi4>:
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	51 e1       	ldi	r21, 0x11	; 17
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <__udivmodhi4_ep>

000006a0 <__udivmodhi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	a6 17       	cp	r26, r22
 6a6:	b7 07       	cpc	r27, r23
 6a8:	10 f0       	brcs	.+4      	; 0x6ae <__udivmodhi4_ep>
 6aa:	a6 1b       	sub	r26, r22
 6ac:	b7 0b       	sbc	r27, r23

000006ae <__udivmodhi4_ep>:
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	5a 95       	dec	r21
 6b4:	a9 f7       	brne	.-22     	; 0x6a0 <__udivmodhi4_loop>
 6b6:	80 95       	com	r24
 6b8:	90 95       	com	r25
 6ba:	bc 01       	movw	r22, r24
 6bc:	cd 01       	movw	r24, r26
 6be:	08 95       	ret

000006c0 <fdevopen>:
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	31 f4       	brne	.+12     	; 0x6d8 <fdevopen+0x18>
 6cc:	61 15       	cp	r22, r1
 6ce:	71 05       	cpc	r23, r1
 6d0:	19 f4       	brne	.+6      	; 0x6d8 <fdevopen+0x18>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	3a c0       	rjmp	.+116    	; 0x74c <fdevopen+0x8c>
 6d8:	8b 01       	movw	r16, r22
 6da:	ec 01       	movw	r28, r24
 6dc:	6e e0       	ldi	r22, 0x0E	; 14
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 d2 05 	call	0xba4	; 0xba4 <calloc>
 6e8:	fc 01       	movw	r30, r24
 6ea:	89 2b       	or	r24, r25
 6ec:	91 f3       	breq	.-28     	; 0x6d2 <fdevopen+0x12>
 6ee:	80 e8       	ldi	r24, 0x80	; 128
 6f0:	83 83       	std	Z+3, r24	; 0x03
 6f2:	01 15       	cp	r16, r1
 6f4:	11 05       	cpc	r17, r1
 6f6:	71 f0       	breq	.+28     	; 0x714 <fdevopen+0x54>
 6f8:	13 87       	std	Z+11, r17	; 0x0b
 6fa:	02 87       	std	Z+10, r16	; 0x0a
 6fc:	81 e8       	ldi	r24, 0x81	; 129
 6fe:	83 83       	std	Z+3, r24	; 0x03
 700:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob>
 704:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x1>
 708:	89 2b       	or	r24, r25
 70a:	21 f4       	brne	.+8      	; 0x714 <fdevopen+0x54>
 70c:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__iob+0x1>
 710:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__iob>
 714:	20 97       	sbiw	r28, 0x00	; 0
 716:	c9 f0       	breq	.+50     	; 0x74a <fdevopen+0x8a>
 718:	d1 87       	std	Z+9, r29	; 0x09
 71a:	c0 87       	std	Z+8, r28	; 0x08
 71c:	83 81       	ldd	r24, Z+3	; 0x03
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	83 83       	std	Z+3, r24	; 0x03
 722:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__iob+0x2>
 726:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__iob+0x3>
 72a:	89 2b       	or	r24, r25
 72c:	71 f4       	brne	.+28     	; 0x74a <fdevopen+0x8a>
 72e:	f0 93 e1 01 	sts	0x01E1, r31	; 0x8001e1 <__iob+0x3>
 732:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <__iob+0x2>
 736:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__iob+0x4>
 73a:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__iob+0x5>
 73e:	89 2b       	or	r24, r25
 740:	21 f4       	brne	.+8      	; 0x74a <fdevopen+0x8a>
 742:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__iob+0x5>
 746:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__iob+0x4>
 74a:	cf 01       	movw	r24, r30
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <printf>:
 756:	a0 e0       	ldi	r26, 0x00	; 0
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	e1 eb       	ldi	r30, 0xB1	; 177
 75c:	f3 e0       	ldi	r31, 0x03	; 3
 75e:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__prologue_saves__+0x20>
 762:	ae 01       	movw	r20, r28
 764:	4b 5f       	subi	r20, 0xFB	; 251
 766:	5f 4f       	sbci	r21, 0xFF	; 255
 768:	fa 01       	movw	r30, r20
 76a:	61 91       	ld	r22, Z+
 76c:	71 91       	ld	r23, Z+
 76e:	af 01       	movw	r20, r30
 770:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__iob+0x2>
 774:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__iob+0x3>
 778:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <vfprintf>
 77c:	e2 e0       	ldi	r30, 0x02	; 2
 77e:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__epilogue_restores__+0x20>

00000782 <puts>:
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__iob+0x2>
 78e:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <__iob+0x3>
 792:	23 81       	ldd	r18, Z+3	; 0x03
 794:	21 ff       	sbrs	r18, 1
 796:	1b c0       	rjmp	.+54     	; 0x7ce <puts+0x4c>
 798:	8c 01       	movw	r16, r24
 79a:	d0 e0       	ldi	r29, 0x00	; 0
 79c:	c0 e0       	ldi	r28, 0x00	; 0
 79e:	f8 01       	movw	r30, r16
 7a0:	81 91       	ld	r24, Z+
 7a2:	8f 01       	movw	r16, r30
 7a4:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <__iob+0x2>
 7a8:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <__iob+0x3>
 7ac:	db 01       	movw	r26, r22
 7ae:	18 96       	adiw	r26, 0x08	; 8
 7b0:	ed 91       	ld	r30, X+
 7b2:	fc 91       	ld	r31, X
 7b4:	19 97       	sbiw	r26, 0x09	; 9
 7b6:	88 23       	and	r24, r24
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <puts+0x44>
 7ba:	09 95       	icall
 7bc:	89 2b       	or	r24, r25
 7be:	79 f3       	breq	.-34     	; 0x79e <puts+0x1c>
 7c0:	df ef       	ldi	r29, 0xFF	; 255
 7c2:	cf ef       	ldi	r28, 0xFF	; 255
 7c4:	ec cf       	rjmp	.-40     	; 0x79e <puts+0x1c>
 7c6:	8a e0       	ldi	r24, 0x0A	; 10
 7c8:	09 95       	icall
 7ca:	89 2b       	or	r24, r25
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <puts+0x52>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <puts+0x56>
 7d4:	8d 2f       	mov	r24, r29
 7d6:	9c 2f       	mov	r25, r28
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	08 95       	ret

000007e2 <vfprintf>:
 7e2:	ab e0       	ldi	r26, 0x0B	; 11
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	e7 ef       	ldi	r30, 0xF7	; 247
 7e8:	f3 e0       	ldi	r31, 0x03	; 3
 7ea:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__prologue_saves__>
 7ee:	6c 01       	movw	r12, r24
 7f0:	7b 01       	movw	r14, r22
 7f2:	8a 01       	movw	r16, r20
 7f4:	fc 01       	movw	r30, r24
 7f6:	17 82       	std	Z+7, r1	; 0x07
 7f8:	16 82       	std	Z+6, r1	; 0x06
 7fa:	83 81       	ldd	r24, Z+3	; 0x03
 7fc:	81 ff       	sbrs	r24, 1
 7fe:	cc c1       	rjmp	.+920    	; 0xb98 <vfprintf+0x3b6>
 800:	ce 01       	movw	r24, r28
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	3c 01       	movw	r6, r24
 806:	f6 01       	movw	r30, r12
 808:	93 81       	ldd	r25, Z+3	; 0x03
 80a:	f7 01       	movw	r30, r14
 80c:	93 fd       	sbrc	r25, 3
 80e:	85 91       	lpm	r24, Z+
 810:	93 ff       	sbrs	r25, 3
 812:	81 91       	ld	r24, Z+
 814:	7f 01       	movw	r14, r30
 816:	88 23       	and	r24, r24
 818:	09 f4       	brne	.+2      	; 0x81c <vfprintf+0x3a>
 81a:	ba c1       	rjmp	.+884    	; 0xb90 <vfprintf+0x3ae>
 81c:	85 32       	cpi	r24, 0x25	; 37
 81e:	39 f4       	brne	.+14     	; 0x82e <vfprintf+0x4c>
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	7f 01       	movw	r14, r30
 82a:	85 32       	cpi	r24, 0x25	; 37
 82c:	29 f4       	brne	.+10     	; 0x838 <vfprintf+0x56>
 82e:	b6 01       	movw	r22, r12
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 836:	e7 cf       	rjmp	.-50     	; 0x806 <vfprintf+0x24>
 838:	91 2c       	mov	r9, r1
 83a:	21 2c       	mov	r2, r1
 83c:	31 2c       	mov	r3, r1
 83e:	ff e1       	ldi	r31, 0x1F	; 31
 840:	f3 15       	cp	r31, r3
 842:	d8 f0       	brcs	.+54     	; 0x87a <vfprintf+0x98>
 844:	8b 32       	cpi	r24, 0x2B	; 43
 846:	79 f0       	breq	.+30     	; 0x866 <vfprintf+0x84>
 848:	38 f4       	brcc	.+14     	; 0x858 <vfprintf+0x76>
 84a:	80 32       	cpi	r24, 0x20	; 32
 84c:	79 f0       	breq	.+30     	; 0x86c <vfprintf+0x8a>
 84e:	83 32       	cpi	r24, 0x23	; 35
 850:	a1 f4       	brne	.+40     	; 0x87a <vfprintf+0x98>
 852:	23 2d       	mov	r18, r3
 854:	20 61       	ori	r18, 0x10	; 16
 856:	1d c0       	rjmp	.+58     	; 0x892 <vfprintf+0xb0>
 858:	8d 32       	cpi	r24, 0x2D	; 45
 85a:	61 f0       	breq	.+24     	; 0x874 <vfprintf+0x92>
 85c:	80 33       	cpi	r24, 0x30	; 48
 85e:	69 f4       	brne	.+26     	; 0x87a <vfprintf+0x98>
 860:	23 2d       	mov	r18, r3
 862:	21 60       	ori	r18, 0x01	; 1
 864:	16 c0       	rjmp	.+44     	; 0x892 <vfprintf+0xb0>
 866:	83 2d       	mov	r24, r3
 868:	82 60       	ori	r24, 0x02	; 2
 86a:	38 2e       	mov	r3, r24
 86c:	e3 2d       	mov	r30, r3
 86e:	e4 60       	ori	r30, 0x04	; 4
 870:	3e 2e       	mov	r3, r30
 872:	2a c0       	rjmp	.+84     	; 0x8c8 <vfprintf+0xe6>
 874:	f3 2d       	mov	r31, r3
 876:	f8 60       	ori	r31, 0x08	; 8
 878:	1d c0       	rjmp	.+58     	; 0x8b4 <vfprintf+0xd2>
 87a:	37 fc       	sbrc	r3, 7
 87c:	2d c0       	rjmp	.+90     	; 0x8d8 <vfprintf+0xf6>
 87e:	20 ed       	ldi	r18, 0xD0	; 208
 880:	28 0f       	add	r18, r24
 882:	2a 30       	cpi	r18, 0x0A	; 10
 884:	40 f0       	brcs	.+16     	; 0x896 <vfprintf+0xb4>
 886:	8e 32       	cpi	r24, 0x2E	; 46
 888:	b9 f4       	brne	.+46     	; 0x8b8 <vfprintf+0xd6>
 88a:	36 fc       	sbrc	r3, 6
 88c:	81 c1       	rjmp	.+770    	; 0xb90 <vfprintf+0x3ae>
 88e:	23 2d       	mov	r18, r3
 890:	20 64       	ori	r18, 0x40	; 64
 892:	32 2e       	mov	r3, r18
 894:	19 c0       	rjmp	.+50     	; 0x8c8 <vfprintf+0xe6>
 896:	36 fe       	sbrs	r3, 6
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0xc4>
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	98 9e       	mul	r9, r24
 89e:	20 0d       	add	r18, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	92 2e       	mov	r9, r18
 8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <vfprintf+0xe6>
 8a6:	ea e0       	ldi	r30, 0x0A	; 10
 8a8:	2e 9e       	mul	r2, r30
 8aa:	20 0d       	add	r18, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	22 2e       	mov	r2, r18
 8b0:	f3 2d       	mov	r31, r3
 8b2:	f0 62       	ori	r31, 0x20	; 32
 8b4:	3f 2e       	mov	r3, r31
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <vfprintf+0xe6>
 8b8:	8c 36       	cpi	r24, 0x6C	; 108
 8ba:	21 f4       	brne	.+8      	; 0x8c4 <vfprintf+0xe2>
 8bc:	83 2d       	mov	r24, r3
 8be:	80 68       	ori	r24, 0x80	; 128
 8c0:	38 2e       	mov	r3, r24
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0xe6>
 8c4:	88 36       	cpi	r24, 0x68	; 104
 8c6:	41 f4       	brne	.+16     	; 0x8d8 <vfprintf+0xf6>
 8c8:	f7 01       	movw	r30, r14
 8ca:	93 fd       	sbrc	r25, 3
 8cc:	85 91       	lpm	r24, Z+
 8ce:	93 ff       	sbrs	r25, 3
 8d0:	81 91       	ld	r24, Z+
 8d2:	7f 01       	movw	r14, r30
 8d4:	81 11       	cpse	r24, r1
 8d6:	b3 cf       	rjmp	.-154    	; 0x83e <vfprintf+0x5c>
 8d8:	98 2f       	mov	r25, r24
 8da:	9f 7d       	andi	r25, 0xDF	; 223
 8dc:	95 54       	subi	r25, 0x45	; 69
 8de:	93 30       	cpi	r25, 0x03	; 3
 8e0:	28 f4       	brcc	.+10     	; 0x8ec <vfprintf+0x10a>
 8e2:	0c 5f       	subi	r16, 0xFC	; 252
 8e4:	1f 4f       	sbci	r17, 0xFF	; 255
 8e6:	9f e3       	ldi	r25, 0x3F	; 63
 8e8:	99 83       	std	Y+1, r25	; 0x01
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <vfprintf+0x124>
 8ec:	83 36       	cpi	r24, 0x63	; 99
 8ee:	31 f0       	breq	.+12     	; 0x8fc <vfprintf+0x11a>
 8f0:	83 37       	cpi	r24, 0x73	; 115
 8f2:	71 f0       	breq	.+28     	; 0x910 <vfprintf+0x12e>
 8f4:	83 35       	cpi	r24, 0x53	; 83
 8f6:	09 f0       	breq	.+2      	; 0x8fa <vfprintf+0x118>
 8f8:	59 c0       	rjmp	.+178    	; 0x9ac <vfprintf+0x1ca>
 8fa:	21 c0       	rjmp	.+66     	; 0x93e <vfprintf+0x15c>
 8fc:	f8 01       	movw	r30, r16
 8fe:	80 81       	ld	r24, Z
 900:	89 83       	std	Y+1, r24	; 0x01
 902:	0e 5f       	subi	r16, 0xFE	; 254
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	88 24       	eor	r8, r8
 908:	83 94       	inc	r8
 90a:	91 2c       	mov	r9, r1
 90c:	53 01       	movw	r10, r6
 90e:	13 c0       	rjmp	.+38     	; 0x936 <vfprintf+0x154>
 910:	28 01       	movw	r4, r16
 912:	f2 e0       	ldi	r31, 0x02	; 2
 914:	4f 0e       	add	r4, r31
 916:	51 1c       	adc	r5, r1
 918:	f8 01       	movw	r30, r16
 91a:	a0 80       	ld	r10, Z
 91c:	b1 80       	ldd	r11, Z+1	; 0x01
 91e:	36 fe       	sbrs	r3, 6
 920:	03 c0       	rjmp	.+6      	; 0x928 <vfprintf+0x146>
 922:	69 2d       	mov	r22, r9
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <vfprintf+0x14a>
 928:	6f ef       	ldi	r22, 0xFF	; 255
 92a:	7f ef       	ldi	r23, 0xFF	; 255
 92c:	c5 01       	movw	r24, r10
 92e:	0e 94 21 07 	call	0xe42	; 0xe42 <strnlen>
 932:	4c 01       	movw	r8, r24
 934:	82 01       	movw	r16, r4
 936:	f3 2d       	mov	r31, r3
 938:	ff 77       	andi	r31, 0x7F	; 127
 93a:	3f 2e       	mov	r3, r31
 93c:	16 c0       	rjmp	.+44     	; 0x96a <vfprintf+0x188>
 93e:	28 01       	movw	r4, r16
 940:	22 e0       	ldi	r18, 0x02	; 2
 942:	42 0e       	add	r4, r18
 944:	51 1c       	adc	r5, r1
 946:	f8 01       	movw	r30, r16
 948:	a0 80       	ld	r10, Z
 94a:	b1 80       	ldd	r11, Z+1	; 0x01
 94c:	36 fe       	sbrs	r3, 6
 94e:	03 c0       	rjmp	.+6      	; 0x956 <vfprintf+0x174>
 950:	69 2d       	mov	r22, r9
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <vfprintf+0x178>
 956:	6f ef       	ldi	r22, 0xFF	; 255
 958:	7f ef       	ldi	r23, 0xFF	; 255
 95a:	c5 01       	movw	r24, r10
 95c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <strnlen_P>
 960:	4c 01       	movw	r8, r24
 962:	f3 2d       	mov	r31, r3
 964:	f0 68       	ori	r31, 0x80	; 128
 966:	3f 2e       	mov	r3, r31
 968:	82 01       	movw	r16, r4
 96a:	33 fc       	sbrc	r3, 3
 96c:	1b c0       	rjmp	.+54     	; 0x9a4 <vfprintf+0x1c2>
 96e:	82 2d       	mov	r24, r2
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	88 16       	cp	r8, r24
 974:	99 06       	cpc	r9, r25
 976:	b0 f4       	brcc	.+44     	; 0x9a4 <vfprintf+0x1c2>
 978:	b6 01       	movw	r22, r12
 97a:	80 e2       	ldi	r24, 0x20	; 32
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 982:	2a 94       	dec	r2
 984:	f4 cf       	rjmp	.-24     	; 0x96e <vfprintf+0x18c>
 986:	f5 01       	movw	r30, r10
 988:	37 fc       	sbrc	r3, 7
 98a:	85 91       	lpm	r24, Z+
 98c:	37 fe       	sbrs	r3, 7
 98e:	81 91       	ld	r24, Z+
 990:	5f 01       	movw	r10, r30
 992:	b6 01       	movw	r22, r12
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 99a:	21 10       	cpse	r2, r1
 99c:	2a 94       	dec	r2
 99e:	21 e0       	ldi	r18, 0x01	; 1
 9a0:	82 1a       	sub	r8, r18
 9a2:	91 08       	sbc	r9, r1
 9a4:	81 14       	cp	r8, r1
 9a6:	91 04       	cpc	r9, r1
 9a8:	71 f7       	brne	.-36     	; 0x986 <vfprintf+0x1a4>
 9aa:	e8 c0       	rjmp	.+464    	; 0xb7c <vfprintf+0x39a>
 9ac:	84 36       	cpi	r24, 0x64	; 100
 9ae:	11 f0       	breq	.+4      	; 0x9b4 <vfprintf+0x1d2>
 9b0:	89 36       	cpi	r24, 0x69	; 105
 9b2:	41 f5       	brne	.+80     	; 0xa04 <vfprintf+0x222>
 9b4:	f8 01       	movw	r30, r16
 9b6:	37 fe       	sbrs	r3, 7
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <vfprintf+0x1e6>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	82 81       	ldd	r24, Z+2	; 0x02
 9c0:	93 81       	ldd	r25, Z+3	; 0x03
 9c2:	0c 5f       	subi	r16, 0xFC	; 252
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <vfprintf+0x1f6>
 9c8:	60 81       	ld	r22, Z
 9ca:	71 81       	ldd	r23, Z+1	; 0x01
 9cc:	07 2e       	mov	r0, r23
 9ce:	00 0c       	add	r0, r0
 9d0:	88 0b       	sbc	r24, r24
 9d2:	99 0b       	sbc	r25, r25
 9d4:	0e 5f       	subi	r16, 0xFE	; 254
 9d6:	1f 4f       	sbci	r17, 0xFF	; 255
 9d8:	f3 2d       	mov	r31, r3
 9da:	ff 76       	andi	r31, 0x6F	; 111
 9dc:	3f 2e       	mov	r3, r31
 9de:	97 ff       	sbrs	r25, 7
 9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <vfprintf+0x212>
 9e2:	90 95       	com	r25
 9e4:	80 95       	com	r24
 9e6:	70 95       	com	r23
 9e8:	61 95       	neg	r22
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	f0 68       	ori	r31, 0x80	; 128
 9f2:	3f 2e       	mov	r3, r31
 9f4:	2a e0       	ldi	r18, 0x0A	; 10
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	a3 01       	movw	r20, r6
 9fa:	0e 94 68 07 	call	0xed0	; 0xed0 <__ultoa_invert>
 9fe:	88 2e       	mov	r8, r24
 a00:	86 18       	sub	r8, r6
 a02:	45 c0       	rjmp	.+138    	; 0xa8e <vfprintf+0x2ac>
 a04:	85 37       	cpi	r24, 0x75	; 117
 a06:	31 f4       	brne	.+12     	; 0xa14 <vfprintf+0x232>
 a08:	23 2d       	mov	r18, r3
 a0a:	2f 7e       	andi	r18, 0xEF	; 239
 a0c:	b2 2e       	mov	r11, r18
 a0e:	2a e0       	ldi	r18, 0x0A	; 10
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	25 c0       	rjmp	.+74     	; 0xa5e <vfprintf+0x27c>
 a14:	93 2d       	mov	r25, r3
 a16:	99 7f       	andi	r25, 0xF9	; 249
 a18:	b9 2e       	mov	r11, r25
 a1a:	8f 36       	cpi	r24, 0x6F	; 111
 a1c:	c1 f0       	breq	.+48     	; 0xa4e <vfprintf+0x26c>
 a1e:	18 f4       	brcc	.+6      	; 0xa26 <vfprintf+0x244>
 a20:	88 35       	cpi	r24, 0x58	; 88
 a22:	79 f0       	breq	.+30     	; 0xa42 <vfprintf+0x260>
 a24:	b5 c0       	rjmp	.+362    	; 0xb90 <vfprintf+0x3ae>
 a26:	80 37       	cpi	r24, 0x70	; 112
 a28:	19 f0       	breq	.+6      	; 0xa30 <vfprintf+0x24e>
 a2a:	88 37       	cpi	r24, 0x78	; 120
 a2c:	21 f0       	breq	.+8      	; 0xa36 <vfprintf+0x254>
 a2e:	b0 c0       	rjmp	.+352    	; 0xb90 <vfprintf+0x3ae>
 a30:	e9 2f       	mov	r30, r25
 a32:	e0 61       	ori	r30, 0x10	; 16
 a34:	be 2e       	mov	r11, r30
 a36:	b4 fe       	sbrs	r11, 4
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <vfprintf+0x272>
 a3a:	fb 2d       	mov	r31, r11
 a3c:	f4 60       	ori	r31, 0x04	; 4
 a3e:	bf 2e       	mov	r11, r31
 a40:	09 c0       	rjmp	.+18     	; 0xa54 <vfprintf+0x272>
 a42:	34 fe       	sbrs	r3, 4
 a44:	0a c0       	rjmp	.+20     	; 0xa5a <vfprintf+0x278>
 a46:	29 2f       	mov	r18, r25
 a48:	26 60       	ori	r18, 0x06	; 6
 a4a:	b2 2e       	mov	r11, r18
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <vfprintf+0x278>
 a4e:	28 e0       	ldi	r18, 0x08	; 8
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <vfprintf+0x27c>
 a54:	20 e1       	ldi	r18, 0x10	; 16
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x27c>
 a5a:	20 e1       	ldi	r18, 0x10	; 16
 a5c:	32 e0       	ldi	r19, 0x02	; 2
 a5e:	f8 01       	movw	r30, r16
 a60:	b7 fe       	sbrs	r11, 7
 a62:	07 c0       	rjmp	.+14     	; 0xa72 <vfprintf+0x290>
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	82 81       	ldd	r24, Z+2	; 0x02
 a6a:	93 81       	ldd	r25, Z+3	; 0x03
 a6c:	0c 5f       	subi	r16, 0xFC	; 252
 a6e:	1f 4f       	sbci	r17, 0xFF	; 255
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <vfprintf+0x29c>
 a72:	60 81       	ld	r22, Z
 a74:	71 81       	ldd	r23, Z+1	; 0x01
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 5f       	subi	r16, 0xFE	; 254
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	a3 01       	movw	r20, r6
 a80:	0e 94 68 07 	call	0xed0	; 0xed0 <__ultoa_invert>
 a84:	88 2e       	mov	r8, r24
 a86:	86 18       	sub	r8, r6
 a88:	fb 2d       	mov	r31, r11
 a8a:	ff 77       	andi	r31, 0x7F	; 127
 a8c:	3f 2e       	mov	r3, r31
 a8e:	36 fe       	sbrs	r3, 6
 a90:	0d c0       	rjmp	.+26     	; 0xaac <vfprintf+0x2ca>
 a92:	23 2d       	mov	r18, r3
 a94:	2e 7f       	andi	r18, 0xFE	; 254
 a96:	a2 2e       	mov	r10, r18
 a98:	89 14       	cp	r8, r9
 a9a:	58 f4       	brcc	.+22     	; 0xab2 <vfprintf+0x2d0>
 a9c:	34 fe       	sbrs	r3, 4
 a9e:	0b c0       	rjmp	.+22     	; 0xab6 <vfprintf+0x2d4>
 aa0:	32 fc       	sbrc	r3, 2
 aa2:	09 c0       	rjmp	.+18     	; 0xab6 <vfprintf+0x2d4>
 aa4:	83 2d       	mov	r24, r3
 aa6:	8e 7e       	andi	r24, 0xEE	; 238
 aa8:	a8 2e       	mov	r10, r24
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <vfprintf+0x2d4>
 aac:	b8 2c       	mov	r11, r8
 aae:	a3 2c       	mov	r10, r3
 ab0:	03 c0       	rjmp	.+6      	; 0xab8 <vfprintf+0x2d6>
 ab2:	b8 2c       	mov	r11, r8
 ab4:	01 c0       	rjmp	.+2      	; 0xab8 <vfprintf+0x2d6>
 ab6:	b9 2c       	mov	r11, r9
 ab8:	a4 fe       	sbrs	r10, 4
 aba:	0f c0       	rjmp	.+30     	; 0xada <vfprintf+0x2f8>
 abc:	fe 01       	movw	r30, r28
 abe:	e8 0d       	add	r30, r8
 ac0:	f1 1d       	adc	r31, r1
 ac2:	80 81       	ld	r24, Z
 ac4:	80 33       	cpi	r24, 0x30	; 48
 ac6:	21 f4       	brne	.+8      	; 0xad0 <vfprintf+0x2ee>
 ac8:	9a 2d       	mov	r25, r10
 aca:	99 7e       	andi	r25, 0xE9	; 233
 acc:	a9 2e       	mov	r10, r25
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <vfprintf+0x300>
 ad0:	a2 fe       	sbrs	r10, 2
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0x2fe>
 ad4:	b3 94       	inc	r11
 ad6:	b3 94       	inc	r11
 ad8:	04 c0       	rjmp	.+8      	; 0xae2 <vfprintf+0x300>
 ada:	8a 2d       	mov	r24, r10
 adc:	86 78       	andi	r24, 0x86	; 134
 ade:	09 f0       	breq	.+2      	; 0xae2 <vfprintf+0x300>
 ae0:	b3 94       	inc	r11
 ae2:	a3 fc       	sbrc	r10, 3
 ae4:	11 c0       	rjmp	.+34     	; 0xb08 <vfprintf+0x326>
 ae6:	a0 fe       	sbrs	r10, 0
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <vfprintf+0x314>
 aea:	b2 14       	cp	r11, r2
 aec:	88 f4       	brcc	.+34     	; 0xb10 <vfprintf+0x32e>
 aee:	28 0c       	add	r2, r8
 af0:	92 2c       	mov	r9, r2
 af2:	9b 18       	sub	r9, r11
 af4:	0e c0       	rjmp	.+28     	; 0xb12 <vfprintf+0x330>
 af6:	b2 14       	cp	r11, r2
 af8:	60 f4       	brcc	.+24     	; 0xb12 <vfprintf+0x330>
 afa:	b6 01       	movw	r22, r12
 afc:	80 e2       	ldi	r24, 0x20	; 32
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b04:	b3 94       	inc	r11
 b06:	f7 cf       	rjmp	.-18     	; 0xaf6 <vfprintf+0x314>
 b08:	b2 14       	cp	r11, r2
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <vfprintf+0x330>
 b0c:	2b 18       	sub	r2, r11
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0x332>
 b10:	98 2c       	mov	r9, r8
 b12:	21 2c       	mov	r2, r1
 b14:	a4 fe       	sbrs	r10, 4
 b16:	10 c0       	rjmp	.+32     	; 0xb38 <vfprintf+0x356>
 b18:	b6 01       	movw	r22, r12
 b1a:	80 e3       	ldi	r24, 0x30	; 48
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b22:	a2 fe       	sbrs	r10, 2
 b24:	17 c0       	rjmp	.+46     	; 0xb54 <vfprintf+0x372>
 b26:	a1 fc       	sbrc	r10, 1
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <vfprintf+0x34e>
 b2a:	88 e7       	ldi	r24, 0x78	; 120
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <vfprintf+0x352>
 b30:	88 e5       	ldi	r24, 0x58	; 88
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	b6 01       	movw	r22, r12
 b36:	0c c0       	rjmp	.+24     	; 0xb50 <vfprintf+0x36e>
 b38:	8a 2d       	mov	r24, r10
 b3a:	86 78       	andi	r24, 0x86	; 134
 b3c:	59 f0       	breq	.+22     	; 0xb54 <vfprintf+0x372>
 b3e:	a1 fe       	sbrs	r10, 1
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x364>
 b42:	8b e2       	ldi	r24, 0x2B	; 43
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <vfprintf+0x366>
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	a7 fc       	sbrc	r10, 7
 b4a:	8d e2       	ldi	r24, 0x2D	; 45
 b4c:	b6 01       	movw	r22, r12
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b54:	89 14       	cp	r8, r9
 b56:	38 f4       	brcc	.+14     	; 0xb66 <vfprintf+0x384>
 b58:	b6 01       	movw	r22, r12
 b5a:	80 e3       	ldi	r24, 0x30	; 48
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b62:	9a 94       	dec	r9
 b64:	f7 cf       	rjmp	.-18     	; 0xb54 <vfprintf+0x372>
 b66:	8a 94       	dec	r8
 b68:	f3 01       	movw	r30, r6
 b6a:	e8 0d       	add	r30, r8
 b6c:	f1 1d       	adc	r31, r1
 b6e:	80 81       	ld	r24, Z
 b70:	b6 01       	movw	r22, r12
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b78:	81 10       	cpse	r8, r1
 b7a:	f5 cf       	rjmp	.-22     	; 0xb66 <vfprintf+0x384>
 b7c:	22 20       	and	r2, r2
 b7e:	09 f4       	brne	.+2      	; 0xb82 <vfprintf+0x3a0>
 b80:	42 ce       	rjmp	.-892    	; 0x806 <vfprintf+0x24>
 b82:	b6 01       	movw	r22, r12
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 2c 07 	call	0xe58	; 0xe58 <fputc>
 b8c:	2a 94       	dec	r2
 b8e:	f6 cf       	rjmp	.-20     	; 0xb7c <vfprintf+0x39a>
 b90:	f6 01       	movw	r30, r12
 b92:	86 81       	ldd	r24, Z+6	; 0x06
 b94:	97 81       	ldd	r25, Z+7	; 0x07
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x3ba>
 b98:	8f ef       	ldi	r24, 0xFF	; 255
 b9a:	9f ef       	ldi	r25, 0xFF	; 255
 b9c:	2b 96       	adiw	r28, 0x0b	; 11
 b9e:	e2 e1       	ldi	r30, 0x12	; 18
 ba0:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__epilogue_restores__>

00000ba4 <calloc>:
 ba4:	0f 93       	push	r16
 ba6:	1f 93       	push	r17
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	86 9f       	mul	r24, r22
 bae:	80 01       	movw	r16, r0
 bb0:	87 9f       	mul	r24, r23
 bb2:	10 0d       	add	r17, r0
 bb4:	96 9f       	mul	r25, r22
 bb6:	10 0d       	add	r17, r0
 bb8:	11 24       	eor	r1, r1
 bba:	c8 01       	movw	r24, r16
 bbc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <malloc>
 bc0:	ec 01       	movw	r28, r24
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	29 f0       	breq	.+10     	; 0xbd0 <calloc+0x2c>
 bc6:	a8 01       	movw	r20, r16
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	0e 94 1a 07 	call	0xe34	; 0xe34 <memset>
 bd0:	ce 01       	movw	r24, r28
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <malloc>:
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	82 30       	cpi	r24, 0x02	; 2
 be6:	91 05       	cpc	r25, r1
 be8:	10 f4       	brcc	.+4      	; 0xbee <malloc+0x12>
 bea:	82 e0       	ldi	r24, 0x02	; 2
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <__flp>
 bf2:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <__flp+0x1>
 bf6:	20 e0       	ldi	r18, 0x00	; 0
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	a0 e0       	ldi	r26, 0x00	; 0
 bfc:	b0 e0       	ldi	r27, 0x00	; 0
 bfe:	30 97       	sbiw	r30, 0x00	; 0
 c00:	19 f1       	breq	.+70     	; 0xc48 <malloc+0x6c>
 c02:	40 81       	ld	r20, Z
 c04:	51 81       	ldd	r21, Z+1	; 0x01
 c06:	02 81       	ldd	r16, Z+2	; 0x02
 c08:	13 81       	ldd	r17, Z+3	; 0x03
 c0a:	48 17       	cp	r20, r24
 c0c:	59 07       	cpc	r21, r25
 c0e:	c8 f0       	brcs	.+50     	; 0xc42 <malloc+0x66>
 c10:	84 17       	cp	r24, r20
 c12:	95 07       	cpc	r25, r21
 c14:	69 f4       	brne	.+26     	; 0xc30 <malloc+0x54>
 c16:	10 97       	sbiw	r26, 0x00	; 0
 c18:	31 f0       	breq	.+12     	; 0xc26 <malloc+0x4a>
 c1a:	12 96       	adiw	r26, 0x02	; 2
 c1c:	0c 93       	st	X, r16
 c1e:	12 97       	sbiw	r26, 0x02	; 2
 c20:	13 96       	adiw	r26, 0x03	; 3
 c22:	1c 93       	st	X, r17
 c24:	27 c0       	rjmp	.+78     	; 0xc74 <malloc+0x98>
 c26:	00 93 e6 01 	sts	0x01E6, r16	; 0x8001e6 <__flp>
 c2a:	10 93 e7 01 	sts	0x01E7, r17	; 0x8001e7 <__flp+0x1>
 c2e:	22 c0       	rjmp	.+68     	; 0xc74 <malloc+0x98>
 c30:	21 15       	cp	r18, r1
 c32:	31 05       	cpc	r19, r1
 c34:	19 f0       	breq	.+6      	; 0xc3c <malloc+0x60>
 c36:	42 17       	cp	r20, r18
 c38:	53 07       	cpc	r21, r19
 c3a:	18 f4       	brcc	.+6      	; 0xc42 <malloc+0x66>
 c3c:	9a 01       	movw	r18, r20
 c3e:	bd 01       	movw	r22, r26
 c40:	ef 01       	movw	r28, r30
 c42:	df 01       	movw	r26, r30
 c44:	f8 01       	movw	r30, r16
 c46:	db cf       	rjmp	.-74     	; 0xbfe <malloc+0x22>
 c48:	21 15       	cp	r18, r1
 c4a:	31 05       	cpc	r19, r1
 c4c:	f9 f0       	breq	.+62     	; 0xc8c <malloc+0xb0>
 c4e:	28 1b       	sub	r18, r24
 c50:	39 0b       	sbc	r19, r25
 c52:	24 30       	cpi	r18, 0x04	; 4
 c54:	31 05       	cpc	r19, r1
 c56:	80 f4       	brcc	.+32     	; 0xc78 <malloc+0x9c>
 c58:	8a 81       	ldd	r24, Y+2	; 0x02
 c5a:	9b 81       	ldd	r25, Y+3	; 0x03
 c5c:	61 15       	cp	r22, r1
 c5e:	71 05       	cpc	r23, r1
 c60:	21 f0       	breq	.+8      	; 0xc6a <malloc+0x8e>
 c62:	fb 01       	movw	r30, r22
 c64:	93 83       	std	Z+3, r25	; 0x03
 c66:	82 83       	std	Z+2, r24	; 0x02
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <malloc+0x96>
 c6a:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <__flp+0x1>
 c6e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__flp>
 c72:	fe 01       	movw	r30, r28
 c74:	32 96       	adiw	r30, 0x02	; 2
 c76:	44 c0       	rjmp	.+136    	; 0xd00 <malloc+0x124>
 c78:	fe 01       	movw	r30, r28
 c7a:	e2 0f       	add	r30, r18
 c7c:	f3 1f       	adc	r31, r19
 c7e:	81 93       	st	Z+, r24
 c80:	91 93       	st	Z+, r25
 c82:	22 50       	subi	r18, 0x02	; 2
 c84:	31 09       	sbc	r19, r1
 c86:	39 83       	std	Y+1, r19	; 0x01
 c88:	28 83       	st	Y, r18
 c8a:	3a c0       	rjmp	.+116    	; 0xd00 <malloc+0x124>
 c8c:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__brkval>
 c90:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <__brkval+0x1>
 c94:	23 2b       	or	r18, r19
 c96:	41 f4       	brne	.+16     	; 0xca8 <malloc+0xcc>
 c98:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c9c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ca0:	30 93 e5 01 	sts	0x01E5, r19	; 0x8001e5 <__brkval+0x1>
 ca4:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <__brkval>
 ca8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 cb0:	21 15       	cp	r18, r1
 cb2:	31 05       	cpc	r19, r1
 cb4:	41 f4       	brne	.+16     	; 0xcc6 <malloc+0xea>
 cb6:	2d b7       	in	r18, 0x3d	; 61
 cb8:	3e b7       	in	r19, 0x3e	; 62
 cba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 cbe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 cc2:	24 1b       	sub	r18, r20
 cc4:	35 0b       	sbc	r19, r21
 cc6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <__brkval>
 cca:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <__brkval+0x1>
 cce:	e2 17       	cp	r30, r18
 cd0:	f3 07       	cpc	r31, r19
 cd2:	a0 f4       	brcc	.+40     	; 0xcfc <malloc+0x120>
 cd4:	2e 1b       	sub	r18, r30
 cd6:	3f 0b       	sbc	r19, r31
 cd8:	28 17       	cp	r18, r24
 cda:	39 07       	cpc	r19, r25
 cdc:	78 f0       	brcs	.+30     	; 0xcfc <malloc+0x120>
 cde:	ac 01       	movw	r20, r24
 ce0:	4e 5f       	subi	r20, 0xFE	; 254
 ce2:	5f 4f       	sbci	r21, 0xFF	; 255
 ce4:	24 17       	cp	r18, r20
 ce6:	35 07       	cpc	r19, r21
 ce8:	48 f0       	brcs	.+18     	; 0xcfc <malloc+0x120>
 cea:	4e 0f       	add	r20, r30
 cec:	5f 1f       	adc	r21, r31
 cee:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <__brkval+0x1>
 cf2:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <__brkval>
 cf6:	81 93       	st	Z+, r24
 cf8:	91 93       	st	Z+, r25
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <malloc+0x124>
 cfc:	e0 e0       	ldi	r30, 0x00	; 0
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	cf 01       	movw	r24, r30
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	08 95       	ret

00000d0c <free>:
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
 d10:	00 97       	sbiw	r24, 0x00	; 0
 d12:	09 f4       	brne	.+2      	; 0xd16 <free+0xa>
 d14:	81 c0       	rjmp	.+258    	; 0xe18 <free+0x10c>
 d16:	fc 01       	movw	r30, r24
 d18:	32 97       	sbiw	r30, 0x02	; 2
 d1a:	13 82       	std	Z+3, r1	; 0x03
 d1c:	12 82       	std	Z+2, r1	; 0x02
 d1e:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <__flp>
 d22:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <__flp+0x1>
 d26:	10 97       	sbiw	r26, 0x00	; 0
 d28:	81 f4       	brne	.+32     	; 0xd4a <free+0x3e>
 d2a:	20 81       	ld	r18, Z
 d2c:	31 81       	ldd	r19, Z+1	; 0x01
 d2e:	82 0f       	add	r24, r18
 d30:	93 1f       	adc	r25, r19
 d32:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__brkval>
 d36:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <__brkval+0x1>
 d3a:	28 17       	cp	r18, r24
 d3c:	39 07       	cpc	r19, r25
 d3e:	51 f5       	brne	.+84     	; 0xd94 <free+0x88>
 d40:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__brkval+0x1>
 d44:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__brkval>
 d48:	67 c0       	rjmp	.+206    	; 0xe18 <free+0x10c>
 d4a:	ed 01       	movw	r28, r26
 d4c:	20 e0       	ldi	r18, 0x00	; 0
 d4e:	30 e0       	ldi	r19, 0x00	; 0
 d50:	ce 17       	cp	r28, r30
 d52:	df 07       	cpc	r29, r31
 d54:	40 f4       	brcc	.+16     	; 0xd66 <free+0x5a>
 d56:	4a 81       	ldd	r20, Y+2	; 0x02
 d58:	5b 81       	ldd	r21, Y+3	; 0x03
 d5a:	9e 01       	movw	r18, r28
 d5c:	41 15       	cp	r20, r1
 d5e:	51 05       	cpc	r21, r1
 d60:	f1 f0       	breq	.+60     	; 0xd9e <free+0x92>
 d62:	ea 01       	movw	r28, r20
 d64:	f5 cf       	rjmp	.-22     	; 0xd50 <free+0x44>
 d66:	d3 83       	std	Z+3, r29	; 0x03
 d68:	c2 83       	std	Z+2, r28	; 0x02
 d6a:	40 81       	ld	r20, Z
 d6c:	51 81       	ldd	r21, Z+1	; 0x01
 d6e:	84 0f       	add	r24, r20
 d70:	95 1f       	adc	r25, r21
 d72:	c8 17       	cp	r28, r24
 d74:	d9 07       	cpc	r29, r25
 d76:	59 f4       	brne	.+22     	; 0xd8e <free+0x82>
 d78:	88 81       	ld	r24, Y
 d7a:	99 81       	ldd	r25, Y+1	; 0x01
 d7c:	84 0f       	add	r24, r20
 d7e:	95 1f       	adc	r25, r21
 d80:	02 96       	adiw	r24, 0x02	; 2
 d82:	91 83       	std	Z+1, r25	; 0x01
 d84:	80 83       	st	Z, r24
 d86:	8a 81       	ldd	r24, Y+2	; 0x02
 d88:	9b 81       	ldd	r25, Y+3	; 0x03
 d8a:	93 83       	std	Z+3, r25	; 0x03
 d8c:	82 83       	std	Z+2, r24	; 0x02
 d8e:	21 15       	cp	r18, r1
 d90:	31 05       	cpc	r19, r1
 d92:	29 f4       	brne	.+10     	; 0xd9e <free+0x92>
 d94:	f0 93 e7 01 	sts	0x01E7, r31	; 0x8001e7 <__flp+0x1>
 d98:	e0 93 e6 01 	sts	0x01E6, r30	; 0x8001e6 <__flp>
 d9c:	3d c0       	rjmp	.+122    	; 0xe18 <free+0x10c>
 d9e:	e9 01       	movw	r28, r18
 da0:	fb 83       	std	Y+3, r31	; 0x03
 da2:	ea 83       	std	Y+2, r30	; 0x02
 da4:	49 91       	ld	r20, Y+
 da6:	59 91       	ld	r21, Y+
 da8:	c4 0f       	add	r28, r20
 daa:	d5 1f       	adc	r29, r21
 dac:	ec 17       	cp	r30, r28
 dae:	fd 07       	cpc	r31, r29
 db0:	61 f4       	brne	.+24     	; 0xdca <free+0xbe>
 db2:	80 81       	ld	r24, Z
 db4:	91 81       	ldd	r25, Z+1	; 0x01
 db6:	84 0f       	add	r24, r20
 db8:	95 1f       	adc	r25, r21
 dba:	02 96       	adiw	r24, 0x02	; 2
 dbc:	e9 01       	movw	r28, r18
 dbe:	99 83       	std	Y+1, r25	; 0x01
 dc0:	88 83       	st	Y, r24
 dc2:	82 81       	ldd	r24, Z+2	; 0x02
 dc4:	93 81       	ldd	r25, Z+3	; 0x03
 dc6:	9b 83       	std	Y+3, r25	; 0x03
 dc8:	8a 83       	std	Y+2, r24	; 0x02
 dca:	e0 e0       	ldi	r30, 0x00	; 0
 dcc:	f0 e0       	ldi	r31, 0x00	; 0
 dce:	12 96       	adiw	r26, 0x02	; 2
 dd0:	8d 91       	ld	r24, X+
 dd2:	9c 91       	ld	r25, X
 dd4:	13 97       	sbiw	r26, 0x03	; 3
 dd6:	00 97       	sbiw	r24, 0x00	; 0
 dd8:	19 f0       	breq	.+6      	; 0xde0 <free+0xd4>
 dda:	fd 01       	movw	r30, r26
 ddc:	dc 01       	movw	r26, r24
 dde:	f7 cf       	rjmp	.-18     	; 0xdce <free+0xc2>
 de0:	8d 91       	ld	r24, X+
 de2:	9c 91       	ld	r25, X
 de4:	11 97       	sbiw	r26, 0x01	; 1
 de6:	9d 01       	movw	r18, r26
 de8:	2e 5f       	subi	r18, 0xFE	; 254
 dea:	3f 4f       	sbci	r19, 0xFF	; 255
 dec:	82 0f       	add	r24, r18
 dee:	93 1f       	adc	r25, r19
 df0:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__brkval>
 df4:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <__brkval+0x1>
 df8:	28 17       	cp	r18, r24
 dfa:	39 07       	cpc	r19, r25
 dfc:	69 f4       	brne	.+26     	; 0xe18 <free+0x10c>
 dfe:	30 97       	sbiw	r30, 0x00	; 0
 e00:	29 f4       	brne	.+10     	; 0xe0c <free+0x100>
 e02:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__flp+0x1>
 e06:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__flp>
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <free+0x104>
 e0c:	13 82       	std	Z+3, r1	; 0x03
 e0e:	12 82       	std	Z+2, r1	; 0x02
 e10:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <__brkval+0x1>
 e14:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <__brkval>
 e18:	df 91       	pop	r29
 e1a:	cf 91       	pop	r28
 e1c:	08 95       	ret

00000e1e <strnlen_P>:
 e1e:	fc 01       	movw	r30, r24
 e20:	05 90       	lpm	r0, Z+
 e22:	61 50       	subi	r22, 0x01	; 1
 e24:	70 40       	sbci	r23, 0x00	; 0
 e26:	01 10       	cpse	r0, r1
 e28:	d8 f7       	brcc	.-10     	; 0xe20 <strnlen_P+0x2>
 e2a:	80 95       	com	r24
 e2c:	90 95       	com	r25
 e2e:	8e 0f       	add	r24, r30
 e30:	9f 1f       	adc	r25, r31
 e32:	08 95       	ret

00000e34 <memset>:
 e34:	dc 01       	movw	r26, r24
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <memset+0x6>
 e38:	6d 93       	st	X+, r22
 e3a:	41 50       	subi	r20, 0x01	; 1
 e3c:	50 40       	sbci	r21, 0x00	; 0
 e3e:	e0 f7       	brcc	.-8      	; 0xe38 <memset+0x4>
 e40:	08 95       	ret

00000e42 <strnlen>:
 e42:	fc 01       	movw	r30, r24
 e44:	61 50       	subi	r22, 0x01	; 1
 e46:	70 40       	sbci	r23, 0x00	; 0
 e48:	01 90       	ld	r0, Z+
 e4a:	01 10       	cpse	r0, r1
 e4c:	d8 f7       	brcc	.-10     	; 0xe44 <strnlen+0x2>
 e4e:	80 95       	com	r24
 e50:	90 95       	com	r25
 e52:	8e 0f       	add	r24, r30
 e54:	9f 1f       	adc	r25, r31
 e56:	08 95       	ret

00000e58 <fputc>:
 e58:	0f 93       	push	r16
 e5a:	1f 93       	push	r17
 e5c:	cf 93       	push	r28
 e5e:	df 93       	push	r29
 e60:	fb 01       	movw	r30, r22
 e62:	23 81       	ldd	r18, Z+3	; 0x03
 e64:	21 fd       	sbrc	r18, 1
 e66:	03 c0       	rjmp	.+6      	; 0xe6e <fputc+0x16>
 e68:	8f ef       	ldi	r24, 0xFF	; 255
 e6a:	9f ef       	ldi	r25, 0xFF	; 255
 e6c:	2c c0       	rjmp	.+88     	; 0xec6 <fputc+0x6e>
 e6e:	22 ff       	sbrs	r18, 2
 e70:	16 c0       	rjmp	.+44     	; 0xe9e <fputc+0x46>
 e72:	46 81       	ldd	r20, Z+6	; 0x06
 e74:	57 81       	ldd	r21, Z+7	; 0x07
 e76:	24 81       	ldd	r18, Z+4	; 0x04
 e78:	35 81       	ldd	r19, Z+5	; 0x05
 e7a:	42 17       	cp	r20, r18
 e7c:	53 07       	cpc	r21, r19
 e7e:	44 f4       	brge	.+16     	; 0xe90 <fputc+0x38>
 e80:	a0 81       	ld	r26, Z
 e82:	b1 81       	ldd	r27, Z+1	; 0x01
 e84:	9d 01       	movw	r18, r26
 e86:	2f 5f       	subi	r18, 0xFF	; 255
 e88:	3f 4f       	sbci	r19, 0xFF	; 255
 e8a:	31 83       	std	Z+1, r19	; 0x01
 e8c:	20 83       	st	Z, r18
 e8e:	8c 93       	st	X, r24
 e90:	26 81       	ldd	r18, Z+6	; 0x06
 e92:	37 81       	ldd	r19, Z+7	; 0x07
 e94:	2f 5f       	subi	r18, 0xFF	; 255
 e96:	3f 4f       	sbci	r19, 0xFF	; 255
 e98:	37 83       	std	Z+7, r19	; 0x07
 e9a:	26 83       	std	Z+6, r18	; 0x06
 e9c:	14 c0       	rjmp	.+40     	; 0xec6 <fputc+0x6e>
 e9e:	8b 01       	movw	r16, r22
 ea0:	ec 01       	movw	r28, r24
 ea2:	fb 01       	movw	r30, r22
 ea4:	00 84       	ldd	r0, Z+8	; 0x08
 ea6:	f1 85       	ldd	r31, Z+9	; 0x09
 ea8:	e0 2d       	mov	r30, r0
 eaa:	09 95       	icall
 eac:	89 2b       	or	r24, r25
 eae:	e1 f6       	brne	.-72     	; 0xe68 <fputc+0x10>
 eb0:	d8 01       	movw	r26, r16
 eb2:	16 96       	adiw	r26, 0x06	; 6
 eb4:	8d 91       	ld	r24, X+
 eb6:	9c 91       	ld	r25, X
 eb8:	17 97       	sbiw	r26, 0x07	; 7
 eba:	01 96       	adiw	r24, 0x01	; 1
 ebc:	17 96       	adiw	r26, 0x07	; 7
 ebe:	9c 93       	st	X, r25
 ec0:	8e 93       	st	-X, r24
 ec2:	16 97       	sbiw	r26, 0x06	; 6
 ec4:	ce 01       	movw	r24, r28
 ec6:	df 91       	pop	r29
 ec8:	cf 91       	pop	r28
 eca:	1f 91       	pop	r17
 ecc:	0f 91       	pop	r16
 ece:	08 95       	ret

00000ed0 <__ultoa_invert>:
 ed0:	fa 01       	movw	r30, r20
 ed2:	aa 27       	eor	r26, r26
 ed4:	28 30       	cpi	r18, 0x08	; 8
 ed6:	51 f1       	breq	.+84     	; 0xf2c <__ultoa_invert+0x5c>
 ed8:	20 31       	cpi	r18, 0x10	; 16
 eda:	81 f1       	breq	.+96     	; 0xf3c <__ultoa_invert+0x6c>
 edc:	e8 94       	clt
 ede:	6f 93       	push	r22
 ee0:	6e 7f       	andi	r22, 0xFE	; 254
 ee2:	6e 5f       	subi	r22, 0xFE	; 254
 ee4:	7f 4f       	sbci	r23, 0xFF	; 255
 ee6:	8f 4f       	sbci	r24, 0xFF	; 255
 ee8:	9f 4f       	sbci	r25, 0xFF	; 255
 eea:	af 4f       	sbci	r26, 0xFF	; 255
 eec:	b1 e0       	ldi	r27, 0x01	; 1
 eee:	3e d0       	rcall	.+124    	; 0xf6c <__ultoa_invert+0x9c>
 ef0:	b4 e0       	ldi	r27, 0x04	; 4
 ef2:	3c d0       	rcall	.+120    	; 0xf6c <__ultoa_invert+0x9c>
 ef4:	67 0f       	add	r22, r23
 ef6:	78 1f       	adc	r23, r24
 ef8:	89 1f       	adc	r24, r25
 efa:	9a 1f       	adc	r25, r26
 efc:	a1 1d       	adc	r26, r1
 efe:	68 0f       	add	r22, r24
 f00:	79 1f       	adc	r23, r25
 f02:	8a 1f       	adc	r24, r26
 f04:	91 1d       	adc	r25, r1
 f06:	a1 1d       	adc	r26, r1
 f08:	6a 0f       	add	r22, r26
 f0a:	71 1d       	adc	r23, r1
 f0c:	81 1d       	adc	r24, r1
 f0e:	91 1d       	adc	r25, r1
 f10:	a1 1d       	adc	r26, r1
 f12:	20 d0       	rcall	.+64     	; 0xf54 <__ultoa_invert+0x84>
 f14:	09 f4       	brne	.+2      	; 0xf18 <__ultoa_invert+0x48>
 f16:	68 94       	set
 f18:	3f 91       	pop	r19
 f1a:	2a e0       	ldi	r18, 0x0A	; 10
 f1c:	26 9f       	mul	r18, r22
 f1e:	11 24       	eor	r1, r1
 f20:	30 19       	sub	r19, r0
 f22:	30 5d       	subi	r19, 0xD0	; 208
 f24:	31 93       	st	Z+, r19
 f26:	de f6       	brtc	.-74     	; 0xede <__ultoa_invert+0xe>
 f28:	cf 01       	movw	r24, r30
 f2a:	08 95       	ret
 f2c:	46 2f       	mov	r20, r22
 f2e:	47 70       	andi	r20, 0x07	; 7
 f30:	40 5d       	subi	r20, 0xD0	; 208
 f32:	41 93       	st	Z+, r20
 f34:	b3 e0       	ldi	r27, 0x03	; 3
 f36:	0f d0       	rcall	.+30     	; 0xf56 <__ultoa_invert+0x86>
 f38:	c9 f7       	brne	.-14     	; 0xf2c <__ultoa_invert+0x5c>
 f3a:	f6 cf       	rjmp	.-20     	; 0xf28 <__ultoa_invert+0x58>
 f3c:	46 2f       	mov	r20, r22
 f3e:	4f 70       	andi	r20, 0x0F	; 15
 f40:	40 5d       	subi	r20, 0xD0	; 208
 f42:	4a 33       	cpi	r20, 0x3A	; 58
 f44:	18 f0       	brcs	.+6      	; 0xf4c <__ultoa_invert+0x7c>
 f46:	49 5d       	subi	r20, 0xD9	; 217
 f48:	31 fd       	sbrc	r19, 1
 f4a:	40 52       	subi	r20, 0x20	; 32
 f4c:	41 93       	st	Z+, r20
 f4e:	02 d0       	rcall	.+4      	; 0xf54 <__ultoa_invert+0x84>
 f50:	a9 f7       	brne	.-22     	; 0xf3c <__ultoa_invert+0x6c>
 f52:	ea cf       	rjmp	.-44     	; 0xf28 <__ultoa_invert+0x58>
 f54:	b4 e0       	ldi	r27, 0x04	; 4
 f56:	a6 95       	lsr	r26
 f58:	97 95       	ror	r25
 f5a:	87 95       	ror	r24
 f5c:	77 95       	ror	r23
 f5e:	67 95       	ror	r22
 f60:	ba 95       	dec	r27
 f62:	c9 f7       	brne	.-14     	; 0xf56 <__ultoa_invert+0x86>
 f64:	00 97       	sbiw	r24, 0x00	; 0
 f66:	61 05       	cpc	r22, r1
 f68:	71 05       	cpc	r23, r1
 f6a:	08 95       	ret
 f6c:	9b 01       	movw	r18, r22
 f6e:	ac 01       	movw	r20, r24
 f70:	0a 2e       	mov	r0, r26
 f72:	06 94       	lsr	r0
 f74:	57 95       	ror	r21
 f76:	47 95       	ror	r20
 f78:	37 95       	ror	r19
 f7a:	27 95       	ror	r18
 f7c:	ba 95       	dec	r27
 f7e:	c9 f7       	brne	.-14     	; 0xf72 <__ultoa_invert+0xa2>
 f80:	62 0f       	add	r22, r18
 f82:	73 1f       	adc	r23, r19
 f84:	84 1f       	adc	r24, r20
 f86:	95 1f       	adc	r25, r21
 f88:	a0 1d       	adc	r26, r0
 f8a:	08 95       	ret

00000f8c <__prologue_saves__>:
 f8c:	2f 92       	push	r2
 f8e:	3f 92       	push	r3
 f90:	4f 92       	push	r4
 f92:	5f 92       	push	r5
 f94:	6f 92       	push	r6
 f96:	7f 92       	push	r7
 f98:	8f 92       	push	r8
 f9a:	9f 92       	push	r9
 f9c:	af 92       	push	r10
 f9e:	bf 92       	push	r11
 fa0:	cf 92       	push	r12
 fa2:	df 92       	push	r13
 fa4:	ef 92       	push	r14
 fa6:	ff 92       	push	r15
 fa8:	0f 93       	push	r16
 faa:	1f 93       	push	r17
 fac:	cf 93       	push	r28
 fae:	df 93       	push	r29
 fb0:	cd b7       	in	r28, 0x3d	; 61
 fb2:	de b7       	in	r29, 0x3e	; 62
 fb4:	ca 1b       	sub	r28, r26
 fb6:	db 0b       	sbc	r29, r27
 fb8:	0f b6       	in	r0, 0x3f	; 63
 fba:	f8 94       	cli
 fbc:	de bf       	out	0x3e, r29	; 62
 fbe:	0f be       	out	0x3f, r0	; 63
 fc0:	cd bf       	out	0x3d, r28	; 61
 fc2:	09 94       	ijmp

00000fc4 <__epilogue_restores__>:
 fc4:	2a 88       	ldd	r2, Y+18	; 0x12
 fc6:	39 88       	ldd	r3, Y+17	; 0x11
 fc8:	48 88       	ldd	r4, Y+16	; 0x10
 fca:	5f 84       	ldd	r5, Y+15	; 0x0f
 fcc:	6e 84       	ldd	r6, Y+14	; 0x0e
 fce:	7d 84       	ldd	r7, Y+13	; 0x0d
 fd0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fd2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fd4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fd6:	b9 84       	ldd	r11, Y+9	; 0x09
 fd8:	c8 84       	ldd	r12, Y+8	; 0x08
 fda:	df 80       	ldd	r13, Y+7	; 0x07
 fdc:	ee 80       	ldd	r14, Y+6	; 0x06
 fde:	fd 80       	ldd	r15, Y+5	; 0x05
 fe0:	0c 81       	ldd	r16, Y+4	; 0x04
 fe2:	1b 81       	ldd	r17, Y+3	; 0x03
 fe4:	aa 81       	ldd	r26, Y+2	; 0x02
 fe6:	b9 81       	ldd	r27, Y+1	; 0x01
 fe8:	ce 0f       	add	r28, r30
 fea:	d1 1d       	adc	r29, r1
 fec:	0f b6       	in	r0, 0x3f	; 63
 fee:	f8 94       	cli
 ff0:	de bf       	out	0x3e, r29	; 62
 ff2:	0f be       	out	0x3f, r0	; 63
 ff4:	cd bf       	out	0x3d, r28	; 61
 ff6:	ed 01       	movw	r28, r26
 ff8:	08 95       	ret

00000ffa <_exit>:
 ffa:	f8 94       	cli

00000ffc <__stop_program>:
 ffc:	ff cf       	rjmp	.-2      	; 0xffc <__stop_program>
