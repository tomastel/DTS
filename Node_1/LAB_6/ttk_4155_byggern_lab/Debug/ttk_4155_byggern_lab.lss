
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000350  00800100  00001510  000015a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800450  00800450  000018f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037ad  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017a1  00000000  00000000  00005461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ab8  00000000  00000000  00006c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  000086bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4c  00000000  00000000  00008e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131b  00000000  00000000  00009988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000aca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_1>
       8:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_2>
       c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_3>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_7>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	14 e0       	ldi	r17, 0x04	; 4
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e0 e1       	ldi	r30, 0x10	; 16
     260:	f5 e1       	ldi	r31, 0x15	; 21
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a0 35       	cpi	r26, 0x50	; 80
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	24 e0       	ldi	r18, 0x04	; 4
     270:	a0 e5       	ldi	r26, 0x50	; 80
     272:	b4 e0       	ldi	r27, 0x04	; 4
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a0 36       	cpi	r26, 0x60	; 96
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 0a 04 	call	0x814	; 0x814 <main>
     282:	0c 94 86 0a 	jmp	0x150c	; 0x150c <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_drv_init>:
void adc_drv_init()
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
     28a:	81 b3       	in	r24, 0x11	; 17
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
     290:	8e b5       	in	r24, 0x2e	; 46
     292:	80 61       	ori	r24, 0x10	; 16
     294:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
     296:	8e b5       	in	r24, 0x2e	; 46
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
     29c:	8f b5       	in	r24, 0x2f	; 47
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
     2a2:	8f b5       	in	r24, 0x2f	; 47
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
     2a8:	8f b5       	in	r24, 0x2f	; 47
     2aa:	8f 77       	andi	r24, 0x7F	; 127
     2ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
     2ae:	8f b5       	in	r24, 0x2f	; 47
     2b0:	80 64       	ori	r24, 0x40	; 64
     2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
     2b4:	8f b5       	in	r24, 0x2f	; 47
     2b6:	8f 7d       	andi	r24, 0xDF	; 223
     2b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
     2ba:	8f b5       	in	r24, 0x2f	; 47
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8f bd       	out	0x2f, r24	; 47
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
     2c0:	8e b5       	in	r24, 0x2e	; 46
     2c2:	8b 7f       	andi	r24, 0xFB	; 251
     2c4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
     2c6:	8e b5       	in	r24, 0x2e	; 46
     2c8:	8d 7f       	andi	r24, 0xFD	; 253
     2ca:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
     2cc:	8e b5       	in	r24, 0x2e	; 46
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A &= ~(1 << FOC1A);
     2d2:	8f b5       	in	r24, 0x2f	; 47
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
     2d8:	8f b5       	in	r24, 0x2f	; 47
     2da:	8b 7f       	andi	r24, 0xFB	; 251
     2dc:	8f bd       	out	0x2f, r24	; 47
     2de:	08 95       	ret

000002e0 <adc_drv_fun_stick_get>:
}

fun_stick_t adc_drv_fun_stick_get()
{
	return last_fun_stick;
     2e0:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <last_fun_stick>
     2e4:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <last_fun_stick+0x1>
     2e8:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <last_fun_stick+0x2>
}
     2ec:	08 95       	ret

000002ee <adc_read>:
		 //last_fun_stick = current_fun_stick;
		 //return true;
	 //}

uint8_t adc_read(uint8_t channel)
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <adc_read+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <adc_read+0x8>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
     2fa:	19 82       	std	Y+1, r1	; 0x01
     2fc:	1a 82       	std	Y+2, r1	; 0x02
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
     302:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0xfa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     306:	91 e3       	ldi	r25, 0x31	; 49
     308:	9a 95       	dec	r25
     30a:	f1 f7       	brne	.-4      	; 0x308 <adc_read+0x1a>
     30c:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	0c c0       	rjmp	.+24     	; 0x32c <adc_read+0x3e>
		adc_value[i] = adc[i];
     314:	f9 01       	movw	r30, r18
     316:	fc 5e       	subi	r31, 0xEC	; 236
     318:	90 81       	ld	r25, Z
     31a:	e1 e0       	ldi	r30, 0x01	; 1
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ec 0f       	add	r30, r28
     320:	fd 1f       	adc	r31, r29
     322:	e2 0f       	add	r30, r18
     324:	f3 1f       	adc	r31, r19
     326:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	24 30       	cpi	r18, 0x04	; 4
     32e:	31 05       	cpc	r19, r1
     330:	88 f3       	brcs	.-30     	; 0x314 <adc_read+0x26>
		adc_value[i] = adc[i];
	}

	return adc_value[channel];
     332:	e1 e0       	ldi	r30, 0x01	; 1
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ec 0f       	add	r30, r28
     338:	fd 1f       	adc	r31, r29
     33a:	e8 0f       	add	r30, r24
     33c:	f1 1d       	adc	r31, r1
     33e:	80 81       	ld	r24, Z
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     354:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     35e:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__data_end>
     362:	08 95       	ret

00000364 <adc_conv_js_val>:
}

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
     364:	86 17       	cp	r24, r22
     366:	a0 f0       	brcs	.+40     	; 0x390 <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
     368:	46 2f       	mov	r20, r22
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	28 2f       	mov	r18, r24
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	24 1b       	sub	r18, r20
     372:	35 0b       	sbc	r19, r21
     374:	64 e6       	ldi	r22, 0x64	; 100
     376:	62 9f       	mul	r22, r18
     378:	c0 01       	movw	r24, r0
     37a:	63 9f       	mul	r22, r19
     37c:	90 0d       	add	r25, r0
     37e:	11 24       	eor	r1, r1
     380:	6f ef       	ldi	r22, 0xFF	; 255
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	64 1b       	sub	r22, r20
     386:	75 0b       	sbc	r23, r21
     388:	0e 94 80 07 	call	0xf00	; 0xf00 <__divmodhi4>
     38c:	86 2f       	mov	r24, r22
     38e:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	26 1b       	sub	r18, r22
     398:	37 0b       	sbc	r19, r23
     39a:	44 e6       	ldi	r20, 0x64	; 100
     39c:	42 9f       	mul	r20, r18
     39e:	c0 01       	movw	r24, r0
     3a0:	43 9f       	mul	r20, r19
     3a2:	90 0d       	add	r25, r0
     3a4:	11 24       	eor	r1, r1
     3a6:	0e 94 80 07 	call	0xf00	; 0xf00 <__divmodhi4>
     3aa:	86 2f       	mov	r24, r22
}
     3ac:	08 95       	ret

000003ae <pos_read>:

pos_t pos_read()
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
     3b2:	c0 91 51 04 	lds	r28, 0x0451	; 0x800451 <offset_x>
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     3bc:	6c 2f       	mov	r22, r28
     3be:	0e 94 b2 01 	call	0x364	; 0x364 <adc_conv_js_val>
     3c2:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
     3c4:	d0 91 50 04 	lds	r29, 0x0450	; 0x800450 <__data_end>
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     3ce:	6d 2f       	mov	r22, r29
     3d0:	0e 94 b2 01 	call	0x364	; 0x364 <adc_conv_js_val>
     3d4:	98 2f       	mov	r25, r24
	
	return positions;
}
     3d6:	8c 2f       	mov	r24, r28
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3de:	28 2f       	mov	r18, r24
     3e0:	8a 5b       	subi	r24, 0xBA	; 186
     3e2:	8d 38       	cpi	r24, 0x8D	; 141
     3e4:	48 f4       	brcc	.+18     	; 0x3f8 <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3e6:	89 2f       	mov	r24, r25
     3e8:	9a 5b       	subi	r25, 0xBA	; 186
     3ea:	9d 38       	cpi	r25, 0x8D	; 141
     3ec:	d8 f0       	brcs	.+54     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     3ee:	87 34       	cpi	r24, 0x47	; 71
     3f0:	dc f4       	brge	.+54     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     3f2:	86 34       	cpi	r24, 0x46	; 70
     3f4:	dc f0       	brlt	.+54     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
     3f6:	15 c0       	rjmp	.+42     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_DIR_THRESHOLD) {
     3f8:	27 34       	cpi	r18, 0x47	; 71
     3fa:	4c f0       	brlt	.+18     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3fc:	89 2f       	mov	r24, r25
     3fe:	9a 5b       	subi	r25, 0xBA	; 186
     400:	9d 38       	cpi	r25, 0x8D	; 141
     402:	b0 f0       	brcs	.+44     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     404:	87 34       	cpi	r24, 0x47	; 71
     406:	b4 f4       	brge	.+44     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     408:	86 34       	cpi	r24, 0x46	; 70
     40a:	b4 f0       	brlt	.+44     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     40c:	0a c0       	rjmp	.+20     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_DIR_THRESHOLD) {
     40e:	26 34       	cpi	r18, 0x46	; 70
     410:	44 f4       	brge	.+16     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     412:	89 2f       	mov	r24, r25
     414:	9a 5b       	subi	r25, 0xBA	; 186
     416:	9d 38       	cpi	r25, 0x8D	; 141
     418:	88 f0       	brcs	.+34     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     41a:	87 34       	cpi	r24, 0x47	; 71
     41c:	8c f4       	brge	.+34     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     41e:	86 34       	cpi	r24, 0x46	; 70
     420:	8c f0       	brlt	.+34     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			return DOWN_LEFT;
		}
	}
}
     422:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return NEUTRAL;
     424:	84 e0       	ldi	r24, 0x04	; 4
     426:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return RIGHT;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP_RIGHT;
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN_RIGHT;
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return LEFT;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP_LEFT;
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN_LEFT;
     444:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
     446:	08 95       	ret

00000448 <adc_drv_joystick_update>:
{
	return last_fun_stick;
}

bool adc_drv_joystick_update()
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
     44c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pos_read>
     450:	c8 2f       	mov	r28, r24
     452:	d9 2f       	mov	r29, r25
	current_fun_stick.direction = dir_read(current_fun_stick.position);
     454:	0e 94 ef 01 	call	0x3de	; 0x3de <dir_read>

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     458:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <last_fun_stick+0x2>
     45c:	89 13       	cpse	r24, r25
     45e:	28 c0       	rjmp	.+80     	; 0x4b0 <adc_drv_joystick_update+0x68>
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
     460:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <last_fun_stick>
     464:	2c 2f       	mov	r18, r28
     466:	0c 2e       	mov	r0, r28
     468:	00 0c       	add	r0, r0
     46a:	33 0b       	sbc	r19, r19
     46c:	29 1b       	sub	r18, r25
     46e:	31 09       	sbc	r19, r1
     470:	97 fd       	sbrc	r25, 7
     472:	33 95       	inc	r19
     474:	a9 01       	movw	r20, r18
     476:	33 23       	and	r19, r19
     478:	24 f4       	brge	.+8      	; 0x482 <adc_drv_joystick_update+0x3a>
     47a:	44 27       	eor	r20, r20
     47c:	55 27       	eor	r21, r21
     47e:	42 1b       	sub	r20, r18
     480:	53 0b       	sbc	r21, r19
{
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     482:	44 30       	cpi	r20, 0x04	; 4
     484:	51 05       	cpc	r21, r1
     486:	a4 f4       	brge	.+40     	; 0x4b0 <adc_drv_joystick_update+0x68>
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
		(abs(current_fun_stick.position.Y - last_fun_stick.position.Y) >= ADC_JOYSTICK_POS_THRESHOLD)) {
     488:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <last_fun_stick+0x1>
     48c:	2d 2f       	mov	r18, r29
     48e:	0d 2e       	mov	r0, r29
     490:	00 0c       	add	r0, r0
     492:	33 0b       	sbc	r19, r19
     494:	29 1b       	sub	r18, r25
     496:	31 09       	sbc	r19, r1
     498:	97 fd       	sbrc	r25, 7
     49a:	33 95       	inc	r19
     49c:	a9 01       	movw	r20, r18
     49e:	33 23       	and	r19, r19
     4a0:	24 f4       	brge	.+8      	; 0x4aa <adc_drv_joystick_update+0x62>
     4a2:	44 27       	eor	r20, r20
     4a4:	55 27       	eor	r21, r21
     4a6:	42 1b       	sub	r20, r18
     4a8:	53 0b       	sbc	r21, r19
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
     4aa:	44 30       	cpi	r20, 0x04	; 4
     4ac:	51 05       	cpc	r21, r1
     4ae:	44 f0       	brlt	.+16     	; 0x4c0 <adc_drv_joystick_update+0x78>
		(abs(current_fun_stick.position.Y - last_fun_stick.position.Y) >= ADC_JOYSTICK_POS_THRESHOLD)) {
			last_fun_stick = current_fun_stick;
     4b0:	c0 93 57 04 	sts	0x0457, r28	; 0x800457 <last_fun_stick>
     4b4:	d0 93 58 04 	sts	0x0458, r29	; 0x800458 <last_fun_stick+0x1>
     4b8:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <last_fun_stick+0x2>
			return true;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <adc_drv_joystick_update+0x7a>
		}
	 else return false;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <CAN_init>:
     4c8:	cf 93       	push	r28
     4ca:	81 b3       	in	r24, 0x11	; 17
     4cc:	8b 7f       	andi	r24, 0xFB	; 251
     4ce:	81 bb       	out	0x11, r24	; 17
     4d0:	f8 94       	cli
     4d2:	8b b7       	in	r24, 0x3b	; 59
     4d4:	80 64       	ori	r24, 0x40	; 64
     4d6:	8b bf       	out	0x3b, r24	; 59
     4d8:	85 b7       	in	r24, 0x35	; 53
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	85 bf       	out	0x35, r24	; 53
     4de:	85 b7       	in	r24, 0x35	; 53
     4e0:	8e 7f       	andi	r24, 0xFE	; 254
     4e2:	85 bf       	out	0x35, r24	; 53
     4e4:	78 94       	sei
     4e6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <MCP2515_init>
     4ea:	c8 2f       	mov	r28, r24
     4ec:	88 23       	and	r24, r24
     4ee:	34 f4       	brge	.+12     	; 0x4fc <CAN_init+0x34>
     4f0:	8a eb       	ldi	r24, 0xBA	; 186
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     4f8:	8c 2f       	mov	r24, r28
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <CAN_init+0x36>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <CAN_send>:
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2b 97       	sbiw	r28, 0x0b	; 11
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	e9 82       	std	Y+1, r14	; 0x01
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	0b 83       	std	Y+3, r16	; 0x03
     524:	1c 83       	std	Y+4, r17	; 0x04
     526:	2d 83       	std	Y+5, r18	; 0x05
     528:	3e 83       	std	Y+6, r19	; 0x06
     52a:	4f 83       	std	Y+7, r20	; 0x07
     52c:	58 87       	std	Y+8, r21	; 0x08
     52e:	69 87       	std	Y+9, r22	; 0x09
     530:	7a 87       	std	Y+10, r23	; 0x0a
     532:	8b 87       	std	Y+11, r24	; 0x0b
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	bc 01       	movw	r22, r24
     53a:	68 7f       	andi	r22, 0xF8	; 248
     53c:	77 70       	andi	r23, 0x07	; 7
     53e:	76 95       	lsr	r23
     540:	67 95       	ror	r22
     542:	76 95       	lsr	r23
     544:	67 95       	ror	r22
     546:	76 95       	lsr	r23
     548:	67 95       	ror	r22
     54a:	18 2f       	mov	r17, r24
     54c:	12 95       	swap	r17
     54e:	11 0f       	add	r17, r17
     550:	10 7e       	andi	r17, 0xE0	; 224
     552:	81 e3       	ldi	r24, 0x31	; 49
     554:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     558:	61 2f       	mov	r22, r17
     55a:	82 e3       	ldi	r24, 0x32	; 50
     55c:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     560:	1b 81       	ldd	r17, Y+3	; 0x03
     562:	61 2f       	mov	r22, r17
     564:	85 e3       	ldi	r24, 0x35	; 53
     566:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     570:	83 fd       	sbrc	r24, 3
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <CAN_send+0xa6>
     574:	19 30       	cpi	r17, 0x09	; 9
     576:	10 f0       	brcs	.+4      	; 0x57c <CAN_send+0x7a>
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	8b 83       	std	Y+3, r24	; 0x03
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	0c c0       	rjmp	.+24     	; 0x598 <CAN_send+0x96>
     580:	e4 e0       	ldi	r30, 0x04	; 4
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ec 0f       	add	r30, r28
     586:	fd 1f       	adc	r31, r29
     588:	e1 0f       	add	r30, r17
     58a:	f1 1d       	adc	r31, r1
     58c:	60 81       	ld	r22, Z
     58e:	86 e3       	ldi	r24, 0x36	; 54
     590:	81 0f       	add	r24, r17
     592:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     596:	1f 5f       	subi	r17, 0xFF	; 255
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	18 17       	cp	r17, r24
     59c:	88 f3       	brcs	.-30     	; 0x580 <CAN_send+0x7e>
     59e:	81 e8       	ldi	r24, 0x81	; 129
     5a0:	0e 94 3b 04 	call	0x876	; 0x876 <MCP2515_request_to_send>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <CAN_send+0xb0>
     5a8:	80 ec       	ldi	r24, 0xC0	; 192
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	2b 96       	adiw	r28, 0x0b	; 11
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	08 95       	ret

000005cc <CAN_receive>:
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	00 d0       	rcall	.+0      	; 0x5dc <CAN_receive+0x10>
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	6c 01       	movw	r12, r24
     5e2:	61 11       	cpse	r22, r1
     5e4:	3d c0       	rjmp	.+122    	; 0x660 <CAN_receive+0x94>
     5e6:	81 e6       	ldi	r24, 0x61	; 97
     5e8:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     5ec:	18 2f       	mov	r17, r24
     5ee:	82 e6       	ldi	r24, 0x62	; 98
     5f0:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     5f4:	28 2f       	mov	r18, r24
     5f6:	22 95       	swap	r18
     5f8:	26 95       	lsr	r18
     5fa:	27 70       	andi	r18, 0x07	; 7
     5fc:	81 2f       	mov	r24, r17
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	82 2b       	or	r24, r18
     60e:	f6 01       	movw	r30, r12
     610:	91 83       	std	Z+1, r25	; 0x01
     612:	80 83       	st	Z, r24
     614:	85 e6       	ldi	r24, 0x65	; 101
     616:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	f6 01       	movw	r30, r12
     61e:	82 83       	std	Z+2, r24	; 0x02
     620:	89 30       	cpi	r24, 0x09	; 9
     622:	10 f0       	brcs	.+4      	; 0x628 <CAN_receive+0x5c>
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	82 83       	std	Z+2, r24	; 0x02
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	12 c0       	rjmp	.+36     	; 0x650 <CAN_receive+0x84>
     62c:	e1 2e       	mov	r14, r17
     62e:	f1 2c       	mov	r15, r1
     630:	86 e6       	ldi	r24, 0x66	; 102
     632:	81 0f       	add	r24, r17
     634:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     638:	f6 01       	movw	r30, r12
     63a:	ee 0d       	add	r30, r14
     63c:	ff 1d       	adc	r31, r15
     63e:	83 83       	std	Z+3, r24	; 0x03
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     64e:	1f 5f       	subi	r17, 0xFF	; 255
     650:	f6 01       	movw	r30, r12
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	18 17       	cp	r17, r24
     656:	50 f3       	brcs	.-44     	; 0x62c <CAN_receive+0x60>
     658:	83 e4       	ldi	r24, 0x43	; 67
     65a:	94 e0       	ldi	r25, 0x04	; 4
     65c:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     660:	c6 01       	movw	r24, r12
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <CAN_interpret_status>:
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	2b 97       	sbiw	r28, 0x0b	; 11
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	18 2f       	mov	r17, r24
     68e:	80 ff       	sbrs	r24, 0
     690:	09 c0       	rjmp	.+18     	; 0x6a4 <CAN_interpret_status+0x2e>
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CAN_receive>
     69c:	88 ed       	ldi	r24, 0xD8	; 216
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     6a4:	11 ff       	sbrs	r17, 1
     6a6:	09 c0       	rjmp	.+18     	; 0x6ba <CAN_interpret_status+0x44>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CAN_receive>
     6b2:	83 ee       	ldi	r24, 0xE3	; 227
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     6ba:	12 ff       	sbrs	r17, 2
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <CAN_interpret_status+0x50>
     6be:	8e ee       	ldi	r24, 0xEE	; 238
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     6c6:	13 ff       	sbrs	r17, 3
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <CAN_interpret_status+0x5c>
     6ca:	89 ef       	ldi	r24, 0xF9	; 249
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8c e2       	ldi	r24, 0x2C	; 44
     6d6:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     6da:	2b 96       	adiw	r28, 0x0b	; 11
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	08 95       	ret

000006ee <__vector_1>:
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	2f 93       	push	r18
     6fa:	3f 93       	push	r19
     6fc:	4f 93       	push	r20
     6fe:	5f 93       	push	r21
     700:	6f 93       	push	r22
     702:	7f 93       	push	r23
     704:	8f 93       	push	r24
     706:	9f 93       	push	r25
     708:	af 93       	push	r26
     70a:	bf 93       	push	r27
     70c:	ef 93       	push	r30
     70e:	ff 93       	push	r31
     710:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <MCP2515_read_status>
     714:	0e 94 3b 03 	call	0x676	; 0x676 <CAN_interpret_status>
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	7f 91       	pop	r23
     726:	6f 91       	pop	r22
     728:	5f 91       	pop	r21
     72a:	4f 91       	pop	r20
     72c:	3f 91       	pop	r19
     72e:	2f 91       	pop	r18
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <init>:
#include "MCP2515/MCP2515drv.h"
#include "CAN/CANdrv.h"
#include "MISC/timer_counter.h"

void init() {
	USART_drv_init(MYUBRR);
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 71 07 	call	0xee2	; 0xee2 <USART_drv_init>
	SRAM_init();
     742:	0e 94 6a 07 	call	0xed4	; 0xed4 <SRAM_init>
	adc_drv_init();
     746:	0e 94 45 01 	call	0x28a	; 0x28a <adc_drv_init>
	ext_button_drv_init();
     74a:	0e 94 55 05 	call	0xaaa	; 0xaaa <ext_button_drv_init>
	adc_calibrate();
     74e:	0e 94 a7 01 	call	0x34e	; 0x34e <adc_calibrate>
	oled_init();
     752:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <oled_init>
	menu_init();
     756:	0e 94 94 06 	call	0xd28	; 0xd28 <menu_init>
	CAN_init();
     75a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <CAN_init>
	timer_init();
     75e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <timer_init>
     762:	08 95       	ret

00000764 <__vector_7>:
}

ISR (TIMER3_COMPA_vect) {
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	2f 93       	push	r18
     778:	3f 93       	push	r19
     77a:	4f 93       	push	r20
     77c:	5f 93       	push	r21
     77e:	6f 93       	push	r22
     780:	7f 93       	push	r23
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2b 97       	sbiw	r28, 0x0b	; 11
     798:	de bf       	out	0x3e, r29	; 62
     79a:	cd bf       	out	0x3d, r28	; 61
	if(adc_drv_joystick_update()){
     79c:	0e 94 24 02 	call	0x448	; 0x448 <adc_drv_joystick_update>
     7a0:	88 23       	and	r24, r24
     7a2:	d9 f0       	breq	.+54     	; 0x7da <__vector_7+0x76>
		fun_stick_t my_fun_stick = adc_drv_fun_stick_get();
     7a4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_drv_fun_stick_get>
     7a8:	27 2f       	mov	r18, r23
		CAN_msg fun_stick_CAN_msg = {
     7aa:	fe 01       	movw	r30, r28
     7ac:	31 96       	adiw	r30, 0x01	; 1
     7ae:	9b e0       	ldi	r25, 0x0B	; 11
     7b0:	df 01       	movw	r26, r30
     7b2:	1d 92       	st	X+, r1
     7b4:	9a 95       	dec	r25
     7b6:	e9 f7       	brne	.-6      	; 0x7b2 <__vector_7+0x4e>
     7b8:	95 e4       	ldi	r25, 0x45	; 69
     7ba:	e9 2e       	mov	r14, r25
			.ID = 69,
			.length = 3,
			.message = {my_fun_stick.position.X, my_fun_stick.position.Y, my_fun_stick.direction}
		};
		CAN_send(fun_stick_CAN_msg);
     7bc:	f1 2c       	mov	r15, r1
     7be:	03 e0       	ldi	r16, 0x03	; 3
     7c0:	16 2f       	mov	r17, r22
     7c2:	38 2f       	mov	r19, r24
     7c4:	4f 81       	ldd	r20, Y+7	; 0x07
     7c6:	58 85       	ldd	r21, Y+8	; 0x08
     7c8:	69 85       	ldd	r22, Y+9	; 0x09
     7ca:	7a 85       	ldd	r23, Y+10	; 0x0a
     7cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ce:	0e 94 81 02 	call	0x502	; 0x502 <CAN_send>
		print_uart("Joystick sent\n\r");
     7d2:	85 e0       	ldi	r24, 0x05	; 5
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
	}
}
     7da:	2b 96       	adiw	r28, 0x0b	; 11
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <main>:
int main(void)
{
	//fun_stick_t my_fun_stick;
	uint8_t slider1, slider2;

	init();
     814:	0e 94 9d 03 	call	0x73a	; 0x73a <init>
	print_uart("Program initialized\r\n");
     818:	85 e1       	ldi	r24, 0x15	; 21
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
		//_delay_ms(100);
		//uint8_t bla = MCP2515_read(MCP_RXF0SIDL);
		
		//printf("%d\r\n", TCNT3);
		//_delay_ms(100);
		menu_navigate();
     820:	0e 94 49 06 	call	0xc92	; 0xc92 <menu_navigate>
     824:	fd cf       	rjmp	.-6      	; 0x820 <main+0xc>

00000826 <MCP2515_read>:
     826:	cf 93       	push	r28
     828:	c8 2f       	mov	r28, r24
     82a:	88 b3       	in	r24, 0x18	; 24
     82c:	8f 7e       	andi	r24, 0xEF	; 239
     82e:	88 bb       	out	0x18, r24	; 24
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     836:	8c 2f       	mov	r24, r28
     838:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     83c:	0e 94 65 07 	call	0xeca	; 0xeca <SPI_read>
     840:	98 b3       	in	r25, 0x18	; 24
     842:	90 61       	ori	r25, 0x10	; 16
     844:	98 bb       	out	0x18, r25	; 24
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <MCP2515_write>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	d8 2f       	mov	r29, r24
     850:	c6 2f       	mov	r28, r22
     852:	88 b3       	in	r24, 0x18	; 24
     854:	8f 7e       	andi	r24, 0xEF	; 239
     856:	88 bb       	out	0x18, r24	; 24
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     85e:	8d 2f       	mov	r24, r29
     860:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     864:	8c 2f       	mov	r24, r28
     866:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     86a:	88 b3       	in	r24, 0x18	; 24
     86c:	80 61       	ori	r24, 0x10	; 16
     86e:	88 bb       	out	0x18, r24	; 24
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <MCP2515_request_to_send>:
     876:	98 b3       	in	r25, 0x18	; 24
     878:	9f 7e       	andi	r25, 0xEF	; 239
     87a:	98 bb       	out	0x18, r25	; 24
     87c:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     880:	88 b3       	in	r24, 0x18	; 24
     882:	80 61       	ori	r24, 0x10	; 16
     884:	88 bb       	out	0x18, r24	; 24
     886:	08 95       	ret

00000888 <MCP2515_bit_modify>:
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	18 2f       	mov	r17, r24
     890:	d6 2f       	mov	r29, r22
     892:	c4 2f       	mov	r28, r20
     894:	88 b3       	in	r24, 0x18	; 24
     896:	8f 7e       	andi	r24, 0xEF	; 239
     898:	88 bb       	out	0x18, r24	; 24
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     8a6:	8d 2f       	mov	r24, r29
     8a8:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     8ac:	8c 2f       	mov	r24, r28
     8ae:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     8b2:	88 b3       	in	r24, 0x18	; 24
     8b4:	80 61       	ori	r24, 0x10	; 16
     8b6:	88 bb       	out	0x18, r24	; 24
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	08 95       	ret

000008c0 <MCP2515_reset>:
     8c0:	88 b3       	in	r24, 0x18	; 24
     8c2:	8f 7e       	andi	r24, 0xEF	; 239
     8c4:	88 bb       	out	0x18, r24	; 24
     8c6:	80 ec       	ldi	r24, 0xC0	; 192
     8c8:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     8cc:	88 b3       	in	r24, 0x18	; 24
     8ce:	80 61       	ori	r24, 0x10	; 16
     8d0:	88 bb       	out	0x18, r24	; 24
     8d2:	08 95       	ret

000008d4 <MCP2515_init>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SPI_init>
     8dc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <MCP2515_reset>
     8e0:	8e e0       	ldi	r24, 0x0E	; 14
     8e2:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     8e6:	80 7e       	andi	r24, 0xE0	; 224
     8e8:	80 38       	cpi	r24, 0x80	; 128
     8ea:	31 f0       	breq	.+12     	; 0x8f8 <MCP2515_init+0x24>
     8ec:	8b e2       	ldi	r24, 0x2B	; 43
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	7a c0       	rjmp	.+244    	; 0x9ec <MCP2515_init+0x118>
     8f8:	67 e0       	ldi	r22, 0x07	; 7
     8fa:	8d e0       	ldi	r24, 0x0D	; 13
     8fc:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     900:	40 e6       	ldi	r20, 0x60	; 96
     902:	60 e6       	ldi	r22, 0x60	; 96
     904:	80 e6       	ldi	r24, 0x60	; 96
     906:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     90a:	80 e6       	ldi	r24, 0x60	; 96
     90c:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     910:	80 36       	cpi	r24, 0x60	; 96
     912:	31 f0       	breq	.+12     	; 0x920 <MCP2515_init+0x4c>
     914:	8f e5       	ldi	r24, 0x5F	; 95
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     91c:	8e ef       	ldi	r24, 0xFE	; 254
     91e:	66 c0       	rjmp	.+204    	; 0x9ec <MCP2515_init+0x118>
     920:	40 e6       	ldi	r20, 0x60	; 96
     922:	60 e6       	ldi	r22, 0x60	; 96
     924:	80 e7       	ldi	r24, 0x70	; 112
     926:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     92a:	80 e7       	ldi	r24, 0x70	; 112
     92c:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     930:	c8 2f       	mov	r28, r24
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	ce 01       	movw	r24, r28
     936:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     93a:	c0 36       	cpi	r28, 0x60	; 96
     93c:	d1 05       	cpc	r29, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <MCP2515_init+0x78>
     940:	84 e8       	ldi	r24, 0x84	; 132
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     948:	8d ef       	ldi	r24, 0xFD	; 253
     94a:	50 c0       	rjmp	.+160    	; 0x9ec <MCP2515_init+0x118>
     94c:	45 e0       	ldi	r20, 0x05	; 5
     94e:	6f ef       	ldi	r22, 0xFF	; 255
     950:	8b e2       	ldi	r24, 0x2B	; 43
     952:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     956:	8b e2       	ldi	r24, 0x2B	; 43
     958:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     95c:	85 30       	cpi	r24, 0x05	; 5
     95e:	31 f0       	breq	.+12     	; 0x96c <MCP2515_init+0x98>
     960:	89 ea       	ldi	r24, 0xA9	; 169
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     968:	8c ef       	ldi	r24, 0xFC	; 252
     96a:	40 c0       	rjmp	.+128    	; 0x9ec <MCP2515_init+0x118>
     96c:	43 e0       	ldi	r20, 0x03	; 3
     96e:	63 e0       	ldi	r22, 0x03	; 3
     970:	8a e2       	ldi	r24, 0x2A	; 42
     972:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     976:	8a e2       	ldi	r24, 0x2A	; 42
     978:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     97c:	83 30       	cpi	r24, 0x03	; 3
     97e:	31 f0       	breq	.+12     	; 0x98c <MCP2515_init+0xb8>
     980:	87 ec       	ldi	r24, 0xC7	; 199
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     988:	8b ef       	ldi	r24, 0xFB	; 251
     98a:	30 c0       	rjmp	.+96     	; 0x9ec <MCP2515_init+0x118>
     98c:	41 eb       	ldi	r20, 0xB1	; 177
     98e:	61 eb       	ldi	r22, 0xB1	; 177
     990:	89 e2       	ldi	r24, 0x29	; 41
     992:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     996:	89 e2       	ldi	r24, 0x29	; 41
     998:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     99c:	81 3b       	cpi	r24, 0xB1	; 177
     99e:	31 f0       	breq	.+12     	; 0x9ac <MCP2515_init+0xd8>
     9a0:	89 ed       	ldi	r24, 0xD9	; 217
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     9a8:	8a ef       	ldi	r24, 0xFA	; 250
     9aa:	20 c0       	rjmp	.+64     	; 0x9ec <MCP2515_init+0x118>
     9ac:	45 e0       	ldi	r20, 0x05	; 5
     9ae:	65 e0       	ldi	r22, 0x05	; 5
     9b0:	88 e2       	ldi	r24, 0x28	; 40
     9b2:	0e 94 44 04 	call	0x888	; 0x888 <MCP2515_bit_modify>
     9b6:	88 e2       	ldi	r24, 0x28	; 40
     9b8:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     9bc:	85 30       	cpi	r24, 0x05	; 5
     9be:	31 f0       	breq	.+12     	; 0x9cc <MCP2515_init+0xf8>
     9c0:	89 ed       	ldi	r24, 0xD9	; 217
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     9c8:	89 ef       	ldi	r24, 0xF9	; 249
     9ca:	10 c0       	rjmp	.+32     	; 0x9ec <MCP2515_init+0x118>
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	8f e0       	ldi	r24, 0x0F	; 15
     9d0:	0e 94 25 04 	call	0x84a	; 0x84a <MCP2515_write>
     9d4:	8e e0       	ldi	r24, 0x0E	; 14
     9d6:	0e 94 13 04 	call	0x826	; 0x826 <MCP2515_read>
     9da:	80 7e       	andi	r24, 0xE0	; 224
     9dc:	31 f0       	breq	.+12     	; 0x9ea <MCP2515_init+0x116>
     9de:	8c ee       	ldi	r24, 0xEC	; 236
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     9e6:	88 ef       	ldi	r24, 0xF8	; 248
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <MCP2515_init+0x118>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <MCP2515_read_status>:
     9f2:	88 b3       	in	r24, 0x18	; 24
     9f4:	8f 7e       	andi	r24, 0xEF	; 239
     9f6:	88 bb       	out	0x18, r24	; 24
     9f8:	80 ea       	ldi	r24, 0xA0	; 160
     9fa:	0e 94 62 07 	call	0xec4	; 0xec4 <SPI_write>
     9fe:	0e 94 65 07 	call	0xeca	; 0xeca <SPI_read>
     a02:	0e 94 65 07 	call	0xeca	; 0xeca <SPI_read>
     a06:	98 b3       	in	r25, 0x18	; 24
     a08:	90 61       	ori	r25, 0x10	; 16
     a0a:	98 bb       	out	0x18, r25	; 24
     a0c:	08 95       	ret

00000a0e <__vector_2>:
#include "ext_button_drv.h"
#include "prints.h"


ISR (INT1_vect)
{
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
     a30:	8e e0       	ldi	r24, 0x0E	; 14
     a32:	94 e0       	ldi	r25, 0x04	; 4
     a34:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
}
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_3>:

ISR (INT2_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
     a7c:	85 e2       	ldi	r24, 0x25	; 37
     a7e:	94 e0       	ldi	r25, 0x04	; 4
     a80:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
	enter();
     a84:	0e 94 63 06 	call	0xcc6	; 0xcc6 <enter>
	
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
     aaa:	81 b3       	in	r24, 0x11	; 17
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
     ab0:	86 b1       	in	r24, 0x06	; 6
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
     ab6:	f8 94       	cli
	// Enables interrupt on pin INT1
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
     ab8:	8b b7       	in	r24, 0x3b	; 59
     aba:	80 68       	ori	r24, 0x80	; 128
     abc:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT1
	set_bit(MCUCR, ISC11);
     abe:	85 b7       	in	r24, 0x35	; 53
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
     ac4:	85 b7       	in	r24, 0x35	; 53
     ac6:	84 60       	ori	r24, 0x04	; 4
     ac8:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
     aca:	8b b7       	in	r24, 0x3b	; 59
     acc:	8e 7f       	andi	r24, 0xFE	; 254
     ace:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
     ad0:	86 b7       	in	r24, 0x36	; 54
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
     ad6:	8a b7       	in	r24, 0x3a	; 58
     ad8:	80 62       	ori	r24, 0x20	; 32
     ada:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
     adc:	8b b7       	in	r24, 0x3b	; 59
     ade:	80 62       	ori	r24, 0x20	; 32
     ae0:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
     ae2:	78 94       	sei
     ae4:	08 95       	ret

00000ae6 <print_oled>:
     ae6:	2e e0       	ldi	r18, 0x0E	; 14
     ae8:	31 e0       	ldi	r19, 0x01	; 1
     aea:	30 93 5d 04 	sts	0x045D, r19	; 0x80045d <__iob+0x3>
     aee:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <__iob+0x2>
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	0e 94 a8 07 	call	0xf50	; 0xf50 <printf>
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	08 95       	ret

00000b00 <print_uart>:
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	31 e0       	ldi	r19, 0x01	; 1
     b04:	30 93 5d 04 	sts	0x045D, r19	; 0x80045d <__iob+0x3>
     b08:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <__iob+0x2>
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	0e 94 a8 07 	call	0xf50	; 0xf50 <printf>
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	08 95       	ret

00000b1a <timer_init>:
#include "prints.h"
#include "common_includes.h"

void timer_init() {
	// Compare output channel A, clear on compare match, ICR (Input Capture Register)
	TCCR3A = 0x40;
     b1a:	80 e4       	ldi	r24, 0x40	; 64
     b1c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	// ICR, prescaler = 1024
	TCCR3B = 0xD;
     b20:	8d e0       	ldi	r24, 0x0D	; 13
     b22:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	// Enable output compare A match interrupt
	ETIMSK = 0x10;
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7fc07d>
	// Compare match on 32767 (7FFF)
	// Interrupt on: 1/(F_osc/prescaler)*Compare_match [sec]
	OCR3A = 0x1D4; // Interrupt every 98 ms
     b2c:	84 ed       	ldi	r24, 0xD4	; 212
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     b34:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     b38:	08 95       	ret

00000b3a <this_end>:
	.options = 2
};

void this_end()
{
	print_uart("hei \r\n");
     b3a:	8f e3       	ldi	r24, 0x3F	; 63
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     b42:	08 95       	ret

00000b44 <that_end>:
}

void that_end()
{
	print_uart("hallo \r\n");
     b44:	86 e4       	ldi	r24, 0x46	; 70
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 80 05 	call	0xb00	; 0xb00 <print_uart>
     b4c:	08 95       	ret

00000b4e <print_arrow>:
	last_dir = dir;
}

void print_arrow()
{
	oled_write_data(0x18);
     b4e:	88 e1       	ldi	r24, 0x18	; 24
     b50:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
	oled_write_data(0x18);
     b54:	88 e1       	ldi	r24, 0x18	; 24
     b56:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
	oled_write_data(0x7E);
     b5a:	8e e7       	ldi	r24, 0x7E	; 126
     b5c:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
	oled_write_data(0x3C);
     b60:	8c e3       	ldi	r24, 0x3C	; 60
     b62:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
	oled_write_data(0x18);
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
     b6c:	08 95       	ret

00000b6e <print_menu_page>:
{
	print_uart("hallo \r\n");
}

void print_menu_page()
{
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
	char *menu_page_title = current_menu->title;
     b74:	c0 91 53 04 	lds	r28, 0x0453	; 0x800453 <current_menu>
     b78:	d0 91 54 04 	lds	r29, 0x0454	; 0x800454 <current_menu+0x1>
	oled_reset();
     b7c:	0e 94 cc 06 	call	0xd98	; 0xd98 <oled_reset>
	oled_goto_line(0);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
	oled_goto_column(40);
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
	print_oled(menu_page_title);
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 73 05 	call	0xae6	; 0xae6 <print_oled>
	
	for(uint8_t i = 0; i < current_menu->options; i++){
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	13 c0       	rjmp	.+38     	; 0xbbc <print_menu_page+0x4e>
		char *option = current_menu->submenu[i].option_name;
     b96:	4c e1       	ldi	r20, 0x1C	; 28
     b98:	48 9f       	mul	r20, r24
     b9a:	e0 01       	movw	r28, r0
     b9c:	49 9f       	mul	r20, r25
     b9e:	d0 0d       	add	r29, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	68 96       	adiw	r28, 0x18	; 24
     ba4:	c2 0f       	add	r28, r18
     ba6:	d3 1f       	adc	r29, r19
		oled_goto_line(i+1);
     ba8:	1f 5f       	subi	r17, 0xFF	; 255
     baa:	81 2f       	mov	r24, r17
     bac:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
		oled_goto_column(8);
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
		print_oled(option);
     bb6:	ce 01       	movw	r24, r28
     bb8:	0e 94 73 05 	call	0xae6	; 0xae6 <print_oled>
	oled_reset();
	oled_goto_line(0);
	oled_goto_column(40);
	print_oled(menu_page_title);
	
	for(uint8_t i = 0; i < current_menu->options; i++){
     bbc:	81 2f       	mov	r24, r17
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <current_menu>
     bc4:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <current_menu+0x1>
     bc8:	f9 01       	movw	r30, r18
     bca:	e8 57       	subi	r30, 0x78	; 120
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	40 81       	ld	r20, Z
     bd0:	51 81       	ldd	r21, Z+1	; 0x01
     bd2:	84 17       	cp	r24, r20
     bd4:	95 07       	cpc	r25, r21
     bd6:	fc f2       	brlt	.-66     	; 0xb96 <print_menu_page+0x28>
		oled_goto_line(i+1);
		oled_goto_column(8);
		print_oled(option);
	}
	
	oled_pos(FIRST_LINE_MENU, 0);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	0e 94 c0 06 	call	0xd80	; 0xd80 <oled_pos>
	print_arrow();
     be0:	0e 94 a7 05 	call	0xb4e	; 0xb4e <print_arrow>
	arrow_on_line = FIRST_LINE_MENU;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <arrow_on_line>
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <update_menu>:

void update_menu(void *menu_page)
{
	menu_struct *temp_menu_page = menu_page;
	current_menu = temp_menu_page;
     bf2:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <current_menu+0x1>
     bf6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <current_menu>
	num_options_in_menu = temp_menu_page->options;
     bfa:	fc 01       	movw	r30, r24
     bfc:	e8 57       	subi	r30, 0x78	; 120
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	80 81       	ld	r24, Z
     c02:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <num_options_in_menu>
	print_menu_page();
     c06:	0e 94 b7 05 	call	0xb6e	; 0xb6e <print_menu_page>
     c0a:	08 95       	ret

00000c0c <clear_arrow>:
	oled_write_data(0x3C);
	oled_write_data(0x18);
}

void clear_arrow()
{
     c0c:	cf 93       	push	r28
	for(uint8_t i = 0; i < 5; i++) oled_write_data(0x00);
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <clear_arrow+0xe>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
     c18:	cf 5f       	subi	r28, 0xFF	; 255
     c1a:	c5 30       	cpi	r28, 0x05	; 5
     c1c:	d0 f3       	brcs	.-12     	; 0xc12 <clear_arrow+0x6>
}
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <move_arrow_up>:

void move_arrow_up()
{
	if(arrow_on_line > FIRST_LINE_MENU && arrow_on_line <= num_options_in_menu) {
     c22:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <arrow_on_line>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	b8 f0       	brcs	.+46     	; 0xc58 <move_arrow_up+0x36>
     c2a:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <num_options_in_menu>
     c2e:	98 17       	cp	r25, r24
     c30:	98 f0       	brcs	.+38     	; 0xc58 <move_arrow_up+0x36>
		oled_goto_line(arrow_on_line);
     c32:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
		oled_goto_column(0);
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
		clear_arrow();
     c3c:	0e 94 06 06 	call	0xc0c	; 0xc0c <clear_arrow>
		arrow_on_line--;
     c40:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <arrow_on_line>
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <arrow_on_line>
		oled_goto_line(arrow_on_line);
     c4a:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
		oled_goto_column(0);
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
		print_arrow();
     c54:	0e 94 a7 05 	call	0xb4e	; 0xb4e <print_arrow>
     c58:	08 95       	ret

00000c5a <move_arrow_down>:
	}
}

void move_arrow_down()
{
	if(arrow_on_line >= FIRST_LINE_MENU && arrow_on_line < num_options_in_menu) {
     c5a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <arrow_on_line>
     c5e:	88 23       	and	r24, r24
     c60:	b9 f0       	breq	.+46     	; 0xc90 <move_arrow_down+0x36>
     c62:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <num_options_in_menu>
     c66:	89 17       	cp	r24, r25
     c68:	98 f4       	brcc	.+38     	; 0xc90 <move_arrow_down+0x36>
		oled_goto_line(arrow_on_line);
     c6a:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
		oled_goto_column(0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
		clear_arrow();
     c74:	0e 94 06 06 	call	0xc0c	; 0xc0c <clear_arrow>
		arrow_on_line++;
     c78:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <arrow_on_line>
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <arrow_on_line>
		oled_goto_line(arrow_on_line);
     c82:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
		oled_goto_column(0);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
		print_arrow();
     c8c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <print_arrow>
     c90:	08 95       	ret

00000c92 <menu_navigate>:
	num_options_in_menu = temp_menu_page->options;
	print_menu_page();
}

void menu_navigate()
{	
     c92:	cf 93       	push	r28
	static dir_t last_dir;
	dir_t dir = dir_read(pos_read());
     c94:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pos_read>
     c98:	0e 94 ef 01 	call	0x3de	; 0x3de <dir_read>
     c9c:	c8 2f       	mov	r28, r24
	
	if(dir == DOWN && dir != last_dir) {
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	39 f4       	brne	.+14     	; 0xcb0 <menu_navigate+0x1e>
     ca2:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <last_dir.2331>
     ca6:	c8 17       	cp	r28, r24
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <menu_navigate+0x1e>
		move_arrow_down();
     caa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <move_arrow_down>
     cae:	07 c0       	rjmp	.+14     	; 0xcbe <menu_navigate+0x2c>
	}
	else if(dir == UP && dir != last_dir) {
     cb0:	c2 30       	cpi	r28, 0x02	; 2
     cb2:	29 f4       	brne	.+10     	; 0xcbe <menu_navigate+0x2c>
     cb4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <last_dir.2331>
     cb8:	c8 13       	cpse	r28, r24
		move_arrow_up();
     cba:	0e 94 11 06 	call	0xc22	; 0xc22 <move_arrow_up>
	}
	last_dir = dir;
     cbe:	c0 93 52 04 	sts	0x0452, r28	; 0x800452 <last_dir.2331>
}
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <enter>:
		print_arrow();
	}
}

void enter()
{
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	6c 97       	sbiw	r28, 0x1c	; 28
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
     cda:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <current_menu>
     cde:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <current_menu+0x1>
     ce2:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <arrow_on_line>
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	31 09       	sbc	r19, r1
     cec:	4c e1       	ldi	r20, 0x1C	; 28
     cee:	42 9f       	mul	r20, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	43 9f       	mul	r20, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	e8 0f       	add	r30, r24
     cfa:	f9 1f       	adc	r31, r25
     cfc:	78 96       	adiw	r30, 0x18	; 24
     cfe:	8c e1       	ldi	r24, 0x1C	; 28
     d00:	de 01       	movw	r26, r28
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	8a 95       	dec	r24
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
     d0c:	e9 8d       	ldd	r30, Y+25	; 0x19
     d0e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d14:	09 95       	icall
}
     d16:	6c 96       	adiw	r28, 0x1c	; 28
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <menu_init>:

void menu_init()
{
	main_menu.submenu[0].callback_parameter = &Sub_menu_1;
     d28:	ec e1       	ldi	r30, 0x1C	; 28
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	86 ea       	ldi	r24, 0xA6	; 166
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	93 ab       	std	Z+51, r25	; 0x33
     d32:	82 ab       	std	Z+50, r24	; 0x32
	main_menu.submenu[1].callback_parameter = &Sub_menu_2;
     d34:	80 e3       	ldi	r24, 0x30	; 48
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <main_menu+0x4f>
     d3c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <main_menu+0x4e>
	Sub_menu_1.submenu[1].callback_parameter = &main_menu;
     d40:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <Sub_menu_1+0x4f>
     d44:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <Sub_menu_1+0x4e>
	Sub_menu_2.submenu[1].callback_parameter = &main_menu;
     d48:	f0 93 7f 02 	sts	0x027F, r31	; 0x80027f <Sub_menu_2+0x4f>
     d4c:	e0 93 7e 02 	sts	0x027E, r30	; 0x80027e <Sub_menu_2+0x4e>
	update_menu(&main_menu);
     d50:	cf 01       	movw	r24, r30
     d52:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <update_menu>
     d56:	08 95       	ret

00000d58 <oled_write_cmd>:
     d58:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xba0>
     d5c:	08 95       	ret

00000d5e <oled_goto_line>:
     d5e:	80 55       	subi	r24, 0x50	; 80
     d60:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     d64:	08 95       	ret

00000d66 <oled_goto_column>:
     d66:	cf 93       	push	r28
     d68:	c8 2f       	mov	r28, r24
     d6a:	c2 95       	swap	r28
     d6c:	cf 70       	andi	r28, 0x0F	; 15
     d6e:	8f 70       	andi	r24, 0x0F	; 15
     d70:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     d74:	8c 2f       	mov	r24, r28
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <oled_pos>:
     d80:	cf 93       	push	r28
     d82:	c6 2f       	mov	r28, r22
     d84:	0e 94 af 06 	call	0xd5e	; 0xd5e <oled_goto_line>
     d88:	8c 2f       	mov	r24, r28
     d8a:	0e 94 b3 06 	call	0xd66	; 0xd66 <oled_goto_column>
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <oled_write_data>:
     d92:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xda0>
     d96:	08 95       	ret

00000d98 <oled_reset>:
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	c0 e0       	ldi	r28, 0x00	; 0
     d9e:	d0 e0       	ldi	r29, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <oled_reset+0x12>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
     da8:	21 96       	adiw	r28, 0x01	; 1
     daa:	c1 15       	cp	r28, r1
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	d8 07       	cpc	r29, r24
     db0:	c0 f3       	brcs	.-16     	; 0xda2 <oled_reset+0xa>
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <oled_init>:
     db8:	8e ea       	ldi	r24, 0xAE	; 174
     dba:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dbe:	81 ea       	ldi	r24, 0xA1	; 161
     dc0:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dc4:	8a ed       	ldi	r24, 0xDA	; 218
     dc6:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dca:	82 e1       	ldi	r24, 0x12	; 18
     dcc:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dd0:	88 ec       	ldi	r24, 0xC8	; 200
     dd2:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dd6:	88 ea       	ldi	r24, 0xA8	; 168
     dd8:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     de2:	85 ed       	ldi	r24, 0xD5	; 213
     de4:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dee:	81 e8       	ldi	r24, 0x81	; 129
     df0:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     dfa:	89 ed       	ldi	r24, 0xD9	; 217
     dfc:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e00:	81 e2       	ldi	r24, 0x21	; 33
     e02:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e06:	80 e2       	ldi	r24, 0x20	; 32
     e08:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e12:	8b ed       	ldi	r24, 0xDB	; 219
     e14:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e18:	80 e3       	ldi	r24, 0x30	; 48
     e1a:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e1e:	8d ea       	ldi	r24, 0xAD	; 173
     e20:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e2a:	84 ea       	ldi	r24, 0xA4	; 164
     e2c:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e30:	86 ea       	ldi	r24, 0xA6	; 166
     e32:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e36:	8f ea       	ldi	r24, 0xAF	; 175
     e38:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e3c:	81 e2       	ldi	r24, 0x21	; 33
     e3e:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e4e:	82 e2       	ldi	r24, 0x22	; 34
     e50:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_write_cmd>
     e60:	0e 94 cc 06 	call	0xd98	; 0xd98 <oled_reset>
     e64:	08 95       	ret

00000e66 <oled_print>:
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	d0 ee       	ldi	r29, 0xE0	; 224
     e6c:	d8 0f       	add	r29, r24
     e6e:	c0 e0       	ldi	r28, 0x00	; 0
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <oled_print+0x2e>
     e72:	8d 2f       	mov	r24, r29
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	e8 0f       	add	r30, r24
     e82:	f9 1f       	adc	r31, r25
     e84:	ec 0f       	add	r30, r28
     e86:	f1 1d       	adc	r31, r1
     e88:	e0 59       	subi	r30, 0x90	; 144
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	84 91       	lpm	r24, Z
     e8e:	0e 94 c9 06 	call	0xd92	; 0xd92 <oled_write_data>
     e92:	cf 5f       	subi	r28, 0xFF	; 255
     e94:	c5 30       	cpi	r28, 0x05	; 5
     e96:	68 f3       	brcs	.-38     	; 0xe72 <oled_print+0xc>
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <SPI_init>:
     e9e:	87 b3       	in	r24, 0x17	; 23
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	87 bb       	out	0x17, r24	; 23
     ea4:	87 b3       	in	r24, 0x17	; 23
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	87 bb       	out	0x17, r24	; 23
     eaa:	87 b3       	in	r24, 0x17	; 23
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	87 bb       	out	0x17, r24	; 23
     eb0:	81 e5       	ldi	r24, 0x51	; 81
     eb2:	8d b9       	out	0x0d, r24	; 13
     eb4:	88 b3       	in	r24, 0x18	; 24
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	88 bb       	out	0x18, r24	; 24
     eba:	08 95       	ret

00000ebc <SPI_transmit>:
     ebc:	8f b9       	out	0x0f, r24	; 15
     ebe:	77 9b       	sbis	0x0e, 7	; 14
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <SPI_transmit+0x2>
     ec2:	08 95       	ret

00000ec4 <SPI_write>:
     ec4:	0e 94 5e 07 	call	0xebc	; 0xebc <SPI_transmit>
     ec8:	08 95       	ret

00000eca <SPI_read>:
     eca:	84 ef       	ldi	r24, 0xF4	; 244
     ecc:	0e 94 5e 07 	call	0xebc	; 0xebc <SPI_transmit>
     ed0:	8f b1       	in	r24, 0x0f	; 15
     ed2:	08 95       	ret

00000ed4 <SRAM_init>:
     ed4:	85 b7       	in	r24, 0x35	; 53
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	85 bf       	out	0x35, r24	; 53
     eda:	80 b7       	in	r24, 0x30	; 48
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	80 bf       	out	0x30, r24	; 48
     ee0:	08 95       	ret

00000ee2 <USART_drv_init>:
     ee2:	90 bd       	out	0x20, r25	; 32
     ee4:	89 b9       	out	0x09, r24	; 9
     ee6:	88 e1       	ldi	r24, 0x18	; 24
     ee8:	8a b9       	out	0x0a, r24	; 10
     eea:	8e e8       	ldi	r24, 0x8E	; 142
     eec:	80 bd       	out	0x20, r24	; 32
     eee:	08 95       	ret

00000ef0 <USART_Transmit>:
     ef0:	5d 9b       	sbis	0x0b, 5	; 11
     ef2:	fe cf       	rjmp	.-4      	; 0xef0 <USART_Transmit>
     ef4:	8c b9       	out	0x0c, r24	; 12
     ef6:	08 95       	ret

00000ef8 <USART_Receive>:
     ef8:	5f 9b       	sbis	0x0b, 7	; 11
     efa:	fe cf       	rjmp	.-4      	; 0xef8 <USART_Receive>
     efc:	8c b1       	in	r24, 0x0c	; 12
     efe:	08 95       	ret

00000f00 <__divmodhi4>:
     f00:	97 fb       	bst	r25, 7
     f02:	07 2e       	mov	r0, r23
     f04:	16 f4       	brtc	.+4      	; 0xf0a <__divmodhi4+0xa>
     f06:	00 94       	com	r0
     f08:	07 d0       	rcall	.+14     	; 0xf18 <__divmodhi4_neg1>
     f0a:	77 fd       	sbrc	r23, 7
     f0c:	09 d0       	rcall	.+18     	; 0xf20 <__divmodhi4_neg2>
     f0e:	0e 94 94 07 	call	0xf28	; 0xf28 <__udivmodhi4>
     f12:	07 fc       	sbrc	r0, 7
     f14:	05 d0       	rcall	.+10     	; 0xf20 <__divmodhi4_neg2>
     f16:	3e f4       	brtc	.+14     	; 0xf26 <__divmodhi4_exit>

00000f18 <__divmodhi4_neg1>:
     f18:	90 95       	com	r25
     f1a:	81 95       	neg	r24
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	08 95       	ret

00000f20 <__divmodhi4_neg2>:
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255

00000f26 <__divmodhi4_exit>:
     f26:	08 95       	ret

00000f28 <__udivmodhi4>:
     f28:	aa 1b       	sub	r26, r26
     f2a:	bb 1b       	sub	r27, r27
     f2c:	51 e1       	ldi	r21, 0x11	; 17
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <__udivmodhi4_ep>

00000f30 <__udivmodhi4_loop>:
     f30:	aa 1f       	adc	r26, r26
     f32:	bb 1f       	adc	r27, r27
     f34:	a6 17       	cp	r26, r22
     f36:	b7 07       	cpc	r27, r23
     f38:	10 f0       	brcs	.+4      	; 0xf3e <__udivmodhi4_ep>
     f3a:	a6 1b       	sub	r26, r22
     f3c:	b7 0b       	sbc	r27, r23

00000f3e <__udivmodhi4_ep>:
     f3e:	88 1f       	adc	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	5a 95       	dec	r21
     f44:	a9 f7       	brne	.-22     	; 0xf30 <__udivmodhi4_loop>
     f46:	80 95       	com	r24
     f48:	90 95       	com	r25
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	08 95       	ret

00000f50 <printf>:
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__prologue_saves__+0x20>
     f5c:	ae 01       	movw	r20, r28
     f5e:	4b 5f       	subi	r20, 0xFB	; 251
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	fa 01       	movw	r30, r20
     f64:	61 91       	ld	r22, Z+
     f66:	71 91       	ld	r23, Z+
     f68:	af 01       	movw	r20, r30
     f6a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__iob+0x2>
     f6e:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__iob+0x3>
     f72:	0e 94 be 07 	call	0xf7c	; 0xf7c <vfprintf>
     f76:	e2 e0       	ldi	r30, 0x02	; 2
     f78:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__epilogue_restores__+0x20>

00000f7c <vfprintf>:
     f7c:	ab e0       	ldi	r26, 0x0B	; 11
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 ec       	ldi	r30, 0xC4	; 196
     f82:	f7 e0       	ldi	r31, 0x07	; 7
     f84:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__prologue_saves__>
     f88:	6c 01       	movw	r12, r24
     f8a:	7b 01       	movw	r14, r22
     f8c:	8a 01       	movw	r16, r20
     f8e:	fc 01       	movw	r30, r24
     f90:	17 82       	std	Z+7, r1	; 0x07
     f92:	16 82       	std	Z+6, r1	; 0x06
     f94:	83 81       	ldd	r24, Z+3	; 0x03
     f96:	81 ff       	sbrs	r24, 1
     f98:	cc c1       	rjmp	.+920    	; 0x1332 <vfprintf+0x3b6>
     f9a:	ce 01       	movw	r24, r28
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	3c 01       	movw	r6, r24
     fa0:	f6 01       	movw	r30, r12
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	f7 01       	movw	r30, r14
     fa6:	93 fd       	sbrc	r25, 3
     fa8:	85 91       	lpm	r24, Z+
     faa:	93 ff       	sbrs	r25, 3
     fac:	81 91       	ld	r24, Z+
     fae:	7f 01       	movw	r14, r30
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <vfprintf+0x3a>
     fb4:	ba c1       	rjmp	.+884    	; 0x132a <vfprintf+0x3ae>
     fb6:	85 32       	cpi	r24, 0x25	; 37
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <vfprintf+0x4c>
     fba:	93 fd       	sbrc	r25, 3
     fbc:	85 91       	lpm	r24, Z+
     fbe:	93 ff       	sbrs	r25, 3
     fc0:	81 91       	ld	r24, Z+
     fc2:	7f 01       	movw	r14, r30
     fc4:	85 32       	cpi	r24, 0x25	; 37
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <vfprintf+0x56>
     fc8:	b6 01       	movw	r22, r12
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
     fd0:	e7 cf       	rjmp	.-50     	; 0xfa0 <vfprintf+0x24>
     fd2:	91 2c       	mov	r9, r1
     fd4:	21 2c       	mov	r2, r1
     fd6:	31 2c       	mov	r3, r1
     fd8:	ff e1       	ldi	r31, 0x1F	; 31
     fda:	f3 15       	cp	r31, r3
     fdc:	d8 f0       	brcs	.+54     	; 0x1014 <vfprintf+0x98>
     fde:	8b 32       	cpi	r24, 0x2B	; 43
     fe0:	79 f0       	breq	.+30     	; 0x1000 <vfprintf+0x84>
     fe2:	38 f4       	brcc	.+14     	; 0xff2 <vfprintf+0x76>
     fe4:	80 32       	cpi	r24, 0x20	; 32
     fe6:	79 f0       	breq	.+30     	; 0x1006 <vfprintf+0x8a>
     fe8:	83 32       	cpi	r24, 0x23	; 35
     fea:	a1 f4       	brne	.+40     	; 0x1014 <vfprintf+0x98>
     fec:	23 2d       	mov	r18, r3
     fee:	20 61       	ori	r18, 0x10	; 16
     ff0:	1d c0       	rjmp	.+58     	; 0x102c <vfprintf+0xb0>
     ff2:	8d 32       	cpi	r24, 0x2D	; 45
     ff4:	61 f0       	breq	.+24     	; 0x100e <vfprintf+0x92>
     ff6:	80 33       	cpi	r24, 0x30	; 48
     ff8:	69 f4       	brne	.+26     	; 0x1014 <vfprintf+0x98>
     ffa:	23 2d       	mov	r18, r3
     ffc:	21 60       	ori	r18, 0x01	; 1
     ffe:	16 c0       	rjmp	.+44     	; 0x102c <vfprintf+0xb0>
    1000:	83 2d       	mov	r24, r3
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	38 2e       	mov	r3, r24
    1006:	e3 2d       	mov	r30, r3
    1008:	e4 60       	ori	r30, 0x04	; 4
    100a:	3e 2e       	mov	r3, r30
    100c:	2a c0       	rjmp	.+84     	; 0x1062 <vfprintf+0xe6>
    100e:	f3 2d       	mov	r31, r3
    1010:	f8 60       	ori	r31, 0x08	; 8
    1012:	1d c0       	rjmp	.+58     	; 0x104e <vfprintf+0xd2>
    1014:	37 fc       	sbrc	r3, 7
    1016:	2d c0       	rjmp	.+90     	; 0x1072 <vfprintf+0xf6>
    1018:	20 ed       	ldi	r18, 0xD0	; 208
    101a:	28 0f       	add	r18, r24
    101c:	2a 30       	cpi	r18, 0x0A	; 10
    101e:	40 f0       	brcs	.+16     	; 0x1030 <vfprintf+0xb4>
    1020:	8e 32       	cpi	r24, 0x2E	; 46
    1022:	b9 f4       	brne	.+46     	; 0x1052 <vfprintf+0xd6>
    1024:	36 fc       	sbrc	r3, 6
    1026:	81 c1       	rjmp	.+770    	; 0x132a <vfprintf+0x3ae>
    1028:	23 2d       	mov	r18, r3
    102a:	20 64       	ori	r18, 0x40	; 64
    102c:	32 2e       	mov	r3, r18
    102e:	19 c0       	rjmp	.+50     	; 0x1062 <vfprintf+0xe6>
    1030:	36 fe       	sbrs	r3, 6
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <vfprintf+0xc4>
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	98 9e       	mul	r9, r24
    1038:	20 0d       	add	r18, r0
    103a:	11 24       	eor	r1, r1
    103c:	92 2e       	mov	r9, r18
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <vfprintf+0xe6>
    1040:	ea e0       	ldi	r30, 0x0A	; 10
    1042:	2e 9e       	mul	r2, r30
    1044:	20 0d       	add	r18, r0
    1046:	11 24       	eor	r1, r1
    1048:	22 2e       	mov	r2, r18
    104a:	f3 2d       	mov	r31, r3
    104c:	f0 62       	ori	r31, 0x20	; 32
    104e:	3f 2e       	mov	r3, r31
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <vfprintf+0xe6>
    1052:	8c 36       	cpi	r24, 0x6C	; 108
    1054:	21 f4       	brne	.+8      	; 0x105e <vfprintf+0xe2>
    1056:	83 2d       	mov	r24, r3
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	38 2e       	mov	r3, r24
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0xe6>
    105e:	88 36       	cpi	r24, 0x68	; 104
    1060:	41 f4       	brne	.+16     	; 0x1072 <vfprintf+0xf6>
    1062:	f7 01       	movw	r30, r14
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	7f 01       	movw	r14, r30
    106e:	81 11       	cpse	r24, r1
    1070:	b3 cf       	rjmp	.-154    	; 0xfd8 <vfprintf+0x5c>
    1072:	98 2f       	mov	r25, r24
    1074:	9f 7d       	andi	r25, 0xDF	; 223
    1076:	95 54       	subi	r25, 0x45	; 69
    1078:	93 30       	cpi	r25, 0x03	; 3
    107a:	28 f4       	brcc	.+10     	; 0x1086 <vfprintf+0x10a>
    107c:	0c 5f       	subi	r16, 0xFC	; 252
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	9f e3       	ldi	r25, 0x3F	; 63
    1082:	99 83       	std	Y+1, r25	; 0x01
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <vfprintf+0x124>
    1086:	83 36       	cpi	r24, 0x63	; 99
    1088:	31 f0       	breq	.+12     	; 0x1096 <vfprintf+0x11a>
    108a:	83 37       	cpi	r24, 0x73	; 115
    108c:	71 f0       	breq	.+28     	; 0x10aa <vfprintf+0x12e>
    108e:	83 35       	cpi	r24, 0x53	; 83
    1090:	09 f0       	breq	.+2      	; 0x1094 <vfprintf+0x118>
    1092:	59 c0       	rjmp	.+178    	; 0x1146 <vfprintf+0x1ca>
    1094:	21 c0       	rjmp	.+66     	; 0x10d8 <vfprintf+0x15c>
    1096:	f8 01       	movw	r30, r16
    1098:	80 81       	ld	r24, Z
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	0e 5f       	subi	r16, 0xFE	; 254
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	88 24       	eor	r8, r8
    10a2:	83 94       	inc	r8
    10a4:	91 2c       	mov	r9, r1
    10a6:	53 01       	movw	r10, r6
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <vfprintf+0x154>
    10aa:	28 01       	movw	r4, r16
    10ac:	f2 e0       	ldi	r31, 0x02	; 2
    10ae:	4f 0e       	add	r4, r31
    10b0:	51 1c       	adc	r5, r1
    10b2:	f8 01       	movw	r30, r16
    10b4:	a0 80       	ld	r10, Z
    10b6:	b1 80       	ldd	r11, Z+1	; 0x01
    10b8:	36 fe       	sbrs	r3, 6
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x146>
    10bc:	69 2d       	mov	r22, r9
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x14a>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	c5 01       	movw	r24, r10
    10c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <strnlen>
    10cc:	4c 01       	movw	r8, r24
    10ce:	82 01       	movw	r16, r4
    10d0:	f3 2d       	mov	r31, r3
    10d2:	ff 77       	andi	r31, 0x7F	; 127
    10d4:	3f 2e       	mov	r3, r31
    10d6:	16 c0       	rjmp	.+44     	; 0x1104 <vfprintf+0x188>
    10d8:	28 01       	movw	r4, r16
    10da:	22 e0       	ldi	r18, 0x02	; 2
    10dc:	42 0e       	add	r4, r18
    10de:	51 1c       	adc	r5, r1
    10e0:	f8 01       	movw	r30, r16
    10e2:	a0 80       	ld	r10, Z
    10e4:	b1 80       	ldd	r11, Z+1	; 0x01
    10e6:	36 fe       	sbrs	r3, 6
    10e8:	03 c0       	rjmp	.+6      	; 0x10f0 <vfprintf+0x174>
    10ea:	69 2d       	mov	r22, r9
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0x178>
    10f0:	6f ef       	ldi	r22, 0xFF	; 255
    10f2:	7f ef       	ldi	r23, 0xFF	; 255
    10f4:	c5 01       	movw	r24, r10
    10f6:	0e 94 9f 09 	call	0x133e	; 0x133e <strnlen_P>
    10fa:	4c 01       	movw	r8, r24
    10fc:	f3 2d       	mov	r31, r3
    10fe:	f0 68       	ori	r31, 0x80	; 128
    1100:	3f 2e       	mov	r3, r31
    1102:	82 01       	movw	r16, r4
    1104:	33 fc       	sbrc	r3, 3
    1106:	1b c0       	rjmp	.+54     	; 0x113e <vfprintf+0x1c2>
    1108:	82 2d       	mov	r24, r2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	88 16       	cp	r8, r24
    110e:	99 06       	cpc	r9, r25
    1110:	b0 f4       	brcc	.+44     	; 0x113e <vfprintf+0x1c2>
    1112:	b6 01       	movw	r22, r12
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    111c:	2a 94       	dec	r2
    111e:	f4 cf       	rjmp	.-24     	; 0x1108 <vfprintf+0x18c>
    1120:	f5 01       	movw	r30, r10
    1122:	37 fc       	sbrc	r3, 7
    1124:	85 91       	lpm	r24, Z+
    1126:	37 fe       	sbrs	r3, 7
    1128:	81 91       	ld	r24, Z+
    112a:	5f 01       	movw	r10, r30
    112c:	b6 01       	movw	r22, r12
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    1134:	21 10       	cpse	r2, r1
    1136:	2a 94       	dec	r2
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	82 1a       	sub	r8, r18
    113c:	91 08       	sbc	r9, r1
    113e:	81 14       	cp	r8, r1
    1140:	91 04       	cpc	r9, r1
    1142:	71 f7       	brne	.-36     	; 0x1120 <vfprintf+0x1a4>
    1144:	e8 c0       	rjmp	.+464    	; 0x1316 <vfprintf+0x39a>
    1146:	84 36       	cpi	r24, 0x64	; 100
    1148:	11 f0       	breq	.+4      	; 0x114e <vfprintf+0x1d2>
    114a:	89 36       	cpi	r24, 0x69	; 105
    114c:	41 f5       	brne	.+80     	; 0x119e <vfprintf+0x222>
    114e:	f8 01       	movw	r30, r16
    1150:	37 fe       	sbrs	r3, 7
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <vfprintf+0x1e6>
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	0c 5f       	subi	r16, 0xFC	; 252
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <vfprintf+0x1f6>
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	07 2e       	mov	r0, r23
    1168:	00 0c       	add	r0, r0
    116a:	88 0b       	sbc	r24, r24
    116c:	99 0b       	sbc	r25, r25
    116e:	0e 5f       	subi	r16, 0xFE	; 254
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	f3 2d       	mov	r31, r3
    1174:	ff 76       	andi	r31, 0x6F	; 111
    1176:	3f 2e       	mov	r3, r31
    1178:	97 ff       	sbrs	r25, 7
    117a:	09 c0       	rjmp	.+18     	; 0x118e <vfprintf+0x212>
    117c:	90 95       	com	r25
    117e:	80 95       	com	r24
    1180:	70 95       	com	r23
    1182:	61 95       	neg	r22
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	f0 68       	ori	r31, 0x80	; 128
    118c:	3f 2e       	mov	r3, r31
    118e:	2a e0       	ldi	r18, 0x0A	; 10
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a3 01       	movw	r20, r6
    1194:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ultoa_invert>
    1198:	88 2e       	mov	r8, r24
    119a:	86 18       	sub	r8, r6
    119c:	45 c0       	rjmp	.+138    	; 0x1228 <vfprintf+0x2ac>
    119e:	85 37       	cpi	r24, 0x75	; 117
    11a0:	31 f4       	brne	.+12     	; 0x11ae <vfprintf+0x232>
    11a2:	23 2d       	mov	r18, r3
    11a4:	2f 7e       	andi	r18, 0xEF	; 239
    11a6:	b2 2e       	mov	r11, r18
    11a8:	2a e0       	ldi	r18, 0x0A	; 10
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	25 c0       	rjmp	.+74     	; 0x11f8 <vfprintf+0x27c>
    11ae:	93 2d       	mov	r25, r3
    11b0:	99 7f       	andi	r25, 0xF9	; 249
    11b2:	b9 2e       	mov	r11, r25
    11b4:	8f 36       	cpi	r24, 0x6F	; 111
    11b6:	c1 f0       	breq	.+48     	; 0x11e8 <vfprintf+0x26c>
    11b8:	18 f4       	brcc	.+6      	; 0x11c0 <vfprintf+0x244>
    11ba:	88 35       	cpi	r24, 0x58	; 88
    11bc:	79 f0       	breq	.+30     	; 0x11dc <vfprintf+0x260>
    11be:	b5 c0       	rjmp	.+362    	; 0x132a <vfprintf+0x3ae>
    11c0:	80 37       	cpi	r24, 0x70	; 112
    11c2:	19 f0       	breq	.+6      	; 0x11ca <vfprintf+0x24e>
    11c4:	88 37       	cpi	r24, 0x78	; 120
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <vfprintf+0x254>
    11c8:	b0 c0       	rjmp	.+352    	; 0x132a <vfprintf+0x3ae>
    11ca:	e9 2f       	mov	r30, r25
    11cc:	e0 61       	ori	r30, 0x10	; 16
    11ce:	be 2e       	mov	r11, r30
    11d0:	b4 fe       	sbrs	r11, 4
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <vfprintf+0x272>
    11d4:	fb 2d       	mov	r31, r11
    11d6:	f4 60       	ori	r31, 0x04	; 4
    11d8:	bf 2e       	mov	r11, r31
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <vfprintf+0x272>
    11dc:	34 fe       	sbrs	r3, 4
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <vfprintf+0x278>
    11e0:	29 2f       	mov	r18, r25
    11e2:	26 60       	ori	r18, 0x06	; 6
    11e4:	b2 2e       	mov	r11, r18
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <vfprintf+0x278>
    11e8:	28 e0       	ldi	r18, 0x08	; 8
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <vfprintf+0x27c>
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x27c>
    11f4:	20 e1       	ldi	r18, 0x10	; 16
    11f6:	32 e0       	ldi	r19, 0x02	; 2
    11f8:	f8 01       	movw	r30, r16
    11fa:	b7 fe       	sbrs	r11, 7
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <vfprintf+0x290>
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	0c 5f       	subi	r16, 0xFC	; 252
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x29c>
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 5f       	subi	r16, 0xFE	; 254
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	a3 01       	movw	r20, r6
    121a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ultoa_invert>
    121e:	88 2e       	mov	r8, r24
    1220:	86 18       	sub	r8, r6
    1222:	fb 2d       	mov	r31, r11
    1224:	ff 77       	andi	r31, 0x7F	; 127
    1226:	3f 2e       	mov	r3, r31
    1228:	36 fe       	sbrs	r3, 6
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <vfprintf+0x2ca>
    122c:	23 2d       	mov	r18, r3
    122e:	2e 7f       	andi	r18, 0xFE	; 254
    1230:	a2 2e       	mov	r10, r18
    1232:	89 14       	cp	r8, r9
    1234:	58 f4       	brcc	.+22     	; 0x124c <vfprintf+0x2d0>
    1236:	34 fe       	sbrs	r3, 4
    1238:	0b c0       	rjmp	.+22     	; 0x1250 <vfprintf+0x2d4>
    123a:	32 fc       	sbrc	r3, 2
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <vfprintf+0x2d4>
    123e:	83 2d       	mov	r24, r3
    1240:	8e 7e       	andi	r24, 0xEE	; 238
    1242:	a8 2e       	mov	r10, r24
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <vfprintf+0x2d4>
    1246:	b8 2c       	mov	r11, r8
    1248:	a3 2c       	mov	r10, r3
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <vfprintf+0x2d6>
    124c:	b8 2c       	mov	r11, r8
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <vfprintf+0x2d6>
    1250:	b9 2c       	mov	r11, r9
    1252:	a4 fe       	sbrs	r10, 4
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <vfprintf+0x2f8>
    1256:	fe 01       	movw	r30, r28
    1258:	e8 0d       	add	r30, r8
    125a:	f1 1d       	adc	r31, r1
    125c:	80 81       	ld	r24, Z
    125e:	80 33       	cpi	r24, 0x30	; 48
    1260:	21 f4       	brne	.+8      	; 0x126a <vfprintf+0x2ee>
    1262:	9a 2d       	mov	r25, r10
    1264:	99 7e       	andi	r25, 0xE9	; 233
    1266:	a9 2e       	mov	r10, r25
    1268:	09 c0       	rjmp	.+18     	; 0x127c <vfprintf+0x300>
    126a:	a2 fe       	sbrs	r10, 2
    126c:	06 c0       	rjmp	.+12     	; 0x127a <vfprintf+0x2fe>
    126e:	b3 94       	inc	r11
    1270:	b3 94       	inc	r11
    1272:	04 c0       	rjmp	.+8      	; 0x127c <vfprintf+0x300>
    1274:	8a 2d       	mov	r24, r10
    1276:	86 78       	andi	r24, 0x86	; 134
    1278:	09 f0       	breq	.+2      	; 0x127c <vfprintf+0x300>
    127a:	b3 94       	inc	r11
    127c:	a3 fc       	sbrc	r10, 3
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <vfprintf+0x326>
    1280:	a0 fe       	sbrs	r10, 0
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <vfprintf+0x314>
    1284:	b2 14       	cp	r11, r2
    1286:	88 f4       	brcc	.+34     	; 0x12aa <vfprintf+0x32e>
    1288:	28 0c       	add	r2, r8
    128a:	92 2c       	mov	r9, r2
    128c:	9b 18       	sub	r9, r11
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <vfprintf+0x330>
    1290:	b2 14       	cp	r11, r2
    1292:	60 f4       	brcc	.+24     	; 0x12ac <vfprintf+0x330>
    1294:	b6 01       	movw	r22, r12
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    129e:	b3 94       	inc	r11
    12a0:	f7 cf       	rjmp	.-18     	; 0x1290 <vfprintf+0x314>
    12a2:	b2 14       	cp	r11, r2
    12a4:	18 f4       	brcc	.+6      	; 0x12ac <vfprintf+0x330>
    12a6:	2b 18       	sub	r2, r11
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x332>
    12aa:	98 2c       	mov	r9, r8
    12ac:	21 2c       	mov	r2, r1
    12ae:	a4 fe       	sbrs	r10, 4
    12b0:	10 c0       	rjmp	.+32     	; 0x12d2 <vfprintf+0x356>
    12b2:	b6 01       	movw	r22, r12
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    12bc:	a2 fe       	sbrs	r10, 2
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <vfprintf+0x372>
    12c0:	a1 fc       	sbrc	r10, 1
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <vfprintf+0x34e>
    12c4:	88 e7       	ldi	r24, 0x78	; 120
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <vfprintf+0x352>
    12ca:	88 e5       	ldi	r24, 0x58	; 88
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	b6 01       	movw	r22, r12
    12d0:	0c c0       	rjmp	.+24     	; 0x12ea <vfprintf+0x36e>
    12d2:	8a 2d       	mov	r24, r10
    12d4:	86 78       	andi	r24, 0x86	; 134
    12d6:	59 f0       	breq	.+22     	; 0x12ee <vfprintf+0x372>
    12d8:	a1 fe       	sbrs	r10, 1
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <vfprintf+0x364>
    12dc:	8b e2       	ldi	r24, 0x2B	; 43
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <vfprintf+0x366>
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	a7 fc       	sbrc	r10, 7
    12e4:	8d e2       	ldi	r24, 0x2D	; 45
    12e6:	b6 01       	movw	r22, r12
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    12ee:	89 14       	cp	r8, r9
    12f0:	38 f4       	brcc	.+14     	; 0x1300 <vfprintf+0x384>
    12f2:	b6 01       	movw	r22, r12
    12f4:	80 e3       	ldi	r24, 0x30	; 48
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    12fc:	9a 94       	dec	r9
    12fe:	f7 cf       	rjmp	.-18     	; 0x12ee <vfprintf+0x372>
    1300:	8a 94       	dec	r8
    1302:	f3 01       	movw	r30, r6
    1304:	e8 0d       	add	r30, r8
    1306:	f1 1d       	adc	r31, r1
    1308:	80 81       	ld	r24, Z
    130a:	b6 01       	movw	r22, r12
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    1312:	81 10       	cpse	r8, r1
    1314:	f5 cf       	rjmp	.-22     	; 0x1300 <vfprintf+0x384>
    1316:	22 20       	and	r2, r2
    1318:	09 f4       	brne	.+2      	; 0x131c <vfprintf+0x3a0>
    131a:	42 ce       	rjmp	.-892    	; 0xfa0 <vfprintf+0x24>
    131c:	b6 01       	movw	r22, r12
    131e:	80 e2       	ldi	r24, 0x20	; 32
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 b5 09 	call	0x136a	; 0x136a <fputc>
    1326:	2a 94       	dec	r2
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <vfprintf+0x39a>
    132a:	f6 01       	movw	r30, r12
    132c:	86 81       	ldd	r24, Z+6	; 0x06
    132e:	97 81       	ldd	r25, Z+7	; 0x07
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x3ba>
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    1336:	2b 96       	adiw	r28, 0x0b	; 11
    1338:	e2 e1       	ldi	r30, 0x12	; 18
    133a:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__epilogue_restores__>

0000133e <strnlen_P>:
    133e:	fc 01       	movw	r30, r24
    1340:	05 90       	lpm	r0, Z+
    1342:	61 50       	subi	r22, 0x01	; 1
    1344:	70 40       	sbci	r23, 0x00	; 0
    1346:	01 10       	cpse	r0, r1
    1348:	d8 f7       	brcc	.-10     	; 0x1340 <strnlen_P+0x2>
    134a:	80 95       	com	r24
    134c:	90 95       	com	r25
    134e:	8e 0f       	add	r24, r30
    1350:	9f 1f       	adc	r25, r31
    1352:	08 95       	ret

00001354 <strnlen>:
    1354:	fc 01       	movw	r30, r24
    1356:	61 50       	subi	r22, 0x01	; 1
    1358:	70 40       	sbci	r23, 0x00	; 0
    135a:	01 90       	ld	r0, Z+
    135c:	01 10       	cpse	r0, r1
    135e:	d8 f7       	brcc	.-10     	; 0x1356 <strnlen+0x2>
    1360:	80 95       	com	r24
    1362:	90 95       	com	r25
    1364:	8e 0f       	add	r24, r30
    1366:	9f 1f       	adc	r25, r31
    1368:	08 95       	ret

0000136a <fputc>:
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	fb 01       	movw	r30, r22
    1374:	23 81       	ldd	r18, Z+3	; 0x03
    1376:	21 fd       	sbrc	r18, 1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <fputc+0x16>
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9f ef       	ldi	r25, 0xFF	; 255
    137e:	2c c0       	rjmp	.+88     	; 0x13d8 <fputc+0x6e>
    1380:	22 ff       	sbrs	r18, 2
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <fputc+0x46>
    1384:	46 81       	ldd	r20, Z+6	; 0x06
    1386:	57 81       	ldd	r21, Z+7	; 0x07
    1388:	24 81       	ldd	r18, Z+4	; 0x04
    138a:	35 81       	ldd	r19, Z+5	; 0x05
    138c:	42 17       	cp	r20, r18
    138e:	53 07       	cpc	r21, r19
    1390:	44 f4       	brge	.+16     	; 0x13a2 <fputc+0x38>
    1392:	a0 81       	ld	r26, Z
    1394:	b1 81       	ldd	r27, Z+1	; 0x01
    1396:	9d 01       	movw	r18, r26
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	31 83       	std	Z+1, r19	; 0x01
    139e:	20 83       	st	Z, r18
    13a0:	8c 93       	st	X, r24
    13a2:	26 81       	ldd	r18, Z+6	; 0x06
    13a4:	37 81       	ldd	r19, Z+7	; 0x07
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	37 83       	std	Z+7, r19	; 0x07
    13ac:	26 83       	std	Z+6, r18	; 0x06
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <fputc+0x6e>
    13b0:	8b 01       	movw	r16, r22
    13b2:	ec 01       	movw	r28, r24
    13b4:	fb 01       	movw	r30, r22
    13b6:	00 84       	ldd	r0, Z+8	; 0x08
    13b8:	f1 85       	ldd	r31, Z+9	; 0x09
    13ba:	e0 2d       	mov	r30, r0
    13bc:	09 95       	icall
    13be:	89 2b       	or	r24, r25
    13c0:	e1 f6       	brne	.-72     	; 0x137a <fputc+0x10>
    13c2:	d8 01       	movw	r26, r16
    13c4:	16 96       	adiw	r26, 0x06	; 6
    13c6:	8d 91       	ld	r24, X+
    13c8:	9c 91       	ld	r25, X
    13ca:	17 97       	sbiw	r26, 0x07	; 7
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	17 96       	adiw	r26, 0x07	; 7
    13d0:	9c 93       	st	X, r25
    13d2:	8e 93       	st	-X, r24
    13d4:	16 97       	sbiw	r26, 0x06	; 6
    13d6:	ce 01       	movw	r24, r28
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <__ultoa_invert>:
    13e2:	fa 01       	movw	r30, r20
    13e4:	aa 27       	eor	r26, r26
    13e6:	28 30       	cpi	r18, 0x08	; 8
    13e8:	51 f1       	breq	.+84     	; 0x143e <__ultoa_invert+0x5c>
    13ea:	20 31       	cpi	r18, 0x10	; 16
    13ec:	81 f1       	breq	.+96     	; 0x144e <__ultoa_invert+0x6c>
    13ee:	e8 94       	clt
    13f0:	6f 93       	push	r22
    13f2:	6e 7f       	andi	r22, 0xFE	; 254
    13f4:	6e 5f       	subi	r22, 0xFE	; 254
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	af 4f       	sbci	r26, 0xFF	; 255
    13fe:	b1 e0       	ldi	r27, 0x01	; 1
    1400:	3e d0       	rcall	.+124    	; 0x147e <__ultoa_invert+0x9c>
    1402:	b4 e0       	ldi	r27, 0x04	; 4
    1404:	3c d0       	rcall	.+120    	; 0x147e <__ultoa_invert+0x9c>
    1406:	67 0f       	add	r22, r23
    1408:	78 1f       	adc	r23, r24
    140a:	89 1f       	adc	r24, r25
    140c:	9a 1f       	adc	r25, r26
    140e:	a1 1d       	adc	r26, r1
    1410:	68 0f       	add	r22, r24
    1412:	79 1f       	adc	r23, r25
    1414:	8a 1f       	adc	r24, r26
    1416:	91 1d       	adc	r25, r1
    1418:	a1 1d       	adc	r26, r1
    141a:	6a 0f       	add	r22, r26
    141c:	71 1d       	adc	r23, r1
    141e:	81 1d       	adc	r24, r1
    1420:	91 1d       	adc	r25, r1
    1422:	a1 1d       	adc	r26, r1
    1424:	20 d0       	rcall	.+64     	; 0x1466 <__ultoa_invert+0x84>
    1426:	09 f4       	brne	.+2      	; 0x142a <__ultoa_invert+0x48>
    1428:	68 94       	set
    142a:	3f 91       	pop	r19
    142c:	2a e0       	ldi	r18, 0x0A	; 10
    142e:	26 9f       	mul	r18, r22
    1430:	11 24       	eor	r1, r1
    1432:	30 19       	sub	r19, r0
    1434:	30 5d       	subi	r19, 0xD0	; 208
    1436:	31 93       	st	Z+, r19
    1438:	de f6       	brtc	.-74     	; 0x13f0 <__ultoa_invert+0xe>
    143a:	cf 01       	movw	r24, r30
    143c:	08 95       	ret
    143e:	46 2f       	mov	r20, r22
    1440:	47 70       	andi	r20, 0x07	; 7
    1442:	40 5d       	subi	r20, 0xD0	; 208
    1444:	41 93       	st	Z+, r20
    1446:	b3 e0       	ldi	r27, 0x03	; 3
    1448:	0f d0       	rcall	.+30     	; 0x1468 <__ultoa_invert+0x86>
    144a:	c9 f7       	brne	.-14     	; 0x143e <__ultoa_invert+0x5c>
    144c:	f6 cf       	rjmp	.-20     	; 0x143a <__ultoa_invert+0x58>
    144e:	46 2f       	mov	r20, r22
    1450:	4f 70       	andi	r20, 0x0F	; 15
    1452:	40 5d       	subi	r20, 0xD0	; 208
    1454:	4a 33       	cpi	r20, 0x3A	; 58
    1456:	18 f0       	brcs	.+6      	; 0x145e <__ultoa_invert+0x7c>
    1458:	49 5d       	subi	r20, 0xD9	; 217
    145a:	31 fd       	sbrc	r19, 1
    145c:	40 52       	subi	r20, 0x20	; 32
    145e:	41 93       	st	Z+, r20
    1460:	02 d0       	rcall	.+4      	; 0x1466 <__ultoa_invert+0x84>
    1462:	a9 f7       	brne	.-22     	; 0x144e <__ultoa_invert+0x6c>
    1464:	ea cf       	rjmp	.-44     	; 0x143a <__ultoa_invert+0x58>
    1466:	b4 e0       	ldi	r27, 0x04	; 4
    1468:	a6 95       	lsr	r26
    146a:	97 95       	ror	r25
    146c:	87 95       	ror	r24
    146e:	77 95       	ror	r23
    1470:	67 95       	ror	r22
    1472:	ba 95       	dec	r27
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__ultoa_invert+0x86>
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	61 05       	cpc	r22, r1
    147a:	71 05       	cpc	r23, r1
    147c:	08 95       	ret
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
    1482:	0a 2e       	mov	r0, r26
    1484:	06 94       	lsr	r0
    1486:	57 95       	ror	r21
    1488:	47 95       	ror	r20
    148a:	37 95       	ror	r19
    148c:	27 95       	ror	r18
    148e:	ba 95       	dec	r27
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__ultoa_invert+0xa2>
    1492:	62 0f       	add	r22, r18
    1494:	73 1f       	adc	r23, r19
    1496:	84 1f       	adc	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	a0 1d       	adc	r26, r0
    149c:	08 95       	ret

0000149e <__prologue_saves__>:
    149e:	2f 92       	push	r2
    14a0:	3f 92       	push	r3
    14a2:	4f 92       	push	r4
    14a4:	5f 92       	push	r5
    14a6:	6f 92       	push	r6
    14a8:	7f 92       	push	r7
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	ca 1b       	sub	r28, r26
    14c8:	db 0b       	sbc	r29, r27
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	09 94       	ijmp

000014d6 <__epilogue_restores__>:
    14d6:	2a 88       	ldd	r2, Y+18	; 0x12
    14d8:	39 88       	ldd	r3, Y+17	; 0x11
    14da:	48 88       	ldd	r4, Y+16	; 0x10
    14dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14de:	6e 84       	ldd	r6, Y+14	; 0x0e
    14e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14e8:	b9 84       	ldd	r11, Y+9	; 0x09
    14ea:	c8 84       	ldd	r12, Y+8	; 0x08
    14ec:	df 80       	ldd	r13, Y+7	; 0x07
    14ee:	ee 80       	ldd	r14, Y+6	; 0x06
    14f0:	fd 80       	ldd	r15, Y+5	; 0x05
    14f2:	0c 81       	ldd	r16, Y+4	; 0x04
    14f4:	1b 81       	ldd	r17, Y+3	; 0x03
    14f6:	aa 81       	ldd	r26, Y+2	; 0x02
    14f8:	b9 81       	ldd	r27, Y+1	; 0x01
    14fa:	ce 0f       	add	r28, r30
    14fc:	d1 1d       	adc	r29, r1
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	ed 01       	movw	r28, r26
    150a:	08 95       	ret

0000150c <_exit>:
    150c:	f8 94       	cli

0000150e <__stop_program>:
    150e:	ff cf       	rjmp	.-2      	; 0x150e <__stop_program>
