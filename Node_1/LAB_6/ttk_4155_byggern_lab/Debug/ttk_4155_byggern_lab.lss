
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  00001040  000010d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080026e  0080026e  00001242  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000345d  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168b  00000000  00000000  00004a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b5  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  00007a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001294  00000000  00000000  00008bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00009e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_1>
       8:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_2>
       c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e4       	ldi	r30, 0x40	; 64
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 36       	cpi	r26, 0x6E	; 110
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ae e6       	ldi	r26, 0x6E	; 110
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 37       	cpi	r26, 0x7C	; 124
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 a4 02 	call	0x548	; 0x548 <main>
      a6:	0c 94 1e 08 	jmp	0x103c	; 0x103c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_drv_init>:
void adc_drv_init()
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
      ae:	81 b3       	in	r24, 0x11	; 17
      b0:	80 62       	ori	r24, 0x20	; 32
      b2:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
      b4:	8e b5       	in	r24, 0x2e	; 46
      b6:	80 61       	ori	r24, 0x10	; 16
      b8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
      ba:	8e b5       	in	r24, 0x2e	; 46
      bc:	88 60       	ori	r24, 0x08	; 8
      be:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
      c0:	8f b5       	in	r24, 0x2f	; 47
      c2:	82 60       	ori	r24, 0x02	; 2
      c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
      c6:	8f b5       	in	r24, 0x2f	; 47
      c8:	81 60       	ori	r24, 0x01	; 1
      ca:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
      cc:	8f b5       	in	r24, 0x2f	; 47
      ce:	8f 77       	andi	r24, 0x7F	; 127
      d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
      d2:	8f b5       	in	r24, 0x2f	; 47
      d4:	80 64       	ori	r24, 0x40	; 64
      d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
      d8:	8f b5       	in	r24, 0x2f	; 47
      da:	8f 7d       	andi	r24, 0xDF	; 223
      dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
      de:	8f b5       	in	r24, 0x2f	; 47
      e0:	8f 7e       	andi	r24, 0xEF	; 239
      e2:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
      e4:	8e b5       	in	r24, 0x2e	; 46
      e6:	8b 7f       	andi	r24, 0xFB	; 251
      e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
      ea:	8e b5       	in	r24, 0x2e	; 46
      ec:	8d 7f       	andi	r24, 0xFD	; 253
      ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
      f0:	8e b5       	in	r24, 0x2e	; 46
      f2:	81 60       	ori	r24, 0x01	; 1
      f4:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
      f6:	8f b5       	in	r24, 0x2f	; 47
      f8:	87 7f       	andi	r24, 0xF7	; 247
      fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
      fc:	8f b5       	in	r24, 0x2f	; 47
      fe:	8b 7f       	andi	r24, 0xFB	; 251
     100:	8f bd       	out	0x2f, r24	; 47
     102:	08 95       	ret

00000104 <adc_drv_fun_stick_get>:
		
}

fun_stick_t adc_drv_fun_stick_get()
{
	return last_fun_stick;
     104:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <last_fun_stick>
     108:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <last_fun_stick+0x1>
     10c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <last_fun_stick+0x2>
}
     110:	08 95       	ret

00000112 <adc_read>:
	 }
	 else return false;
}

uint8_t adc_read(uint8_t channel)
{
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <adc_read+0x6>
     118:	00 d0       	rcall	.+0      	; 0x11a <adc_read+0x8>
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
     11e:	19 82       	std	Y+1, r1	; 0x01
     120:	1a 82       	std	Y+2, r1	; 0x02
     122:	1b 82       	std	Y+3, r1	; 0x03
     124:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
     126:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x1184>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	91 e3       	ldi	r25, 0x31	; 49
     12c:	9a 95       	dec	r25
     12e:	f1 f7       	brne	.-4      	; 0x12c <adc_read+0x1a>
     130:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	0c c0       	rjmp	.+24     	; 0x150 <adc_read+0x3e>
		adc_value[i] = adc[i];
     138:	f9 01       	movw	r30, r18
     13a:	fc 5e       	subi	r31, 0xEC	; 236
     13c:	90 81       	ld	r25, Z
     13e:	e1 e0       	ldi	r30, 0x01	; 1
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	ec 0f       	add	r30, r28
     144:	fd 1f       	adc	r31, r29
     146:	e2 0f       	add	r30, r18
     148:	f3 1f       	adc	r31, r19
     14a:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     14c:	2f 5f       	subi	r18, 0xFF	; 255
     14e:	3f 4f       	sbci	r19, 0xFF	; 255
     150:	24 30       	cpi	r18, 0x04	; 4
     152:	31 05       	cpc	r19, r1
     154:	88 f3       	brcs	.-30     	; 0x138 <adc_read+0x26>
		adc_value[i] = adc[i];
	}

	return adc_value[channel];
     156:	e1 e0       	ldi	r30, 0x01	; 1
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ec 0f       	add	r30, r28
     15c:	fd 1f       	adc	r31, r29
     15e:	e8 0f       	add	r30, r24
     160:	f1 1d       	adc	r31, r1
     162:	80 81       	ld	r24, Z
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	0e 94 89 00 	call	0x112	; 0x112 <adc_read>
     178:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	0e 94 89 00 	call	0x112	; 0x112 <adc_read>
     182:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
     186:	08 95       	ret

00000188 <adc_conv_js_val>:
}

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
     188:	86 17       	cp	r24, r22
     18a:	a0 f0       	brcs	.+40     	; 0x1b4 <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
     18c:	46 2f       	mov	r20, r22
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	28 2f       	mov	r18, r24
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	24 1b       	sub	r18, r20
     196:	35 0b       	sbc	r19, r21
     198:	64 e6       	ldi	r22, 0x64	; 100
     19a:	62 9f       	mul	r22, r18
     19c:	c0 01       	movw	r24, r0
     19e:	63 9f       	mul	r22, r19
     1a0:	90 0d       	add	r25, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	6f ef       	ldi	r22, 0xFF	; 255
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	64 1b       	sub	r22, r20
     1aa:	75 0b       	sbc	r23, r21
     1ac:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodhi4>
     1b0:	86 2f       	mov	r24, r22
     1b2:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	26 1b       	sub	r18, r22
     1bc:	37 0b       	sbc	r19, r23
     1be:	44 e6       	ldi	r20, 0x64	; 100
     1c0:	42 9f       	mul	r20, r18
     1c2:	c0 01       	movw	r24, r0
     1c4:	43 9f       	mul	r20, r19
     1c6:	90 0d       	add	r25, r0
     1c8:	11 24       	eor	r1, r1
     1ca:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodhi4>
     1ce:	86 2f       	mov	r24, r22
}
     1d0:	08 95       	ret

000001d2 <pos_read>:

pos_t pos_read()
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
     1d6:	c0 91 6f 02 	lds	r28, 0x026F	; 0x80026f <offset_x>
     1da:	83 e0       	ldi	r24, 0x03	; 3
     1dc:	0e 94 89 00 	call	0x112	; 0x112 <adc_read>
     1e0:	6c 2f       	mov	r22, r28
     1e2:	0e 94 c4 00 	call	0x188	; 0x188 <adc_conv_js_val>
     1e6:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
     1e8:	d0 91 6e 02 	lds	r29, 0x026E	; 0x80026e <__data_end>
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 89 00 	call	0x112	; 0x112 <adc_read>
     1f2:	6d 2f       	mov	r22, r29
     1f4:	0e 94 c4 00 	call	0x188	; 0x188 <adc_conv_js_val>
     1f8:	98 2f       	mov	r25, r24
	
	return positions;
}
     1fa:	8c 2f       	mov	r24, r28
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
     202:	28 2f       	mov	r18, r24
     204:	8a 5b       	subi	r24, 0xBA	; 186
     206:	8d 38       	cpi	r24, 0x8D	; 141
     208:	48 f4       	brcc	.+18     	; 0x21c <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     20a:	89 2f       	mov	r24, r25
     20c:	9a 5b       	subi	r25, 0xBA	; 186
     20e:	9d 38       	cpi	r25, 0x8D	; 141
     210:	d8 f0       	brcs	.+54     	; 0x248 <dir_read+0x46>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     212:	87 34       	cpi	r24, 0x47	; 71
     214:	dc f4       	brge	.+54     	; 0x24c <dir_read+0x4a>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     216:	86 34       	cpi	r24, 0x46	; 70
     218:	dc f0       	brlt	.+54     	; 0x250 <dir_read+0x4e>
     21a:	15 c0       	rjmp	.+42     	; 0x246 <dir_read+0x44>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
     21c:	27 34       	cpi	r18, 0x47	; 71
     21e:	4c f0       	brlt	.+18     	; 0x232 <dir_read+0x30>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     220:	89 2f       	mov	r24, r25
     222:	9a 5b       	subi	r25, 0xBA	; 186
     224:	9d 38       	cpi	r25, 0x8D	; 141
     226:	b0 f0       	brcs	.+44     	; 0x254 <dir_read+0x52>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     228:	87 34       	cpi	r24, 0x47	; 71
     22a:	b4 f4       	brge	.+44     	; 0x258 <dir_read+0x56>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     22c:	86 34       	cpi	r24, 0x46	; 70
     22e:	b4 f0       	brlt	.+44     	; 0x25c <dir_read+0x5a>
     230:	0a c0       	rjmp	.+20     	; 0x246 <dir_read+0x44>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
     232:	26 34       	cpi	r18, 0x46	; 70
     234:	44 f4       	brge	.+16     	; 0x246 <dir_read+0x44>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
     236:	89 2f       	mov	r24, r25
     238:	9a 5b       	subi	r25, 0xBA	; 186
     23a:	9d 38       	cpi	r25, 0x8D	; 141
     23c:	88 f0       	brcs	.+34     	; 0x260 <dir_read+0x5e>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
     23e:	87 34       	cpi	r24, 0x47	; 71
     240:	8c f4       	brge	.+34     	; 0x264 <dir_read+0x62>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
     242:	86 34       	cpi	r24, 0x46	; 70
     244:	8c f0       	brlt	.+34     	; 0x268 <dir_read+0x66>
			return DOWN_LEFT;
		}
	}
}
     246:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
     258:	85 e0       	ldi	r24, 0x05	; 5
     25a:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
     268:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
     26a:	08 95       	ret

0000026c <adc_drv_joystick_update>:
{
	return last_fun_stick;
}

bool adc_drv_joystick_update()
{
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
     274:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pos_read>
     278:	d8 2f       	mov	r29, r24
     27a:	c9 2f       	mov	r28, r25
	current_fun_stick.direction = dir_read(current_fun_stick.position);
     27c:	0e 94 01 01 	call	0x202	; 0x202 <dir_read>
	
	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     280:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <last_fun_stick+0x2>
     284:	89 13       	cpse	r24, r25
     286:	08 c0       	rjmp	.+16     	; 0x298 <adc_drv_joystick_update+0x2c>
	 (current_fun_stick.position.X != last_fun_stick.position.X) ||
     288:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <last_fun_stick>
{
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);
	
	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     28c:	d9 13       	cpse	r29, r25
     28e:	04 c0       	rjmp	.+8      	; 0x298 <adc_drv_joystick_update+0x2c>
	 (current_fun_stick.position.X != last_fun_stick.position.X) ||
	 (current_fun_stick.position.Y != last_fun_stick.position.Y)) {
     290:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <last_fun_stick+0x1>
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);
	
	if ((current_fun_stick.direction != last_fun_stick.direction) ||
	 (current_fun_stick.position.X != last_fun_stick.position.X) ||
     294:	c9 17       	cp	r28, r25
     296:	41 f0       	breq	.+16     	; 0x2a8 <adc_drv_joystick_update+0x3c>
	 (current_fun_stick.position.Y != last_fun_stick.position.Y)) {
		 last_fun_stick = current_fun_stick;
     298:	d0 93 73 02 	sts	0x0273, r29	; 0x800273 <last_fun_stick>
     29c:	c0 93 74 02 	sts	0x0274, r28	; 0x800274 <last_fun_stick+0x1>
     2a0:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <last_fun_stick+0x2>
		 return true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <adc_drv_joystick_update+0x3e>
	 }
	 else return false;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <CAN_init>:
{
	CAN_interpret_status(MCP2515_read_status());
}

int8_t CAN_init()
{
     2b4:	cf 93       	push	r28
	// configure PD2 as input
	clear_bit(DDRD, CAN_INTERRUPT_PIN);
     2b6:	81 b3       	in	r24, 0x11	; 17
     2b8:	8b 7f       	andi	r24, 0xFB	; 251
     2ba:	81 bb       	out	0x11, r24	; 17
	// Disable global interrupts
	cli();
     2bc:	f8 94       	cli
	// Enable interrupt INT0
	set_bit(GICR, CAN_INTERRUPT_ISR_REGISTER);
     2be:	8b b7       	in	r24, 0x3b	; 59
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	8b bf       	out	0x3b, r24	; 59
	// Configure interrupt falling edge
	set_bit(MCUCR, ISC01);
     2c4:	85 b7       	in	r24, 0x35	; 53
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     2ca:	85 b7       	in	r24, 0x35	; 53
     2cc:	8e 7f       	andi	r24, 0xFE	; 254
     2ce:	85 bf       	out	0x35, r24	; 53
	// Enable global interrupts
	sei();
     2d0:	78 94       	sei
	
	int8_t err = MCP2515_init();
     2d2:	0e 94 33 03 	call	0x666	; 0x666 <MCP2515_init>
     2d6:	c8 2f       	mov	r28, r24
	if (err < 0) {
     2d8:	88 23       	and	r24, r24
     2da:	34 f4       	brge	.+12     	; 0x2e8 <CAN_init+0x34>
		print_uart("error");
     2dc:	8e e0       	ldi	r24, 0x0E	; 14
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		return err;
     2e4:	8c 2f       	mov	r24, r28
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <CAN_init+0x36>
	}
	return 0;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
}
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <CAN_send>:

int8_t CAN_send(CAN_msg msg)
{
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2b 97       	sbiw	r28, 0x0b	; 11
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	e9 82       	std	Y+1, r14	; 0x01
     30c:	fa 82       	std	Y+2, r15	; 0x02
     30e:	0b 83       	std	Y+3, r16	; 0x03
     310:	1c 83       	std	Y+4, r17	; 0x04
     312:	2d 83       	std	Y+5, r18	; 0x05
     314:	3e 83       	std	Y+6, r19	; 0x06
     316:	4f 83       	std	Y+7, r20	; 0x07
     318:	58 87       	std	Y+8, r21	; 0x08
     31a:	69 87       	std	Y+9, r22	; 0x09
     31c:	7a 87       	std	Y+10, r23	; 0x0a
     31e:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t ID_MSB = (0x7F8 & msg.ID) >> 3;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	bc 01       	movw	r22, r24
     326:	68 7f       	andi	r22, 0xF8	; 248
     328:	77 70       	andi	r23, 0x07	; 7
     32a:	76 95       	lsr	r23
     32c:	67 95       	ror	r22
     32e:	76 95       	lsr	r23
     330:	67 95       	ror	r22
     332:	76 95       	lsr	r23
     334:	67 95       	ror	r22
	uint8_t ID_LSB = (0x7 & msg.ID) << 5;
     336:	18 2f       	mov	r17, r24
     338:	12 95       	swap	r17
     33a:	11 0f       	add	r17, r17
     33c:	10 7e       	andi	r17, 0xE0	; 224
	
	MCP2515_write(MCP_TXB0SIDH, ID_MSB);
     33e:	81 e3       	ldi	r24, 0x31	; 49
     340:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, ID_LSB);
     344:	61 2f       	mov	r22, r17
     346:	82 e3       	ldi	r24, 0x32	; 50
     348:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	MCP2515_write(TXB0DLC, msg.length);
     34c:	1b 81       	ldd	r17, Y+3	; 0x03
     34e:	61 2f       	mov	r22, r17
     350:	85 e3       	ldi	r24, 0x35	; 53
     352:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
     356:	80 e3       	ldi	r24, 0x30	; 48
     358:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	if((buff0_status & 0x8) != 0x8) {
     35c:	83 fd       	sbrc	r24, 3
     35e:	1a c0       	rjmp	.+52     	; 0x394 <CAN_send+0xa6>
		if (msg.length > 8) {
     360:	19 30       	cpi	r17, 0x09	; 9
     362:	10 f0       	brcs	.+4      	; 0x368 <CAN_send+0x7a>
			msg.length = 8;
     364:	88 e0       	ldi	r24, 0x08	; 8
     366:	8b 83       	std	Y+3, r24	; 0x03
	}
	return 0;
}

int8_t CAN_send(CAN_msg msg)
{
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	0c c0       	rjmp	.+24     	; 0x384 <CAN_send+0x96>
		if (msg.length > 8) {
			msg.length = 8;
		}
		for(uint8_t i = 0; i < msg.length; i++)
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
     36c:	e4 e0       	ldi	r30, 0x04	; 4
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ec 0f       	add	r30, r28
     372:	fd 1f       	adc	r31, r29
     374:	e1 0f       	add	r30, r17
     376:	f1 1d       	adc	r31, r1
     378:	60 81       	ld	r22, Z
     37a:	86 e3       	ldi	r24, 0x36	; 54
     37c:	81 0f       	add	r24, r17
     37e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
	if((buff0_status & 0x8) != 0x8) {
		if (msg.length > 8) {
			msg.length = 8;
		}
		for(uint8_t i = 0; i < msg.length; i++)
     382:	1f 5f       	subi	r17, 0xFF	; 255
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	18 17       	cp	r17, r24
     388:	88 f3       	brcs	.-30     	; 0x36c <CAN_send+0x7e>
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
		}
		MCP2515_request_to_send(MCP_RTS_TX0);
     38a:	81 e8       	ldi	r24, 0x81	; 129
     38c:	0e 94 04 03 	call	0x608	; 0x608 <MCP2515_request_to_send>
		return 0;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	05 c0       	rjmp	.+10     	; 0x39e <CAN_send+0xb0>
	} else {
		print_uart("Buffer0 not available\r\n");
     394:	84 e1       	ldi	r24, 0x14	; 20
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		return -1;
     39c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
}
     39e:	2b 96       	adiw	r28, 0x0b	; 11
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	08 95       	ret

000003b8 <CAN_receive>:

CAN_msg CAN_receive(uint8_t buffer)
{
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <CAN_receive+0x10>
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	6c 01       	movw	r12, r24
	CAN_msg rx_msg;
	uint8_t ID_MSB;
	uint8_t ID_LSB;
	uint8_t length;
	
	if (buffer == 0) {
     3ce:	61 11       	cpse	r22, r1
     3d0:	3d c0       	rjmp	.+122    	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
		ID_MSB = MCP2515_read(MCP_RXB0SIDH);
     3d2:	81 e6       	ldi	r24, 0x61	; 97
     3d4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     3d8:	18 2f       	mov	r17, r24
		ID_LSB = MCP2515_read(MCP_RXB0SIDL);
     3da:	82 e6       	ldi	r24, 0x62	; 98
     3dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
		
		ID_LSB = (ID_LSB & 0xE0) >> 5;
     3e0:	28 2f       	mov	r18, r24
     3e2:	22 95       	swap	r18
     3e4:	26 95       	lsr	r18
     3e6:	27 70       	andi	r18, 0x07	; 7
		rx_msg.ID = ID_MSB << 3;
     3e8:	81 2f       	mov	r24, r17
     3ea:	90 e0       	ldi	r25, 0x00	; 0
		rx_msg.ID = (rx_msg.ID & 0x7F8) | (ID_LSB & 0x7);
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	82 2b       	or	r24, r18
     3fa:	f6 01       	movw	r30, r12
     3fc:	91 83       	std	Z+1, r25	; 0x01
     3fe:	80 83       	st	Z, r24
		
		length = MCP2515_read(MCP_RXB0DLC);
     400:	85 e6       	ldi	r24, 0x65	; 101
     402:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
		rx_msg.length = (length & 0xF);
     406:	8f 70       	andi	r24, 0x0F	; 15
     408:	f6 01       	movw	r30, r12
     40a:	82 83       	std	Z+2, r24	; 0x02
		if (rx_msg.length > 8) {
     40c:	89 30       	cpi	r24, 0x09	; 9
     40e:	10 f0       	brcs	.+4      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
			rx_msg.length = 8;
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	82 83       	std	Z+2, r24	; 0x02
	}
	
}

CAN_msg CAN_receive(uint8_t buffer)
{
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	12 c0       	rjmp	.+36     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
		if (rx_msg.length > 8) {
			rx_msg.length = 8;
		}
		
		for (uint8_t i=0; i < rx_msg.length; i++) {
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
     418:	e1 2e       	mov	r14, r17
     41a:	f1 2c       	mov	r15, r1
     41c:	86 e6       	ldi	r24, 0x66	; 102
     41e:	81 0f       	add	r24, r17
     420:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     424:	f6 01       	movw	r30, r12
     426:	ee 0d       	add	r30, r14
     428:	ff 1d       	adc	r31, r15
     42a:	83 83       	std	Z+3, r24	; 0x03
			char *temp_msg = rx_msg.message[i];
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9a 83       	std	Y+2, r25	; 0x02
     430:	89 83       	std	Y+1, r24	; 0x01
			print_uart(&temp_msg);
     432:	ce 01       	movw	r24, r28
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		rx_msg.length = (length & 0xF);
		if (rx_msg.length > 8) {
			rx_msg.length = 8;
		}
		
		for (uint8_t i=0; i < rx_msg.length; i++) {
     43a:	1f 5f       	subi	r17, 0xFF	; 255
     43c:	f6 01       	movw	r30, r12
     43e:	82 81       	ldd	r24, Z+2	; 0x02
     440:	18 17       	cp	r17, r24
     442:	50 f3       	brcs	.-44     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
			char *temp_msg = rx_msg.message[i];
			print_uart(&temp_msg);
		}
		print_uart("\r\n");
     444:	89 e3       	ldi	r24, 0x39	; 57
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	}
	return rx_msg;
}
     44c:	c6 01       	movw	r24, r12
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	08 95       	ret

00000462 <CAN_interpret_status>:

void CAN_interpret_status(uint8_t status)
{
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	2b 97       	sbiw	r28, 0x0b	; 11
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	18 2f       	mov	r17, r24
	uint8_t buffer;
	
	if (status & rx_buff_0_full) {
     47a:	80 ff       	sbrs	r24, 0
     47c:	09 c0       	rjmp	.+18     	; 0x490 <CAN_interpret_status+0x2e>
		buffer = 0;
		CAN_receive(buffer);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CAN_receive>
		print_uart("RX0 Full\r\n");
     488:	8c e2       	ldi	r24, 0x2C	; 44
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	}
	
	if (status & rx_buff_1_full) {
     490:	11 ff       	sbrs	r17, 1
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <CAN_interpret_status+0x44>
		buffer = 1;
		CAN_receive(buffer);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CAN_receive>
		print_uart("RX1 Full\r\n");
     49e:	87 e3       	ldi	r24, 0x37	; 55
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	}
	
	if (status & tx_buff_0_busy) {
     4a6:	12 ff       	sbrs	r17, 2
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <CAN_interpret_status+0x50>
		buffer = 0;
		// Something is about to go down
		print_uart("TX0 Busy\r\n");
     4aa:	82 e4       	ldi	r24, 0x42	; 66
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	}
	
	if (status & tx_buff_0_empty) {
     4b2:	13 ff       	sbrs	r17, 3
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <CAN_interpret_status+0x5c>
		buffer = 0;
		// Something else happens
		print_uart("TX0 Empty\r\n");
     4b6:	8d e4       	ldi	r24, 0x4D	; 77
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	}
	MCP2515_write(MCP_CANINTF, 0x00);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	8c e2       	ldi	r24, 0x2C	; 44
     4c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
     4c6:	2b 96       	adiw	r28, 0x0b	; 11
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret

000004da <__vector_1>:
#include "CANdrv.h"

static uint8_t CANINT_status;

ISR (INT0_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	2f 93       	push	r18
     4e6:	3f 93       	push	r19
     4e8:	4f 93       	push	r20
     4ea:	5f 93       	push	r21
     4ec:	6f 93       	push	r22
     4ee:	7f 93       	push	r23
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	af 93       	push	r26
     4f6:	bf 93       	push	r27
     4f8:	ef 93       	push	r30
     4fa:	ff 93       	push	r31
	CAN_interpret_status(MCP2515_read_status());
     4fc:	0e 94 c2 03 	call	0x784	; 0x784 <MCP2515_read_status>
     500:	0e 94 31 02 	call	0x462	; 0x462 <CAN_interpret_status>
}
     504:	ff 91       	pop	r31
     506:	ef 91       	pop	r30
     508:	bf 91       	pop	r27
     50a:	af 91       	pop	r26
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	7f 91       	pop	r23
     512:	6f 91       	pop	r22
     514:	5f 91       	pop	r21
     516:	4f 91       	pop	r20
     518:	3f 91       	pop	r19
     51a:	2f 91       	pop	r18
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <init>:
#include "MCP2515/MCP2515drv.h"
#include "CAN/CANdrv.h"


void init(){
	USART_drv_init(MYUBRR);
     526:	8f e1       	ldi	r24, 0x1F	; 31
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_drv_init>
	SRAM_init();
     52e:	0e 94 02 05 	call	0xa04	; 0xa04 <SRAM_init>
	adc_drv_init();
     532:	0e 94 57 00 	call	0xae	; 0xae <adc_drv_init>
	ext_button_drv_init();
     536:	0e 94 1e 04 	call	0x83c	; 0x83c <ext_button_drv_init>
	adc_calibrate();
     53a:	0e 94 b9 00 	call	0x172	; 0x172 <adc_calibrate>
	oled_init();
     53e:	0e 94 90 04 	call	0x920	; 0x920 <oled_init>
	//menu_init();
	CAN_init();
     542:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CAN_init>
     546:	08 95       	ret

00000548 <main>:
}

int main(void)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	2b 97       	sbiw	r28, 0x0b	; 11
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
	fun_stick_t my_fun_stick;
	uint8_t slider1, slider2;

	init();
     55c:	0e 94 93 02 	call	0x526	; 0x526 <init>
		.ID = 818,
		.length = 8,
		.message = {77, 101, 108, 100, 105, 110, 103, 33}
	};
    while (1){
		if (adc_drv_joystick_update()) {
     560:	0e 94 36 01 	call	0x26c	; 0x26c <adc_drv_joystick_update>
     564:	88 23       	and	r24, r24
     566:	f1 f0       	breq	.+60     	; 0x5a4 <main+0x5c>
			my_fun_stick = adc_drv_fun_stick_get();
     568:	0e 94 82 00 	call	0x104	; 0x104 <adc_drv_fun_stick_get>
     56c:	27 2f       	mov	r18, r23
			CAN_msg fun_stick_CAN_msg = {
     56e:	fe 01       	movw	r30, r28
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	9b e0       	ldi	r25, 0x0B	; 11
     574:	df 01       	movw	r26, r30
     576:	1d 92       	st	X+, r1
     578:	9a 95       	dec	r25
     57a:	e9 f7       	brne	.-6      	; 0x576 <main+0x2e>
     57c:	95 e4       	ldi	r25, 0x45	; 69
     57e:	e9 2e       	mov	r14, r25
     580:	99 83       	std	Y+1, r25	; 0x01
     582:	1a 82       	std	Y+2, r1	; 0x02
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	9b 83       	std	Y+3, r25	; 0x03
     588:	6c 83       	std	Y+4, r22	; 0x04
     58a:	7d 83       	std	Y+5, r23	; 0x05
     58c:	8e 83       	std	Y+6, r24	; 0x06
				.ID = 69,
				.length = 3,
				.message = {my_fun_stick.position.X, my_fun_stick.position.Y, my_fun_stick.direction}
			};
			CAN_send(fun_stick_CAN_msg);
     58e:	f1 2c       	mov	r15, r1
     590:	03 e0       	ldi	r16, 0x03	; 3
     592:	16 2f       	mov	r17, r22
     594:	38 2f       	mov	r19, r24
     596:	4f 81       	ldd	r20, Y+7	; 0x07
     598:	58 85       	ldd	r21, Y+8	; 0x08
     59a:	69 85       	ldd	r22, Y+9	; 0x09
     59c:	7a 85       	ldd	r23, Y+10	; 0x0a
     59e:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a0:	0e 94 77 01 	call	0x2ee	; 0x2ee <CAN_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	bf ef       	ldi	r27, 0xFF	; 255
     5a6:	2f e7       	ldi	r18, 0x7F	; 127
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	b1 50       	subi	r27, 0x01	; 1
     5ac:	20 40       	sbci	r18, 0x00	; 0
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x62>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x6c>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x6e>
     5b6:	d4 cf       	rjmp	.-88     	; 0x560 <main+0x18>

000005b8 <MCP2515_read>:
	 }
	 return 0;
 }

uint8_t MCP2515_read(uint8_t read_register)
{
     5b8:	cf 93       	push	r28
     5ba:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	clear_bit(PORTB, PB4);
     5bc:	88 b3       	in	r24, 0x18	; 24
     5be:	8f 7e       	andi	r24, 0xEF	; 239
     5c0:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_READ);
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(read_register);
     5c8:	8c 2f       	mov	r24, r28
     5ca:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	result = SPI_read();
     5ce:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SPI_read>
	
	set_bit(PORTB, PB4);
     5d2:	98 b3       	in	r25, 0x18	; 24
     5d4:	90 61       	ori	r25, 0x10	; 16
     5d6:	98 bb       	out	0x18, r25	; 24
	
	return result;
}
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <MCP2515_write>:

void MCP2515_write(uint8_t write_register, uint8_t data)
{
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	d8 2f       	mov	r29, r24
     5e2:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     5e4:	88 b3       	in	r24, 0x18	; 24
     5e6:	8f 7e       	andi	r24, 0xEF	; 239
     5e8:	88 bb       	out	0x18, r24	; 24

	SPI_write(MCP_WRITE);
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(write_register);
     5f0:	8d 2f       	mov	r24, r29
     5f2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(data);
     5f6:	8c 2f       	mov	r24, r28
     5f8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>

	set_bit(PORTB, PB4);
     5fc:	88 b3       	in	r24, 0x18	; 24
     5fe:	80 61       	ori	r24, 0x10	; 16
     600:	88 bb       	out	0x18, r24	; 24
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <MCP2515_request_to_send>:

void MCP2515_request_to_send(uint8_t buffer)
{
	clear_bit(PORTB, PB4);
     608:	98 b3       	in	r25, 0x18	; 24
     60a:	9f 7e       	andi	r25, 0xEF	; 239
     60c:	98 bb       	out	0x18, r25	; 24
	SPI_write(buffer);
     60e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	set_bit(PORTB, PB4);
     612:	88 b3       	in	r24, 0x18	; 24
     614:	80 61       	ori	r24, 0x10	; 16
     616:	88 bb       	out	0x18, r24	; 24
     618:	08 95       	ret

0000061a <MCP2515_bit_modify>:
}

void MCP2515_bit_modify(uint8_t write_register, uint8_t mask, uint8_t data)
{
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	18 2f       	mov	r17, r24
     622:	d6 2f       	mov	r29, r22
     624:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     626:	88 b3       	in	r24, 0x18	; 24
     628:	8f 7e       	andi	r24, 0xEF	; 239
     62a:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(write_register);
     632:	81 2f       	mov	r24, r17
     634:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(mask);
     638:	8d 2f       	mov	r24, r29
     63a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	SPI_write(data);
     63e:	8c 2f       	mov	r24, r28
     640:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	
	set_bit(PORTB, PB4);
     644:	88 b3       	in	r24, 0x18	; 24
     646:	80 61       	ori	r24, 0x10	; 16
     648:	88 bb       	out	0x18, r24	; 24
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <MCP2515_reset>:

void MCP2515_reset()
{
	clear_bit(PORTB, PB4);
     652:	88 b3       	in	r24, 0x18	; 24
     654:	8f 7e       	andi	r24, 0xEF	; 239
     656:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_RESET);
     658:	80 ec       	ldi	r24, 0xC0	; 192
     65a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	set_bit(PORTB, PB4);
     65e:	88 b3       	in	r24, 0x18	; 24
     660:	80 61       	ori	r24, 0x10	; 16
     662:	88 bb       	out	0x18, r24	; 24
     664:	08 95       	ret

00000666 <MCP2515_init>:
 */ 

#include "MCP2515drv.h"

int8_t MCP2515_init()
 {
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	 int value;
	 SPI_init(); // Initialize SPI
     66a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPI_init>
	 MCP2515_reset(); // Send reset - command
     66e:	0e 94 29 03 	call	0x652	; 0x652 <MCP2515_reset>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
     672:	8e e0       	ldi	r24, 0x0E	; 14
     674:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_CONFIG){
     678:	80 7e       	andi	r24, 0xE0	; 224
     67a:	80 38       	cpi	r24, 0x80	; 128
     67c:	31 f0       	breq	.+12     	; 0x68a <MCP2515_init+0x24>
		 print_uart("MCP2515 is NOT in configuration mode after reset!\r\n");
     67e:	89 e5       	ldi	r24, 0x59	; 89
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -1;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	7a c0       	rjmp	.+244    	; 0x77e <MCP2515_init+0x118>
	 }
	 
	 MCP2515_write(MCP_TXRTSCTRL, MCP_TXRTS_CONF);
     68a:	67 e0       	ldi	r22, 0x07	; 7
     68c:	8d e0       	ldi	r24, 0x0D	; 13
     68e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	 
	 // Receive buffer0 config: receive all messages, no overflow to RXB1.
	 MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
     692:	40 e6       	ldi	r20, 0x60	; 96
     694:	60 e6       	ldi	r22, 0x60	; 96
     696:	80 e6       	ldi	r24, 0x60	; 96
     698:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB0CTRL);
     69c:	80 e6       	ldi	r24, 0x60	; 96
     69e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if (value != 0x60){
     6a2:	80 36       	cpi	r24, 0x60	; 96
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <MCP2515_init+0x4c>
		 print_uart("Receive buffer 0 config incorrect!\r\n");
     6a6:	8d e8       	ldi	r24, 0x8D	; 141
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -2;
     6ae:	8e ef       	ldi	r24, 0xFE	; 254
     6b0:	66 c0       	rjmp	.+204    	; 0x77e <MCP2515_init+0x118>
	 }
	 
	 // Receive buffer1 config: receive all messages.
	 MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     6b2:	40 e6       	ldi	r20, 0x60	; 96
     6b4:	60 e6       	ldi	r22, 0x60	; 96
     6b6:	80 e7       	ldi	r24, 0x70	; 112
     6b8:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB1CTRL);
     6bc:	80 e7       	ldi	r24, 0x70	; 112
     6be:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     6c2:	c8 2f       	mov	r28, r24
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
	 print_uart(value);
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	 if (value != 0x60){
     6cc:	c0 36       	cpi	r28, 0x60	; 96
     6ce:	d1 05       	cpc	r29, r1
     6d0:	31 f0       	breq	.+12     	; 0x6de <MCP2515_init+0x78>
		 print_uart("Receive buffer 1 config incorrect!\r\n");
     6d2:	82 eb       	ldi	r24, 0xB2	; 178
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -3;
     6da:	8d ef       	ldi	r24, 0xFD	; 253
     6dc:	50 c0       	rjmp	.+160    	; 0x77e <MCP2515_init+0x118>
	 }	 
	 
	 // Interrupt config: msg error, error flag change, TX0 empty, RX0 full
	 //MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0xA5);
	 MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0x5);
     6de:	45 e0       	ldi	r20, 0x05	; 5
     6e0:	6f ef       	ldi	r22, 0xFF	; 255
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CANINTE);
     6e8:	8b e2       	ldi	r24, 0x2B	; 43
     6ea:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if (value != 0x5){
     6ee:	85 30       	cpi	r24, 0x05	; 5
     6f0:	31 f0       	breq	.+12     	; 0x6fe <MCP2515_init+0x98>
		 print_uart("Interrupt config incorrect!\r\n");
     6f2:	87 ed       	ldi	r24, 0xD7	; 215
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -4;
     6fa:	8c ef       	ldi	r24, 0xFC	; 252
     6fc:	40 c0       	rjmp	.+128    	; 0x77e <MCP2515_init+0x118>
	 } 

	// set CAN baud rate prescaler
	 MCP2515_bit_modify(MCP_CNF1, MCP_BRP, MCP_BRP);
     6fe:	43 e0       	ldi	r20, 0x03	; 3
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	8a e2       	ldi	r24, 0x2A	; 42
     704:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF1);
     708:	8a e2       	ldi	r24, 0x2A	; 42
     70a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if (value != MCP_BRP){
     70e:	83 30       	cpi	r24, 0x03	; 3
     710:	31 f0       	breq	.+12     	; 0x71e <MCP2515_init+0xb8>
		 print_uart(" BRP incorrect!\r\n");
     712:	85 ef       	ldi	r24, 0xF5	; 245
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -5;
     71a:	8b ef       	ldi	r24, 0xFB	; 251
     71c:	30 c0       	rjmp	.+96     	; 0x77e <MCP2515_init+0x118>
	 }

	// Config CAN bit timing
	 MCP2515_bit_modify(MCP_CNF2, 0xB1, 0xB1);
     71e:	41 eb       	ldi	r20, 0xB1	; 177
     720:	61 eb       	ldi	r22, 0xB1	; 177
     722:	89 e2       	ldi	r24, 0x29	; 41
     724:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF2);
     728:	89 e2       	ldi	r24, 0x29	; 41
     72a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if (value != 0xB1){
     72e:	81 3b       	cpi	r24, 0xB1	; 177
     730:	31 f0       	breq	.+12     	; 0x73e <MCP2515_init+0xd8>
		 print_uart(" CNF2 incorrect!\r\n");
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -6;
     73a:	8a ef       	ldi	r24, 0xFA	; 250
     73c:	20 c0       	rjmp	.+64     	; 0x77e <MCP2515_init+0x118>
	 }
	 
	 // Config CAN bit timing
	 MCP2515_bit_modify(MCP_CNF3, 0x5, 0x5);
     73e:	45 e0       	ldi	r20, 0x05	; 5
     740:	65 e0       	ldi	r22, 0x05	; 5
     742:	88 e2       	ldi	r24, 0x28	; 40
     744:	0e 94 0d 03 	call	0x61a	; 0x61a <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF3);
     748:	88 e2       	ldi	r24, 0x28	; 40
     74a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if (value != 0x5){
     74e:	85 30       	cpi	r24, 0x05	; 5
     750:	31 f0       	breq	.+12     	; 0x75e <MCP2515_init+0xf8>
		 print_uart(" CNF2 incorrect!\r\n");
     752:	87 e0       	ldi	r24, 0x07	; 7
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -7;
     75a:	89 ef       	ldi	r24, 0xF9	; 249
     75c:	10 c0       	rjmp	.+32     	; 0x77e <MCP2515_init+0x118>
	 }
	 
	 MCP2515_write(MCP_CANCTRL, MODE_NORMAL);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	8f e0       	ldi	r24, 0x0F	; 15
     762:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	 value = MCP2515_read(MCP_CANSTAT);
     766:	8e e0       	ldi	r24, 0x0E	; 14
     768:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_NORMAL){
     76c:	80 7e       	andi	r24, 0xE0	; 224
     76e:	31 f0       	breq	.+12     	; 0x77c <MCP2515_init+0x116>
		 print_uart(" MCP2515 is NOT in Normal mode!\r\n");
     770:	8a e1       	ldi	r24, 0x1A	; 26
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
		 return -8;
     778:	88 ef       	ldi	r24, 0xF8	; 248
     77a:	01 c0       	rjmp	.+2      	; 0x77e <MCP2515_init+0x118>
	 }
	 return 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
 }
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <MCP2515_read_status>:

uint8_t MCP2515_read_status()
{
	uint8_t data;
	
	clear_bit(PORTB, PB4);
     784:	88 b3       	in	r24, 0x18	; 24
     786:	8f 7e       	andi	r24, 0xEF	; 239
     788:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_READ_STATUS);
     78a:	80 ea       	ldi	r24, 0xA0	; 160
     78c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SPI_write>
	data = SPI_read();
     790:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SPI_read>
	data = SPI_read();
     794:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SPI_read>
	set_bit(PORTB, PB4);
     798:	98 b3       	in	r25, 0x18	; 24
     79a:	90 61       	ori	r25, 0x10	; 16
     79c:	98 bb       	out	0x18, r25	; 24
	
	return data;
     79e:	08 95       	ret

000007a0 <__vector_2>:
#include "ext_button_drv.h"
#include "prints.h"


ISR (INT1_vect)
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	4f 93       	push	r20
     7b0:	5f 93       	push	r21
     7b2:	6f 93       	push	r22
     7b4:	7f 93       	push	r23
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
     7c2:	8c e3       	ldi	r24, 0x3C	; 60
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <__vector_3>:

ISR (INT2_vect)
{
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
     80e:	83 e5       	ldi	r24, 0x53	; 83
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 3c 04 	call	0x878	; 0x878 <print_uart>
	enter();
     816:	0e 94 49 04 	call	0x892	; 0x892 <enter>
	
}
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
     83c:	81 b3       	in	r24, 0x11	; 17
     83e:	87 7f       	andi	r24, 0xF7	; 247
     840:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
     842:	86 b1       	in	r24, 0x06	; 6
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
     848:	f8 94       	cli
	// Enables interrupt on pin INT1
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
     84a:	8b b7       	in	r24, 0x3b	; 59
     84c:	80 68       	ori	r24, 0x80	; 128
     84e:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT1
	set_bit(MCUCR, ISC11);
     850:	85 b7       	in	r24, 0x35	; 53
     852:	88 60       	ori	r24, 0x08	; 8
     854:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
     856:	85 b7       	in	r24, 0x35	; 53
     858:	84 60       	ori	r24, 0x04	; 4
     85a:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
     85c:	8b b7       	in	r24, 0x3b	; 59
     85e:	8e 7f       	andi	r24, 0xFE	; 254
     860:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
     862:	86 b7       	in	r24, 0x36	; 54
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
     868:	8a b7       	in	r24, 0x3a	; 58
     86a:	80 62       	ori	r24, 0x20	; 32
     86c:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
     86e:	8b b7       	in	r24, 0x3b	; 59
     870:	80 62       	ori	r24, 0x20	; 32
     872:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
     874:	78 94       	sei
     876:	08 95       	ret

00000878 <print_uart>:
void print_oled(char* string){
	stdout = &stdout_oled;
	printf(string);
	
}void print_uart(char* string){
	stdout = &stdout_uart;
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	31 e0       	ldi	r19, 0x01	; 1
     87c:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <__iob+0x3>
     880:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <__iob+0x2>
	printf(string);
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	0e 94 40 05 	call	0xa80	; 0xa80 <printf>
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	08 95       	ret

00000892 <enter>:
		print_arrow();
	}
}

void enter()
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	6c 97       	sbiw	r28, 0x1c	; 28
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
     8a6:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <current_menu>
     8aa:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <current_menu+0x1>
     8ae:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <arrow_on_line>
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	31 09       	sbc	r19, r1
     8b8:	4c e1       	ldi	r20, 0x1C	; 28
     8ba:	42 9f       	mul	r20, r18
     8bc:	c0 01       	movw	r24, r0
     8be:	43 9f       	mul	r20, r19
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e8 0f       	add	r30, r24
     8c6:	f9 1f       	adc	r31, r25
     8c8:	78 96       	adiw	r30, 0x18	; 24
     8ca:	8c e1       	ldi	r24, 0x1C	; 28
     8cc:	de 01       	movw	r26, r28
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	8a 95       	dec	r24
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
     8d8:	e9 8d       	ldd	r30, Y+25	; 0x19
     8da:	fa 8d       	ldd	r31, Y+26	; 0x1a
     8dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8de:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8e0:	09 95       	icall
}
     8e2:	6c 96       	adiw	r28, 0x1c	; 28
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <oled_write_cmd>:
	}
}

void oled_home()
{
	oled_pos(0, 0);
     8f4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd84>
     8f8:	08 95       	ret

000008fa <oled_write_data>:
}

void oled_write_data(char data) // Volatile
{
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
     8fa:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf84>
     8fe:	08 95       	ret

00000900 <oled_reset>:
	//stdout = &stdout_oled;
	
}

void oled_reset()
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
	for(uint16_t i = 0; i < 1024; i++) {
     904:	c0 e0       	ldi	r28, 0x00	; 0
     906:	d0 e0       	ldi	r29, 0x00	; 0
     908:	04 c0       	rjmp	.+8      	; 0x912 <oled_reset+0x12>
		oled_write_data(0b00000000);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <oled_write_data>
	
}

void oled_reset()
{
	for(uint16_t i = 0; i < 1024; i++) {
     910:	21 96       	adiw	r28, 0x01	; 1
     912:	c1 15       	cp	r28, r1
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	d8 07       	cpc	r29, r24
     918:	c0 f3       	brcs	.-16     	; 0x90a <oled_reset+0xa>
		oled_write_data(0b00000000);
	}
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <oled_init>:
	oled_cmd_reg[0] = command;
}

void oled_init()
{
	oled_write_cmd(0xae); // display off
     920:	8e ea       	ldi	r24, 0xAE	; 174
     922:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xa1); //segment remap
     926:	81 ea       	ldi	r24, 0xA1	; 161
     928:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xda); //common pads hardware: alternative
     92c:	8a ed       	ldi	r24, 0xDA	; 218
     92e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x12);
     932:	82 e1       	ldi	r24, 0x12	; 18
     934:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xc8); //common output scan direction:com63~com0
     938:	88 ec       	ldi	r24, 0xC8	; 200
     93a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xa8); //multiplex ration mode:63
     93e:	88 ea       	ldi	r24, 0xA8	; 168
     940:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x3f);
     944:	8f e3       	ldi	r24, 0x3F	; 63
     946:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xd5); //display divide ratio/osc. freq. mode
     94a:	85 ed       	ldi	r24, 0xD5	; 213
     94c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x80);
     950:	80 e8       	ldi	r24, 0x80	; 128
     952:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x81); //contrast control
     956:	81 e8       	ldi	r24, 0x81	; 129
     958:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xFF);
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xd9); //set pre-charge period
     962:	89 ed       	ldi	r24, 0xD9	; 217
     964:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x21);
     968:	81 e2       	ldi	r24, 0x21	; 33
     96a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x20); //Set Memory Addressing Mode (Horizontal)
     96e:	80 e2       	ldi	r24, 0x20	; 32
     970:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x00);
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xdb); //VCOM deselect level mode
     97a:	8b ed       	ldi	r24, 0xDB	; 219
     97c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x30);
     980:	80 e3       	ldi	r24, 0x30	; 48
     982:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xad); //master configuration
     986:	8d ea       	ldi	r24, 0xAD	; 173
     988:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0x00);
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xa4); //out follows RAM content
     992:	84 ea       	ldi	r24, 0xA4	; 164
     994:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xa6); //set normal display
     998:	86 ea       	ldi	r24, 0xA6	; 166
     99a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0xaf); // display on
     99e:	8f ea       	ldi	r24, 0xAF	; 175
     9a0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	
	oled_write_cmd(0b00100001); // Set Column Address
     9a4:	81 e2       	ldi	r24, 0x21	; 33
     9a6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0b00000000);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0b11111111);
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	
	oled_write_cmd(0b00100010); // Set Page Address
     9b6:	82 e2       	ldi	r24, 0x22	; 34
     9b8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0b00000000);
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	oled_write_cmd(0b11111111);
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_write_cmd>
	
	oled_reset(); // Set all pixels low
     9c8:	0e 94 80 04 	call	0x900	; 0x900 <oled_reset>
     9cc:	08 95       	ret

000009ce <SPI_init>:

void SPI_init(void)
{
	/* Set PB4, MOSI and SCK output. By using "set_bit", we avoid configuring all other bits (?) */
	//DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
	set_bit(DDRB, DDB4);
     9ce:	87 b3       	in	r24, 0x17	; 23
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB5);
     9d4:	87 b3       	in	r24, 0x17	; 23
     9d6:	80 62       	ori	r24, 0x20	; 32
     9d8:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB7);
     9da:	87 b3       	in	r24, 0x17	; 23
     9dc:	80 68       	ori	r24, 0x80	; 128
     9de:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9e0:	81 e5       	ldi	r24, 0x51	; 81
     9e2:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(PORTB, PB4);
     9e4:	88 b3       	in	r24, 0x18	; 24
     9e6:	80 61       	ori	r24, 0x10	; 16
     9e8:	88 bb       	out	0x18, r24	; 24
     9ea:	08 95       	ret

000009ec <SPI_transmit>:
}

void SPI_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     9ec:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     9ee:	77 9b       	sbis	0x0e, 7	; 14
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <SPI_transmit+0x2>
	;
}
     9f2:	08 95       	ret

000009f4 <SPI_write>:

void SPI_write(uint8_t data)
{
	SPI_transmit(data);
     9f4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_transmit>
     9f8:	08 95       	ret

000009fa <SPI_read>:
}

uint8_t SPI_read()
{
	SPI_transmit(SPI_DUMMY_DATA);
     9fa:	84 ef       	ldi	r24, 0xF4	; 244
     9fc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_transmit>
	
	return SPDR;
     a00:	8f b1       	in	r24, 0x0f	; 15
     a02:	08 95       	ret

00000a04 <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
     a04:	85 b7       	in	r24, 0x35	; 53
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
     a0a:	80 b7       	in	r24, 0x30	; 48
     a0c:	80 62       	ori	r24, 0x20	; 32
     a0e:	80 bf       	out	0x30, r24	; 48
     a10:	08 95       	ret

00000a12 <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     a12:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a14:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a16:	88 e1       	ldi	r24, 0x18	; 24
     a18:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     a1a:	8e e8       	ldi	r24, 0x8E	; 142
     a1c:	80 bd       	out	0x20, r24	; 32
     a1e:	08 95       	ret

00000a20 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     a20:	5d 9b       	sbis	0x0b, 5	; 11
     a22:	fe cf       	rjmp	.-4      	; 0xa20 <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     a24:	8c b9       	out	0x0c, r24	; 12
     a26:	08 95       	ret

00000a28 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     a28:	5f 9b       	sbis	0x0b, 7	; 11
     a2a:	fe cf       	rjmp	.-4      	; 0xa28 <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     a2c:	8c b1       	in	r24, 0x0c	; 12

}
     a2e:	08 95       	ret

00000a30 <__divmodhi4>:
     a30:	97 fb       	bst	r25, 7
     a32:	07 2e       	mov	r0, r23
     a34:	16 f4       	brtc	.+4      	; 0xa3a <__divmodhi4+0xa>
     a36:	00 94       	com	r0
     a38:	07 d0       	rcall	.+14     	; 0xa48 <__divmodhi4_neg1>
     a3a:	77 fd       	sbrc	r23, 7
     a3c:	09 d0       	rcall	.+18     	; 0xa50 <__divmodhi4_neg2>
     a3e:	0e 94 2c 05 	call	0xa58	; 0xa58 <__udivmodhi4>
     a42:	07 fc       	sbrc	r0, 7
     a44:	05 d0       	rcall	.+10     	; 0xa50 <__divmodhi4_neg2>
     a46:	3e f4       	brtc	.+14     	; 0xa56 <__divmodhi4_exit>

00000a48 <__divmodhi4_neg1>:
     a48:	90 95       	com	r25
     a4a:	81 95       	neg	r24
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	08 95       	ret

00000a50 <__divmodhi4_neg2>:
     a50:	70 95       	com	r23
     a52:	61 95       	neg	r22
     a54:	7f 4f       	sbci	r23, 0xFF	; 255

00000a56 <__divmodhi4_exit>:
     a56:	08 95       	ret

00000a58 <__udivmodhi4>:
     a58:	aa 1b       	sub	r26, r26
     a5a:	bb 1b       	sub	r27, r27
     a5c:	51 e1       	ldi	r21, 0x11	; 17
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__udivmodhi4_ep>

00000a60 <__udivmodhi4_loop>:
     a60:	aa 1f       	adc	r26, r26
     a62:	bb 1f       	adc	r27, r27
     a64:	a6 17       	cp	r26, r22
     a66:	b7 07       	cpc	r27, r23
     a68:	10 f0       	brcs	.+4      	; 0xa6e <__udivmodhi4_ep>
     a6a:	a6 1b       	sub	r26, r22
     a6c:	b7 0b       	sbc	r27, r23

00000a6e <__udivmodhi4_ep>:
     a6e:	88 1f       	adc	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	5a 95       	dec	r21
     a74:	a9 f7       	brne	.-22     	; 0xa60 <__udivmodhi4_loop>
     a76:	80 95       	com	r24
     a78:	90 95       	com	r25
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	08 95       	ret

00000a80 <printf>:
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e6 e4       	ldi	r30, 0x46	; 70
     a86:	f5 e0       	ldi	r31, 0x05	; 5
     a88:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__prologue_saves__+0x20>
     a8c:	ae 01       	movw	r20, r28
     a8e:	4b 5f       	subi	r20, 0xFB	; 251
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	fa 01       	movw	r30, r20
     a94:	61 91       	ld	r22, Z+
     a96:	71 91       	ld	r23, Z+
     a98:	af 01       	movw	r20, r30
     a9a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__iob+0x2>
     a9e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__iob+0x3>
     aa2:	0e 94 56 05 	call	0xaac	; 0xaac <vfprintf>
     aa6:	e2 e0       	ldi	r30, 0x02	; 2
     aa8:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__epilogue_restores__+0x20>

00000aac <vfprintf>:
     aac:	ab e0       	ldi	r26, 0x0B	; 11
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	ec e5       	ldi	r30, 0x5C	; 92
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__prologue_saves__>
     ab8:	6c 01       	movw	r12, r24
     aba:	7b 01       	movw	r14, r22
     abc:	8a 01       	movw	r16, r20
     abe:	fc 01       	movw	r30, r24
     ac0:	17 82       	std	Z+7, r1	; 0x07
     ac2:	16 82       	std	Z+6, r1	; 0x06
     ac4:	83 81       	ldd	r24, Z+3	; 0x03
     ac6:	81 ff       	sbrs	r24, 1
     ac8:	cc c1       	rjmp	.+920    	; 0xe62 <vfprintf+0x3b6>
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	3c 01       	movw	r6, r24
     ad0:	f6 01       	movw	r30, r12
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	f7 01       	movw	r30, r14
     ad6:	93 fd       	sbrc	r25, 3
     ad8:	85 91       	lpm	r24, Z+
     ada:	93 ff       	sbrs	r25, 3
     adc:	81 91       	ld	r24, Z+
     ade:	7f 01       	movw	r14, r30
     ae0:	88 23       	and	r24, r24
     ae2:	09 f4       	brne	.+2      	; 0xae6 <vfprintf+0x3a>
     ae4:	ba c1       	rjmp	.+884    	; 0xe5a <vfprintf+0x3ae>
     ae6:	85 32       	cpi	r24, 0x25	; 37
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <vfprintf+0x4c>
     aea:	93 fd       	sbrc	r25, 3
     aec:	85 91       	lpm	r24, Z+
     aee:	93 ff       	sbrs	r25, 3
     af0:	81 91       	ld	r24, Z+
     af2:	7f 01       	movw	r14, r30
     af4:	85 32       	cpi	r24, 0x25	; 37
     af6:	29 f4       	brne	.+10     	; 0xb02 <vfprintf+0x56>
     af8:	b6 01       	movw	r22, r12
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     b00:	e7 cf       	rjmp	.-50     	; 0xad0 <vfprintf+0x24>
     b02:	91 2c       	mov	r9, r1
     b04:	21 2c       	mov	r2, r1
     b06:	31 2c       	mov	r3, r1
     b08:	ff e1       	ldi	r31, 0x1F	; 31
     b0a:	f3 15       	cp	r31, r3
     b0c:	d8 f0       	brcs	.+54     	; 0xb44 <vfprintf+0x98>
     b0e:	8b 32       	cpi	r24, 0x2B	; 43
     b10:	79 f0       	breq	.+30     	; 0xb30 <vfprintf+0x84>
     b12:	38 f4       	brcc	.+14     	; 0xb22 <vfprintf+0x76>
     b14:	80 32       	cpi	r24, 0x20	; 32
     b16:	79 f0       	breq	.+30     	; 0xb36 <vfprintf+0x8a>
     b18:	83 32       	cpi	r24, 0x23	; 35
     b1a:	a1 f4       	brne	.+40     	; 0xb44 <vfprintf+0x98>
     b1c:	23 2d       	mov	r18, r3
     b1e:	20 61       	ori	r18, 0x10	; 16
     b20:	1d c0       	rjmp	.+58     	; 0xb5c <vfprintf+0xb0>
     b22:	8d 32       	cpi	r24, 0x2D	; 45
     b24:	61 f0       	breq	.+24     	; 0xb3e <vfprintf+0x92>
     b26:	80 33       	cpi	r24, 0x30	; 48
     b28:	69 f4       	brne	.+26     	; 0xb44 <vfprintf+0x98>
     b2a:	23 2d       	mov	r18, r3
     b2c:	21 60       	ori	r18, 0x01	; 1
     b2e:	16 c0       	rjmp	.+44     	; 0xb5c <vfprintf+0xb0>
     b30:	83 2d       	mov	r24, r3
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	38 2e       	mov	r3, r24
     b36:	e3 2d       	mov	r30, r3
     b38:	e4 60       	ori	r30, 0x04	; 4
     b3a:	3e 2e       	mov	r3, r30
     b3c:	2a c0       	rjmp	.+84     	; 0xb92 <vfprintf+0xe6>
     b3e:	f3 2d       	mov	r31, r3
     b40:	f8 60       	ori	r31, 0x08	; 8
     b42:	1d c0       	rjmp	.+58     	; 0xb7e <vfprintf+0xd2>
     b44:	37 fc       	sbrc	r3, 7
     b46:	2d c0       	rjmp	.+90     	; 0xba2 <vfprintf+0xf6>
     b48:	20 ed       	ldi	r18, 0xD0	; 208
     b4a:	28 0f       	add	r18, r24
     b4c:	2a 30       	cpi	r18, 0x0A	; 10
     b4e:	40 f0       	brcs	.+16     	; 0xb60 <vfprintf+0xb4>
     b50:	8e 32       	cpi	r24, 0x2E	; 46
     b52:	b9 f4       	brne	.+46     	; 0xb82 <vfprintf+0xd6>
     b54:	36 fc       	sbrc	r3, 6
     b56:	81 c1       	rjmp	.+770    	; 0xe5a <vfprintf+0x3ae>
     b58:	23 2d       	mov	r18, r3
     b5a:	20 64       	ori	r18, 0x40	; 64
     b5c:	32 2e       	mov	r3, r18
     b5e:	19 c0       	rjmp	.+50     	; 0xb92 <vfprintf+0xe6>
     b60:	36 fe       	sbrs	r3, 6
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0xc4>
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	98 9e       	mul	r9, r24
     b68:	20 0d       	add	r18, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	92 2e       	mov	r9, r18
     b6e:	11 c0       	rjmp	.+34     	; 0xb92 <vfprintf+0xe6>
     b70:	ea e0       	ldi	r30, 0x0A	; 10
     b72:	2e 9e       	mul	r2, r30
     b74:	20 0d       	add	r18, r0
     b76:	11 24       	eor	r1, r1
     b78:	22 2e       	mov	r2, r18
     b7a:	f3 2d       	mov	r31, r3
     b7c:	f0 62       	ori	r31, 0x20	; 32
     b7e:	3f 2e       	mov	r3, r31
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <vfprintf+0xe6>
     b82:	8c 36       	cpi	r24, 0x6C	; 108
     b84:	21 f4       	brne	.+8      	; 0xb8e <vfprintf+0xe2>
     b86:	83 2d       	mov	r24, r3
     b88:	80 68       	ori	r24, 0x80	; 128
     b8a:	38 2e       	mov	r3, r24
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <vfprintf+0xe6>
     b8e:	88 36       	cpi	r24, 0x68	; 104
     b90:	41 f4       	brne	.+16     	; 0xba2 <vfprintf+0xf6>
     b92:	f7 01       	movw	r30, r14
     b94:	93 fd       	sbrc	r25, 3
     b96:	85 91       	lpm	r24, Z+
     b98:	93 ff       	sbrs	r25, 3
     b9a:	81 91       	ld	r24, Z+
     b9c:	7f 01       	movw	r14, r30
     b9e:	81 11       	cpse	r24, r1
     ba0:	b3 cf       	rjmp	.-154    	; 0xb08 <vfprintf+0x5c>
     ba2:	98 2f       	mov	r25, r24
     ba4:	9f 7d       	andi	r25, 0xDF	; 223
     ba6:	95 54       	subi	r25, 0x45	; 69
     ba8:	93 30       	cpi	r25, 0x03	; 3
     baa:	28 f4       	brcc	.+10     	; 0xbb6 <vfprintf+0x10a>
     bac:	0c 5f       	subi	r16, 0xFC	; 252
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	9f e3       	ldi	r25, 0x3F	; 63
     bb2:	99 83       	std	Y+1, r25	; 0x01
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x124>
     bb6:	83 36       	cpi	r24, 0x63	; 99
     bb8:	31 f0       	breq	.+12     	; 0xbc6 <vfprintf+0x11a>
     bba:	83 37       	cpi	r24, 0x73	; 115
     bbc:	71 f0       	breq	.+28     	; 0xbda <vfprintf+0x12e>
     bbe:	83 35       	cpi	r24, 0x53	; 83
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <vfprintf+0x118>
     bc2:	59 c0       	rjmp	.+178    	; 0xc76 <vfprintf+0x1ca>
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <vfprintf+0x15c>
     bc6:	f8 01       	movw	r30, r16
     bc8:	80 81       	ld	r24, Z
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	0e 5f       	subi	r16, 0xFE	; 254
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	88 24       	eor	r8, r8
     bd2:	83 94       	inc	r8
     bd4:	91 2c       	mov	r9, r1
     bd6:	53 01       	movw	r10, r6
     bd8:	13 c0       	rjmp	.+38     	; 0xc00 <vfprintf+0x154>
     bda:	28 01       	movw	r4, r16
     bdc:	f2 e0       	ldi	r31, 0x02	; 2
     bde:	4f 0e       	add	r4, r31
     be0:	51 1c       	adc	r5, r1
     be2:	f8 01       	movw	r30, r16
     be4:	a0 80       	ld	r10, Z
     be6:	b1 80       	ldd	r11, Z+1	; 0x01
     be8:	36 fe       	sbrs	r3, 6
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x146>
     bec:	69 2d       	mov	r22, r9
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x14a>
     bf2:	6f ef       	ldi	r22, 0xFF	; 255
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	c5 01       	movw	r24, r10
     bf8:	0e 94 42 07 	call	0xe84	; 0xe84 <strnlen>
     bfc:	4c 01       	movw	r8, r24
     bfe:	82 01       	movw	r16, r4
     c00:	f3 2d       	mov	r31, r3
     c02:	ff 77       	andi	r31, 0x7F	; 127
     c04:	3f 2e       	mov	r3, r31
     c06:	16 c0       	rjmp	.+44     	; 0xc34 <vfprintf+0x188>
     c08:	28 01       	movw	r4, r16
     c0a:	22 e0       	ldi	r18, 0x02	; 2
     c0c:	42 0e       	add	r4, r18
     c0e:	51 1c       	adc	r5, r1
     c10:	f8 01       	movw	r30, r16
     c12:	a0 80       	ld	r10, Z
     c14:	b1 80       	ldd	r11, Z+1	; 0x01
     c16:	36 fe       	sbrs	r3, 6
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x174>
     c1a:	69 2d       	mov	r22, r9
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x178>
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	c5 01       	movw	r24, r10
     c26:	0e 94 37 07 	call	0xe6e	; 0xe6e <strnlen_P>
     c2a:	4c 01       	movw	r8, r24
     c2c:	f3 2d       	mov	r31, r3
     c2e:	f0 68       	ori	r31, 0x80	; 128
     c30:	3f 2e       	mov	r3, r31
     c32:	82 01       	movw	r16, r4
     c34:	33 fc       	sbrc	r3, 3
     c36:	1b c0       	rjmp	.+54     	; 0xc6e <vfprintf+0x1c2>
     c38:	82 2d       	mov	r24, r2
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 16       	cp	r8, r24
     c3e:	99 06       	cpc	r9, r25
     c40:	b0 f4       	brcc	.+44     	; 0xc6e <vfprintf+0x1c2>
     c42:	b6 01       	movw	r22, r12
     c44:	80 e2       	ldi	r24, 0x20	; 32
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     c4c:	2a 94       	dec	r2
     c4e:	f4 cf       	rjmp	.-24     	; 0xc38 <vfprintf+0x18c>
     c50:	f5 01       	movw	r30, r10
     c52:	37 fc       	sbrc	r3, 7
     c54:	85 91       	lpm	r24, Z+
     c56:	37 fe       	sbrs	r3, 7
     c58:	81 91       	ld	r24, Z+
     c5a:	5f 01       	movw	r10, r30
     c5c:	b6 01       	movw	r22, r12
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     c64:	21 10       	cpse	r2, r1
     c66:	2a 94       	dec	r2
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	82 1a       	sub	r8, r18
     c6c:	91 08       	sbc	r9, r1
     c6e:	81 14       	cp	r8, r1
     c70:	91 04       	cpc	r9, r1
     c72:	71 f7       	brne	.-36     	; 0xc50 <vfprintf+0x1a4>
     c74:	e8 c0       	rjmp	.+464    	; 0xe46 <vfprintf+0x39a>
     c76:	84 36       	cpi	r24, 0x64	; 100
     c78:	11 f0       	breq	.+4      	; 0xc7e <vfprintf+0x1d2>
     c7a:	89 36       	cpi	r24, 0x69	; 105
     c7c:	41 f5       	brne	.+80     	; 0xcce <vfprintf+0x222>
     c7e:	f8 01       	movw	r30, r16
     c80:	37 fe       	sbrs	r3, 7
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <vfprintf+0x1e6>
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0c 5f       	subi	r16, 0xFC	; 252
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <vfprintf+0x1f6>
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	07 2e       	mov	r0, r23
     c98:	00 0c       	add	r0, r0
     c9a:	88 0b       	sbc	r24, r24
     c9c:	99 0b       	sbc	r25, r25
     c9e:	0e 5f       	subi	r16, 0xFE	; 254
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	f3 2d       	mov	r31, r3
     ca4:	ff 76       	andi	r31, 0x6F	; 111
     ca6:	3f 2e       	mov	r3, r31
     ca8:	97 ff       	sbrs	r25, 7
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <vfprintf+0x212>
     cac:	90 95       	com	r25
     cae:	80 95       	com	r24
     cb0:	70 95       	com	r23
     cb2:	61 95       	neg	r22
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	8f 4f       	sbci	r24, 0xFF	; 255
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	f0 68       	ori	r31, 0x80	; 128
     cbc:	3f 2e       	mov	r3, r31
     cbe:	2a e0       	ldi	r18, 0x0A	; 10
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	a3 01       	movw	r20, r6
     cc4:	0e 94 89 07 	call	0xf12	; 0xf12 <__ultoa_invert>
     cc8:	88 2e       	mov	r8, r24
     cca:	86 18       	sub	r8, r6
     ccc:	45 c0       	rjmp	.+138    	; 0xd58 <vfprintf+0x2ac>
     cce:	85 37       	cpi	r24, 0x75	; 117
     cd0:	31 f4       	brne	.+12     	; 0xcde <vfprintf+0x232>
     cd2:	23 2d       	mov	r18, r3
     cd4:	2f 7e       	andi	r18, 0xEF	; 239
     cd6:	b2 2e       	mov	r11, r18
     cd8:	2a e0       	ldi	r18, 0x0A	; 10
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	25 c0       	rjmp	.+74     	; 0xd28 <vfprintf+0x27c>
     cde:	93 2d       	mov	r25, r3
     ce0:	99 7f       	andi	r25, 0xF9	; 249
     ce2:	b9 2e       	mov	r11, r25
     ce4:	8f 36       	cpi	r24, 0x6F	; 111
     ce6:	c1 f0       	breq	.+48     	; 0xd18 <vfprintf+0x26c>
     ce8:	18 f4       	brcc	.+6      	; 0xcf0 <vfprintf+0x244>
     cea:	88 35       	cpi	r24, 0x58	; 88
     cec:	79 f0       	breq	.+30     	; 0xd0c <vfprintf+0x260>
     cee:	b5 c0       	rjmp	.+362    	; 0xe5a <vfprintf+0x3ae>
     cf0:	80 37       	cpi	r24, 0x70	; 112
     cf2:	19 f0       	breq	.+6      	; 0xcfa <vfprintf+0x24e>
     cf4:	88 37       	cpi	r24, 0x78	; 120
     cf6:	21 f0       	breq	.+8      	; 0xd00 <vfprintf+0x254>
     cf8:	b0 c0       	rjmp	.+352    	; 0xe5a <vfprintf+0x3ae>
     cfa:	e9 2f       	mov	r30, r25
     cfc:	e0 61       	ori	r30, 0x10	; 16
     cfe:	be 2e       	mov	r11, r30
     d00:	b4 fe       	sbrs	r11, 4
     d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x272>
     d04:	fb 2d       	mov	r31, r11
     d06:	f4 60       	ori	r31, 0x04	; 4
     d08:	bf 2e       	mov	r11, r31
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x272>
     d0c:	34 fe       	sbrs	r3, 4
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <vfprintf+0x278>
     d10:	29 2f       	mov	r18, r25
     d12:	26 60       	ori	r18, 0x06	; 6
     d14:	b2 2e       	mov	r11, r18
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x278>
     d18:	28 e0       	ldi	r18, 0x08	; 8
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x27c>
     d1e:	20 e1       	ldi	r18, 0x10	; 16
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x27c>
     d24:	20 e1       	ldi	r18, 0x10	; 16
     d26:	32 e0       	ldi	r19, 0x02	; 2
     d28:	f8 01       	movw	r30, r16
     d2a:	b7 fe       	sbrs	r11, 7
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x290>
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0c 5f       	subi	r16, 0xFC	; 252
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x29c>
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	a3 01       	movw	r20, r6
     d4a:	0e 94 89 07 	call	0xf12	; 0xf12 <__ultoa_invert>
     d4e:	88 2e       	mov	r8, r24
     d50:	86 18       	sub	r8, r6
     d52:	fb 2d       	mov	r31, r11
     d54:	ff 77       	andi	r31, 0x7F	; 127
     d56:	3f 2e       	mov	r3, r31
     d58:	36 fe       	sbrs	r3, 6
     d5a:	0d c0       	rjmp	.+26     	; 0xd76 <vfprintf+0x2ca>
     d5c:	23 2d       	mov	r18, r3
     d5e:	2e 7f       	andi	r18, 0xFE	; 254
     d60:	a2 2e       	mov	r10, r18
     d62:	89 14       	cp	r8, r9
     d64:	58 f4       	brcc	.+22     	; 0xd7c <vfprintf+0x2d0>
     d66:	34 fe       	sbrs	r3, 4
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <vfprintf+0x2d4>
     d6a:	32 fc       	sbrc	r3, 2
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x2d4>
     d6e:	83 2d       	mov	r24, r3
     d70:	8e 7e       	andi	r24, 0xEE	; 238
     d72:	a8 2e       	mov	r10, r24
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <vfprintf+0x2d4>
     d76:	b8 2c       	mov	r11, r8
     d78:	a3 2c       	mov	r10, r3
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <vfprintf+0x2d6>
     d7c:	b8 2c       	mov	r11, r8
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <vfprintf+0x2d6>
     d80:	b9 2c       	mov	r11, r9
     d82:	a4 fe       	sbrs	r10, 4
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <vfprintf+0x2f8>
     d86:	fe 01       	movw	r30, r28
     d88:	e8 0d       	add	r30, r8
     d8a:	f1 1d       	adc	r31, r1
     d8c:	80 81       	ld	r24, Z
     d8e:	80 33       	cpi	r24, 0x30	; 48
     d90:	21 f4       	brne	.+8      	; 0xd9a <vfprintf+0x2ee>
     d92:	9a 2d       	mov	r25, r10
     d94:	99 7e       	andi	r25, 0xE9	; 233
     d96:	a9 2e       	mov	r10, r25
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vfprintf+0x300>
     d9a:	a2 fe       	sbrs	r10, 2
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x2fe>
     d9e:	b3 94       	inc	r11
     da0:	b3 94       	inc	r11
     da2:	04 c0       	rjmp	.+8      	; 0xdac <vfprintf+0x300>
     da4:	8a 2d       	mov	r24, r10
     da6:	86 78       	andi	r24, 0x86	; 134
     da8:	09 f0       	breq	.+2      	; 0xdac <vfprintf+0x300>
     daa:	b3 94       	inc	r11
     dac:	a3 fc       	sbrc	r10, 3
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <vfprintf+0x326>
     db0:	a0 fe       	sbrs	r10, 0
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <vfprintf+0x314>
     db4:	b2 14       	cp	r11, r2
     db6:	88 f4       	brcc	.+34     	; 0xdda <vfprintf+0x32e>
     db8:	28 0c       	add	r2, r8
     dba:	92 2c       	mov	r9, r2
     dbc:	9b 18       	sub	r9, r11
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <vfprintf+0x330>
     dc0:	b2 14       	cp	r11, r2
     dc2:	60 f4       	brcc	.+24     	; 0xddc <vfprintf+0x330>
     dc4:	b6 01       	movw	r22, r12
     dc6:	80 e2       	ldi	r24, 0x20	; 32
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     dce:	b3 94       	inc	r11
     dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <vfprintf+0x314>
     dd2:	b2 14       	cp	r11, r2
     dd4:	18 f4       	brcc	.+6      	; 0xddc <vfprintf+0x330>
     dd6:	2b 18       	sub	r2, r11
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x332>
     dda:	98 2c       	mov	r9, r8
     ddc:	21 2c       	mov	r2, r1
     dde:	a4 fe       	sbrs	r10, 4
     de0:	10 c0       	rjmp	.+32     	; 0xe02 <vfprintf+0x356>
     de2:	b6 01       	movw	r22, r12
     de4:	80 e3       	ldi	r24, 0x30	; 48
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     dec:	a2 fe       	sbrs	r10, 2
     dee:	17 c0       	rjmp	.+46     	; 0xe1e <vfprintf+0x372>
     df0:	a1 fc       	sbrc	r10, 1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <vfprintf+0x34e>
     df4:	88 e7       	ldi	r24, 0x78	; 120
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x352>
     dfa:	88 e5       	ldi	r24, 0x58	; 88
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b6 01       	movw	r22, r12
     e00:	0c c0       	rjmp	.+24     	; 0xe1a <vfprintf+0x36e>
     e02:	8a 2d       	mov	r24, r10
     e04:	86 78       	andi	r24, 0x86	; 134
     e06:	59 f0       	breq	.+22     	; 0xe1e <vfprintf+0x372>
     e08:	a1 fe       	sbrs	r10, 1
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x364>
     e0c:	8b e2       	ldi	r24, 0x2B	; 43
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <vfprintf+0x366>
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	a7 fc       	sbrc	r10, 7
     e14:	8d e2       	ldi	r24, 0x2D	; 45
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     e1e:	89 14       	cp	r8, r9
     e20:	38 f4       	brcc	.+14     	; 0xe30 <vfprintf+0x384>
     e22:	b6 01       	movw	r22, r12
     e24:	80 e3       	ldi	r24, 0x30	; 48
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     e2c:	9a 94       	dec	r9
     e2e:	f7 cf       	rjmp	.-18     	; 0xe1e <vfprintf+0x372>
     e30:	8a 94       	dec	r8
     e32:	f3 01       	movw	r30, r6
     e34:	e8 0d       	add	r30, r8
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
     e3a:	b6 01       	movw	r22, r12
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     e42:	81 10       	cpse	r8, r1
     e44:	f5 cf       	rjmp	.-22     	; 0xe30 <vfprintf+0x384>
     e46:	22 20       	and	r2, r2
     e48:	09 f4       	brne	.+2      	; 0xe4c <vfprintf+0x3a0>
     e4a:	42 ce       	rjmp	.-892    	; 0xad0 <vfprintf+0x24>
     e4c:	b6 01       	movw	r22, r12
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 4d 07 	call	0xe9a	; 0xe9a <fputc>
     e56:	2a 94       	dec	r2
     e58:	f6 cf       	rjmp	.-20     	; 0xe46 <vfprintf+0x39a>
     e5a:	f6 01       	movw	r30, r12
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	97 81       	ldd	r25, Z+7	; 0x07
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x3ba>
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	2b 96       	adiw	r28, 0x0b	; 11
     e68:	e2 e1       	ldi	r30, 0x12	; 18
     e6a:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__epilogue_restores__>

00000e6e <strnlen_P>:
     e6e:	fc 01       	movw	r30, r24
     e70:	05 90       	lpm	r0, Z+
     e72:	61 50       	subi	r22, 0x01	; 1
     e74:	70 40       	sbci	r23, 0x00	; 0
     e76:	01 10       	cpse	r0, r1
     e78:	d8 f7       	brcc	.-10     	; 0xe70 <strnlen_P+0x2>
     e7a:	80 95       	com	r24
     e7c:	90 95       	com	r25
     e7e:	8e 0f       	add	r24, r30
     e80:	9f 1f       	adc	r25, r31
     e82:	08 95       	ret

00000e84 <strnlen>:
     e84:	fc 01       	movw	r30, r24
     e86:	61 50       	subi	r22, 0x01	; 1
     e88:	70 40       	sbci	r23, 0x00	; 0
     e8a:	01 90       	ld	r0, Z+
     e8c:	01 10       	cpse	r0, r1
     e8e:	d8 f7       	brcc	.-10     	; 0xe86 <strnlen+0x2>
     e90:	80 95       	com	r24
     e92:	90 95       	com	r25
     e94:	8e 0f       	add	r24, r30
     e96:	9f 1f       	adc	r25, r31
     e98:	08 95       	ret

00000e9a <fputc>:
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	fb 01       	movw	r30, r22
     ea4:	23 81       	ldd	r18, Z+3	; 0x03
     ea6:	21 fd       	sbrc	r18, 1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <fputc+0x16>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	2c c0       	rjmp	.+88     	; 0xf08 <fputc+0x6e>
     eb0:	22 ff       	sbrs	r18, 2
     eb2:	16 c0       	rjmp	.+44     	; 0xee0 <fputc+0x46>
     eb4:	46 81       	ldd	r20, Z+6	; 0x06
     eb6:	57 81       	ldd	r21, Z+7	; 0x07
     eb8:	24 81       	ldd	r18, Z+4	; 0x04
     eba:	35 81       	ldd	r19, Z+5	; 0x05
     ebc:	42 17       	cp	r20, r18
     ebe:	53 07       	cpc	r21, r19
     ec0:	44 f4       	brge	.+16     	; 0xed2 <fputc+0x38>
     ec2:	a0 81       	ld	r26, Z
     ec4:	b1 81       	ldd	r27, Z+1	; 0x01
     ec6:	9d 01       	movw	r18, r26
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	31 83       	std	Z+1, r19	; 0x01
     ece:	20 83       	st	Z, r18
     ed0:	8c 93       	st	X, r24
     ed2:	26 81       	ldd	r18, Z+6	; 0x06
     ed4:	37 81       	ldd	r19, Z+7	; 0x07
     ed6:	2f 5f       	subi	r18, 0xFF	; 255
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	37 83       	std	Z+7, r19	; 0x07
     edc:	26 83       	std	Z+6, r18	; 0x06
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <fputc+0x6e>
     ee0:	8b 01       	movw	r16, r22
     ee2:	ec 01       	movw	r28, r24
     ee4:	fb 01       	movw	r30, r22
     ee6:	00 84       	ldd	r0, Z+8	; 0x08
     ee8:	f1 85       	ldd	r31, Z+9	; 0x09
     eea:	e0 2d       	mov	r30, r0
     eec:	09 95       	icall
     eee:	89 2b       	or	r24, r25
     ef0:	e1 f6       	brne	.-72     	; 0xeaa <fputc+0x10>
     ef2:	d8 01       	movw	r26, r16
     ef4:	16 96       	adiw	r26, 0x06	; 6
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	17 97       	sbiw	r26, 0x07	; 7
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	17 96       	adiw	r26, 0x07	; 7
     f00:	9c 93       	st	X, r25
     f02:	8e 93       	st	-X, r24
     f04:	16 97       	sbiw	r26, 0x06	; 6
     f06:	ce 01       	movw	r24, r28
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <__ultoa_invert>:
     f12:	fa 01       	movw	r30, r20
     f14:	aa 27       	eor	r26, r26
     f16:	28 30       	cpi	r18, 0x08	; 8
     f18:	51 f1       	breq	.+84     	; 0xf6e <__ultoa_invert+0x5c>
     f1a:	20 31       	cpi	r18, 0x10	; 16
     f1c:	81 f1       	breq	.+96     	; 0xf7e <__ultoa_invert+0x6c>
     f1e:	e8 94       	clt
     f20:	6f 93       	push	r22
     f22:	6e 7f       	andi	r22, 0xFE	; 254
     f24:	6e 5f       	subi	r22, 0xFE	; 254
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	af 4f       	sbci	r26, 0xFF	; 255
     f2e:	b1 e0       	ldi	r27, 0x01	; 1
     f30:	3e d0       	rcall	.+124    	; 0xfae <__ultoa_invert+0x9c>
     f32:	b4 e0       	ldi	r27, 0x04	; 4
     f34:	3c d0       	rcall	.+120    	; 0xfae <__ultoa_invert+0x9c>
     f36:	67 0f       	add	r22, r23
     f38:	78 1f       	adc	r23, r24
     f3a:	89 1f       	adc	r24, r25
     f3c:	9a 1f       	adc	r25, r26
     f3e:	a1 1d       	adc	r26, r1
     f40:	68 0f       	add	r22, r24
     f42:	79 1f       	adc	r23, r25
     f44:	8a 1f       	adc	r24, r26
     f46:	91 1d       	adc	r25, r1
     f48:	a1 1d       	adc	r26, r1
     f4a:	6a 0f       	add	r22, r26
     f4c:	71 1d       	adc	r23, r1
     f4e:	81 1d       	adc	r24, r1
     f50:	91 1d       	adc	r25, r1
     f52:	a1 1d       	adc	r26, r1
     f54:	20 d0       	rcall	.+64     	; 0xf96 <__ultoa_invert+0x84>
     f56:	09 f4       	brne	.+2      	; 0xf5a <__ultoa_invert+0x48>
     f58:	68 94       	set
     f5a:	3f 91       	pop	r19
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	26 9f       	mul	r18, r22
     f60:	11 24       	eor	r1, r1
     f62:	30 19       	sub	r19, r0
     f64:	30 5d       	subi	r19, 0xD0	; 208
     f66:	31 93       	st	Z+, r19
     f68:	de f6       	brtc	.-74     	; 0xf20 <__ultoa_invert+0xe>
     f6a:	cf 01       	movw	r24, r30
     f6c:	08 95       	ret
     f6e:	46 2f       	mov	r20, r22
     f70:	47 70       	andi	r20, 0x07	; 7
     f72:	40 5d       	subi	r20, 0xD0	; 208
     f74:	41 93       	st	Z+, r20
     f76:	b3 e0       	ldi	r27, 0x03	; 3
     f78:	0f d0       	rcall	.+30     	; 0xf98 <__ultoa_invert+0x86>
     f7a:	c9 f7       	brne	.-14     	; 0xf6e <__ultoa_invert+0x5c>
     f7c:	f6 cf       	rjmp	.-20     	; 0xf6a <__ultoa_invert+0x58>
     f7e:	46 2f       	mov	r20, r22
     f80:	4f 70       	andi	r20, 0x0F	; 15
     f82:	40 5d       	subi	r20, 0xD0	; 208
     f84:	4a 33       	cpi	r20, 0x3A	; 58
     f86:	18 f0       	brcs	.+6      	; 0xf8e <__ultoa_invert+0x7c>
     f88:	49 5d       	subi	r20, 0xD9	; 217
     f8a:	31 fd       	sbrc	r19, 1
     f8c:	40 52       	subi	r20, 0x20	; 32
     f8e:	41 93       	st	Z+, r20
     f90:	02 d0       	rcall	.+4      	; 0xf96 <__ultoa_invert+0x84>
     f92:	a9 f7       	brne	.-22     	; 0xf7e <__ultoa_invert+0x6c>
     f94:	ea cf       	rjmp	.-44     	; 0xf6a <__ultoa_invert+0x58>
     f96:	b4 e0       	ldi	r27, 0x04	; 4
     f98:	a6 95       	lsr	r26
     f9a:	97 95       	ror	r25
     f9c:	87 95       	ror	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	ba 95       	dec	r27
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__ultoa_invert+0x86>
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	61 05       	cpc	r22, r1
     faa:	71 05       	cpc	r23, r1
     fac:	08 95       	ret
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	0a 2e       	mov	r0, r26
     fb4:	06 94       	lsr	r0
     fb6:	57 95       	ror	r21
     fb8:	47 95       	ror	r20
     fba:	37 95       	ror	r19
     fbc:	27 95       	ror	r18
     fbe:	ba 95       	dec	r27
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0xa2>
     fc2:	62 0f       	add	r22, r18
     fc4:	73 1f       	adc	r23, r19
     fc6:	84 1f       	adc	r24, r20
     fc8:	95 1f       	adc	r25, r21
     fca:	a0 1d       	adc	r26, r0
     fcc:	08 95       	ret

00000fce <__prologue_saves__>:
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	4f 92       	push	r4
     fd4:	5f 92       	push	r5
     fd6:	6f 92       	push	r6
     fd8:	7f 92       	push	r7
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	ca 1b       	sub	r28, r26
     ff8:	db 0b       	sbc	r29, r27
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	09 94       	ijmp

00001006 <__epilogue_restores__>:
    1006:	2a 88       	ldd	r2, Y+18	; 0x12
    1008:	39 88       	ldd	r3, Y+17	; 0x11
    100a:	48 88       	ldd	r4, Y+16	; 0x10
    100c:	5f 84       	ldd	r5, Y+15	; 0x0f
    100e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1010:	7d 84       	ldd	r7, Y+13	; 0x0d
    1012:	8c 84       	ldd	r8, Y+12	; 0x0c
    1014:	9b 84       	ldd	r9, Y+11	; 0x0b
    1016:	aa 84       	ldd	r10, Y+10	; 0x0a
    1018:	b9 84       	ldd	r11, Y+9	; 0x09
    101a:	c8 84       	ldd	r12, Y+8	; 0x08
    101c:	df 80       	ldd	r13, Y+7	; 0x07
    101e:	ee 80       	ldd	r14, Y+6	; 0x06
    1020:	fd 80       	ldd	r15, Y+5	; 0x05
    1022:	0c 81       	ldd	r16, Y+4	; 0x04
    1024:	1b 81       	ldd	r17, Y+3	; 0x03
    1026:	aa 81       	ldd	r26, Y+2	; 0x02
    1028:	b9 81       	ldd	r27, Y+1	; 0x01
    102a:	ce 0f       	add	r28, r30
    102c:	d1 1d       	adc	r29, r1
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	ed 01       	movw	r28, r26
    103a:	08 95       	ret

0000103c <_exit>:
    103c:	f8 94       	cli

0000103e <__stop_program>:
    103e:	ff cf       	rjmp	.-2      	; 0x103e <__stop_program>
