
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035a  00800100  000015b6  0000164a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080045a  0080045a  000019a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038e2  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017db  00000000  00000000  00005656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b42  00000000  00000000  00006e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00008974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b80  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a7  00000000  00000000  00009cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000b053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_1>
       8:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_2>
       c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_3>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_7>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	14 e0       	ldi	r17, 0x04	; 4
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e6 eb       	ldi	r30, 0xB6	; 182
     260:	f5 e1       	ldi	r31, 0x15	; 21
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	aa 35       	cpi	r26, 0x5A	; 90
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	24 e0       	ldi	r18, 0x04	; 4
     270:	aa e5       	ldi	r26, 0x5A	; 90
     272:	b4 e0       	ldi	r27, 0x04	; 4
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	ab 36       	cpi	r26, 0x6B	; 107
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 3e 04 	call	0x87c	; 0x87c <main>
     282:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_drv_init>:
void adc_drv_init()
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
     28a:	81 b3       	in	r24, 0x11	; 17
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
     290:	8e b5       	in	r24, 0x2e	; 46
     292:	80 61       	ori	r24, 0x10	; 16
     294:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
     296:	8e b5       	in	r24, 0x2e	; 46
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
     29c:	8f b5       	in	r24, 0x2f	; 47
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
     2a2:	8f b5       	in	r24, 0x2f	; 47
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
     2a8:	8f b5       	in	r24, 0x2f	; 47
     2aa:	8f 77       	andi	r24, 0x7F	; 127
     2ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
     2ae:	8f b5       	in	r24, 0x2f	; 47
     2b0:	80 64       	ori	r24, 0x40	; 64
     2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
     2b4:	8f b5       	in	r24, 0x2f	; 47
     2b6:	8f 7d       	andi	r24, 0xDF	; 223
     2b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
     2ba:	8f b5       	in	r24, 0x2f	; 47
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8f bd       	out	0x2f, r24	; 47
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
     2c0:	8e b5       	in	r24, 0x2e	; 46
     2c2:	8b 7f       	andi	r24, 0xFB	; 251
     2c4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
     2c6:	8e b5       	in	r24, 0x2e	; 46
     2c8:	8d 7f       	andi	r24, 0xFD	; 253
     2ca:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
     2cc:	8e b5       	in	r24, 0x2e	; 46
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A &= ~(1 << FOC1A);
     2d2:	8f b5       	in	r24, 0x2f	; 47
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
     2d8:	8f b5       	in	r24, 0x2f	; 47
     2da:	8b 7f       	andi	r24, 0xFB	; 251
     2dc:	8f bd       	out	0x2f, r24	; 47
     2de:	08 95       	ret

000002e0 <adc_drv_fun_stick_get>:
}

fun_stick_t adc_drv_fun_stick_get()
{
	return last_fun_stick;
     2e0:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <last_fun_stick>
     2e4:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <last_fun_stick+0x1>
     2e8:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <last_fun_stick+0x2>
}
     2ec:	08 95       	ret

000002ee <adc_read>:
		}
	 else return false;
}

uint8_t adc_read(uint8_t channel)
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <adc_read+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <adc_read+0x8>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
     2fa:	19 82       	std	Y+1, r1	; 0x01
     2fc:	1a 82       	std	Y+2, r1	; 0x02
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
     302:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0xf95>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     306:	91 e3       	ldi	r25, 0x31	; 49
     308:	9a 95       	dec	r25
     30a:	f1 f7       	brne	.-4      	; 0x308 <adc_read+0x1a>
     30c:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	0c c0       	rjmp	.+24     	; 0x32c <adc_read+0x3e>
		adc_value[i] = adc[i];
     314:	f9 01       	movw	r30, r18
     316:	fc 5e       	subi	r31, 0xEC	; 236
     318:	90 81       	ld	r25, Z
     31a:	e1 e0       	ldi	r30, 0x01	; 1
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ec 0f       	add	r30, r28
     320:	fd 1f       	adc	r31, r29
     322:	e2 0f       	add	r30, r18
     324:	f3 1f       	adc	r31, r19
     326:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	24 30       	cpi	r18, 0x04	; 4
     32e:	31 05       	cpc	r19, r1
     330:	88 f3       	brcs	.-30     	; 0x314 <adc_read+0x26>
		adc_value[i] = adc[i];
	}

	return adc_value[channel];
     332:	e1 e0       	ldi	r30, 0x01	; 1
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ec 0f       	add	r30, r28
     338:	fd 1f       	adc	r31, r29
     33a:	e8 0f       	add	r30, r24
     33c:	f1 1d       	adc	r31, r1
     33e:	80 81       	ld	r24, Z
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     354:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     35e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <__data_end>
     362:	08 95       	ret

00000364 <adc_conv_js_val>:
}

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
     364:	86 17       	cp	r24, r22
     366:	a0 f0       	brcs	.+40     	; 0x390 <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
     368:	46 2f       	mov	r20, r22
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	28 2f       	mov	r18, r24
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	24 1b       	sub	r18, r20
     372:	35 0b       	sbc	r19, r21
     374:	64 e6       	ldi	r22, 0x64	; 100
     376:	62 9f       	mul	r22, r18
     378:	c0 01       	movw	r24, r0
     37a:	63 9f       	mul	r22, r19
     37c:	90 0d       	add	r25, r0
     37e:	11 24       	eor	r1, r1
     380:	6f ef       	ldi	r22, 0xFF	; 255
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	64 1b       	sub	r22, r20
     386:	75 0b       	sbc	r23, r21
     388:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divmodhi4>
     38c:	86 2f       	mov	r24, r22
     38e:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	26 1b       	sub	r18, r22
     398:	37 0b       	sbc	r19, r23
     39a:	44 e6       	ldi	r20, 0x64	; 100
     39c:	42 9f       	mul	r20, r18
     39e:	c0 01       	movw	r24, r0
     3a0:	43 9f       	mul	r20, r19
     3a2:	90 0d       	add	r25, r0
     3a4:	11 24       	eor	r1, r1
     3a6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divmodhi4>
     3aa:	86 2f       	mov	r24, r22
}
     3ac:	08 95       	ret

000003ae <pos_read>:

pos_t pos_read()
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
     3b2:	c0 91 5b 04 	lds	r28, 0x045B	; 0x80045b <offset_x>
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     3bc:	6c 2f       	mov	r22, r28
     3be:	0e 94 b2 01 	call	0x364	; 0x364 <adc_conv_js_val>
     3c2:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
     3c4:	d0 91 5a 04 	lds	r29, 0x045A	; 0x80045a <__data_end>
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     3ce:	6d 2f       	mov	r22, r29
     3d0:	0e 94 b2 01 	call	0x364	; 0x364 <adc_conv_js_val>
     3d4:	98 2f       	mov	r25, r24
	
	return positions;
}
     3d6:	8c 2f       	mov	r24, r28
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3de:	28 2f       	mov	r18, r24
     3e0:	8a 5b       	subi	r24, 0xBA	; 186
     3e2:	8d 38       	cpi	r24, 0x8D	; 141
     3e4:	48 f4       	brcc	.+18     	; 0x3f8 <dir_read+0x1a>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3e6:	89 2f       	mov	r24, r25
     3e8:	9a 5b       	subi	r25, 0xBA	; 186
     3ea:	9d 38       	cpi	r25, 0x8D	; 141
     3ec:	d8 f0       	brcs	.+54     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     3ee:	87 34       	cpi	r24, 0x47	; 71
     3f0:	dc f4       	brge	.+54     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     3f2:	86 34       	cpi	r24, 0x46	; 70
     3f4:	dc f0       	brlt	.+54     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
     3f6:	15 c0       	rjmp	.+42     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_DIR_THRESHOLD) {
     3f8:	27 34       	cpi	r18, 0x47	; 71
     3fa:	4c f0       	brlt	.+18     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     3fc:	89 2f       	mov	r24, r25
     3fe:	9a 5b       	subi	r25, 0xBA	; 186
     400:	9d 38       	cpi	r25, 0x8D	; 141
     402:	b0 f0       	brcs	.+44     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     404:	87 34       	cpi	r24, 0x47	; 71
     406:	b4 f4       	brge	.+44     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     408:	86 34       	cpi	r24, 0x46	; 70
     40a:	b4 f0       	brlt	.+44     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     40c:	0a c0       	rjmp	.+20     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_DIR_THRESHOLD) {
     40e:	26 34       	cpi	r18, 0x46	; 70
     410:	44 f4       	brge	.+16     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
     412:	89 2f       	mov	r24, r25
     414:	9a 5b       	subi	r25, 0xBA	; 186
     416:	9d 38       	cpi	r25, 0x8D	; 141
     418:	88 f0       	brcs	.+34     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
     41a:	87 34       	cpi	r24, 0x47	; 71
     41c:	8c f4       	brge	.+34     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
     41e:	86 34       	cpi	r24, 0x46	; 70
     420:	8c f0       	brlt	.+34     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			return DOWN_LEFT;
		}
	}
}
     422:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return NEUTRAL;
     424:	84 e0       	ldi	r24, 0x04	; 4
     426:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return RIGHT;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP_RIGHT;
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN_RIGHT;
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_DIR_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_DIR_THRESHOLD) {
			return LEFT;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_DIR_THRESHOLD) {
			return UP_LEFT;
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_DIR_THRESHOLD) {
			return DOWN_LEFT;
     444:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
     446:	08 95       	ret

00000448 <adc_drv_joystick_update>:
{
	return last_fun_stick;
}

bool adc_drv_joystick_update()
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
     44c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pos_read>
     450:	c8 2f       	mov	r28, r24
     452:	d9 2f       	mov	r29, r25
	current_fun_stick.direction = dir_read(current_fun_stick.position);
     454:	0e 94 ef 01 	call	0x3de	; 0x3de <dir_read>

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     458:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <last_fun_stick+0x2>
     45c:	89 13       	cpse	r24, r25
     45e:	28 c0       	rjmp	.+80     	; 0x4b0 <adc_drv_joystick_update+0x68>
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
     460:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <last_fun_stick>
     464:	2c 2f       	mov	r18, r28
     466:	0c 2e       	mov	r0, r28
     468:	00 0c       	add	r0, r0
     46a:	33 0b       	sbc	r19, r19
     46c:	29 1b       	sub	r18, r25
     46e:	31 09       	sbc	r19, r1
     470:	97 fd       	sbrc	r25, 7
     472:	33 95       	inc	r19
     474:	a9 01       	movw	r20, r18
     476:	33 23       	and	r19, r19
     478:	24 f4       	brge	.+8      	; 0x482 <adc_drv_joystick_update+0x3a>
     47a:	44 27       	eor	r20, r20
     47c:	55 27       	eor	r21, r21
     47e:	42 1b       	sub	r20, r18
     480:	53 0b       	sbc	r21, r19
{
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
     482:	44 30       	cpi	r20, 0x04	; 4
     484:	51 05       	cpc	r21, r1
     486:	a4 f4       	brge	.+40     	; 0x4b0 <adc_drv_joystick_update+0x68>
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
		(abs(current_fun_stick.position.Y - last_fun_stick.position.Y) >= ADC_JOYSTICK_POS_THRESHOLD)) {
     488:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <last_fun_stick+0x1>
     48c:	2d 2f       	mov	r18, r29
     48e:	0d 2e       	mov	r0, r29
     490:	00 0c       	add	r0, r0
     492:	33 0b       	sbc	r19, r19
     494:	29 1b       	sub	r18, r25
     496:	31 09       	sbc	r19, r1
     498:	97 fd       	sbrc	r25, 7
     49a:	33 95       	inc	r19
     49c:	a9 01       	movw	r20, r18
     49e:	33 23       	and	r19, r19
     4a0:	24 f4       	brge	.+8      	; 0x4aa <adc_drv_joystick_update+0x62>
     4a2:	44 27       	eor	r20, r20
     4a4:	55 27       	eor	r21, r21
     4a6:	42 1b       	sub	r20, r18
     4a8:	53 0b       	sbc	r21, r19
	fun_stick_t current_fun_stick;
	current_fun_stick.position = pos_read();
	current_fun_stick.direction = dir_read(current_fun_stick.position);

	if ((current_fun_stick.direction != last_fun_stick.direction) ||
		(abs(current_fun_stick.position.X - last_fun_stick.position.X) >= ADC_JOYSTICK_POS_THRESHOLD) ||
     4aa:	44 30       	cpi	r20, 0x04	; 4
     4ac:	51 05       	cpc	r21, r1
     4ae:	44 f0       	brlt	.+16     	; 0x4c0 <adc_drv_joystick_update+0x78>
		(abs(current_fun_stick.position.Y - last_fun_stick.position.Y) >= ADC_JOYSTICK_POS_THRESHOLD)) {
			last_fun_stick = current_fun_stick;
     4b0:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <last_fun_stick>
     4b4:	d0 93 62 04 	sts	0x0462, r29	; 0x800462 <last_fun_stick+0x1>
     4b8:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <last_fun_stick+0x2>
			return true;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <adc_drv_joystick_update+0x7a>
		}
	 else return false;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <slider_read>:
	}
}

uint8_t slider_read(uint8_t channel)
{
	return (100 * adc_read(channel) / ADC_MAX);
     4c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <adc_read>
     4cc:	24 e6       	ldi	r18, 0x64	; 100
     4ce:	82 9f       	mul	r24, r18
     4d0:	c0 01       	movw	r24, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	6f ef       	ldi	r22, 0xFF	; 255
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divmodhi4>
     4dc:	86 2f       	mov	r24, r22
}
     4de:	08 95       	ret

000004e0 <right_slider_update>:


bool right_slider_update()
{
	uint8_t current_right_slider_val = slider_read(RIGHT_SLIDER_CHANNEL);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <slider_read>

	if (abs(current_right_slider_val - last_right_slider_val) > ADC_SLIDER_THRESHOLD) {
     4e6:	28 2f       	mov	r18, r24
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <last_right_slider_val>
     4ee:	29 1b       	sub	r18, r25
     4f0:	31 09       	sbc	r19, r1
     4f2:	a9 01       	movw	r20, r18
     4f4:	22 f4       	brpl	.+8      	; 0x4fe <right_slider_update+0x1e>
     4f6:	44 27       	eor	r20, r20
     4f8:	55 27       	eor	r21, r21
     4fa:	42 1b       	sub	r20, r18
     4fc:	53 0b       	sbc	r21, r19
     4fe:	43 30       	cpi	r20, 0x03	; 3
     500:	51 05       	cpc	r21, r1
     502:	24 f0       	brlt	.+8      	; 0x50c <__stack+0xd>
		last_right_slider_val = current_right_slider_val;
     504:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <last_right_slider_val>
		return true;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	08 95       	ret
	}
	else return false;
     50c:	80 e0       	ldi	r24, 0x00	; 0
}
     50e:	08 95       	ret

00000510 <right_slider_get>:

uint8_t right_slider_get()
{
	return last_right_slider_val;
     510:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <last_right_slider_val>
     514:	08 95       	ret

00000516 <CAN_init>:
{
	CAN_interpret_status(MCP2515_read_status());
}

int8_t CAN_init()
{
     516:	cf 93       	push	r28
	// configure PD2 as input
	clear_bit(DDRD, CAN_INTERRUPT_PIN);
     518:	81 b3       	in	r24, 0x11	; 17
     51a:	8b 7f       	andi	r24, 0xFB	; 251
     51c:	81 bb       	out	0x11, r24	; 17
	// Disable global interrupts
	cli();
     51e:	f8 94       	cli
	// Enable interrupt INT0
	set_bit(GICR, CAN_INTERRUPT_ISR_REGISTER);
     520:	8b b7       	in	r24, 0x3b	; 59
     522:	80 64       	ori	r24, 0x40	; 64
     524:	8b bf       	out	0x3b, r24	; 59
	// Configure interrupt falling edge
	set_bit(MCUCR, ISC01);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	82 60       	ori	r24, 0x02	; 2
     52a:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	85 bf       	out	0x35, r24	; 53
	// Enable global interrupts
	sei();
     532:	78 94       	sei
	
	int8_t err = MCP2515_init();
     534:	0e 94 9a 04 	call	0x934	; 0x934 <MCP2515_init>
     538:	c8 2f       	mov	r28, r24
	if (err < 0) {
     53a:	88 23       	and	r24, r24
     53c:	34 f4       	brge	.+12     	; 0x54a <CAN_init+0x34>
		print_uart("error");
     53e:	85 ec       	ldi	r24, 0xC5	; 197
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		return err;
     546:	8c 2f       	mov	r24, r28
     548:	01 c0       	rjmp	.+2      	; 0x54c <CAN_init+0x36>
	}
	return 0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
}
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <CAN_send>:

int8_t CAN_send(CAN_msg msg)
{
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	2b 97       	sbiw	r28, 0x0b	; 11
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	e9 82       	std	Y+1, r14	; 0x01
     56e:	fa 82       	std	Y+2, r15	; 0x02
     570:	0b 83       	std	Y+3, r16	; 0x03
     572:	1c 83       	std	Y+4, r17	; 0x04
     574:	2d 83       	std	Y+5, r18	; 0x05
     576:	3e 83       	std	Y+6, r19	; 0x06
     578:	4f 83       	std	Y+7, r20	; 0x07
     57a:	58 87       	std	Y+8, r21	; 0x08
     57c:	69 87       	std	Y+9, r22	; 0x09
     57e:	7a 87       	std	Y+10, r23	; 0x0a
     580:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t ID_MSB = (0x7F8 & msg.ID) >> 3;
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	bc 01       	movw	r22, r24
     588:	68 7f       	andi	r22, 0xF8	; 248
     58a:	77 70       	andi	r23, 0x07	; 7
     58c:	76 95       	lsr	r23
     58e:	67 95       	ror	r22
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	76 95       	lsr	r23
     596:	67 95       	ror	r22
	uint8_t ID_LSB = (0x7 & msg.ID) << 5;
     598:	18 2f       	mov	r17, r24
     59a:	12 95       	swap	r17
     59c:	11 0f       	add	r17, r17
     59e:	10 7e       	andi	r17, 0xE0	; 224
	
	MCP2515_write(MCP_TXB0SIDH, ID_MSB);
     5a0:	81 e3       	ldi	r24, 0x31	; 49
     5a2:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, ID_LSB);
     5a6:	61 2f       	mov	r22, r17
     5a8:	82 e3       	ldi	r24, 0x32	; 50
     5aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	MCP2515_write(TXB0DLC, msg.length);
     5ae:	1b 81       	ldd	r17, Y+3	; 0x03
     5b0:	61 2f       	mov	r22, r17
     5b2:	85 e3       	ldi	r24, 0x35	; 53
     5b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
     5b8:	80 e3       	ldi	r24, 0x30	; 48
     5ba:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	if((buff0_status & 0x8) != 0x8) {
     5be:	83 fd       	sbrc	r24, 3
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <CAN_send+0xa6>
		if (msg.length > 8) {
     5c2:	19 30       	cpi	r17, 0x09	; 9
     5c4:	10 f0       	brcs	.+4      	; 0x5ca <CAN_send+0x7a>
			msg.length = 8;
     5c6:	88 e0       	ldi	r24, 0x08	; 8
     5c8:	8b 83       	std	Y+3, r24	; 0x03
	}
	return 0;
}

int8_t CAN_send(CAN_msg msg)
{
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <CAN_send+0x96>
		if (msg.length > 8) {
			msg.length = 8;
		}
		for(uint8_t i = 0; i < msg.length; i++)
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
     5ce:	e4 e0       	ldi	r30, 0x04	; 4
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	ec 0f       	add	r30, r28
     5d4:	fd 1f       	adc	r31, r29
     5d6:	e1 0f       	add	r30, r17
     5d8:	f1 1d       	adc	r31, r1
     5da:	60 81       	ld	r22, Z
     5dc:	86 e3       	ldi	r24, 0x36	; 54
     5de:	81 0f       	add	r24, r17
     5e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	uint8_t buff0_status = MCP2515_read(MCP_TXB0CTRL);
	if((buff0_status & 0x8) != 0x8) {
		if (msg.length > 8) {
			msg.length = 8;
		}
		for(uint8_t i = 0; i < msg.length; i++)
     5e4:	1f 5f       	subi	r17, 0xFF	; 255
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	18 17       	cp	r17, r24
     5ea:	88 f3       	brcs	.-30     	; 0x5ce <CAN_send+0x7e>
		{
			MCP2515_write(MCP_TXB0D0+i, msg.message[i]);
		}
		MCP2515_request_to_send(MCP_RTS_TX0);
     5ec:	81 e8       	ldi	r24, 0x81	; 129
     5ee:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <MCP2515_request_to_send>
		return 0;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	05 c0       	rjmp	.+10     	; 0x600 <CAN_send+0xb0>
	} else {
		print_uart("Buffer0 not available\r\n");
     5f6:	8b ec       	ldi	r24, 0xCB	; 203
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		return -1;
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
}
     600:	2b 96       	adiw	r28, 0x0b	; 11
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <CAN_receive>:

CAN_msg CAN_receive(uint8_t buffer)
{
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	00 d0       	rcall	.+0      	; 0x62a <CAN_receive+0x10>
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	6c 01       	movw	r12, r24
	CAN_msg rx_msg;
	uint8_t ID_MSB;
	uint8_t ID_LSB;
	uint8_t length;
	
	if (buffer == 0) {
     630:	61 11       	cpse	r22, r1
     632:	3d c0       	rjmp	.+122    	; 0x6ae <CAN_receive+0x94>
		ID_MSB = MCP2515_read(MCP_RXB0SIDH);
     634:	81 e6       	ldi	r24, 0x61	; 97
     636:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
     63a:	18 2f       	mov	r17, r24
		ID_LSB = MCP2515_read(MCP_RXB0SIDL);
     63c:	82 e6       	ldi	r24, 0x62	; 98
     63e:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
		
		ID_LSB = (ID_LSB & 0xE0) >> 5;
     642:	28 2f       	mov	r18, r24
     644:	22 95       	swap	r18
     646:	26 95       	lsr	r18
     648:	27 70       	andi	r18, 0x07	; 7
		rx_msg.ID = ID_MSB << 3;
     64a:	81 2f       	mov	r24, r17
     64c:	90 e0       	ldi	r25, 0x00	; 0
		rx_msg.ID = (rx_msg.ID & 0x7F8) | (ID_LSB & 0x7);
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	82 2b       	or	r24, r18
     65c:	f6 01       	movw	r30, r12
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24
		
		length = MCP2515_read(MCP_RXB0DLC);
     662:	85 e6       	ldi	r24, 0x65	; 101
     664:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
		rx_msg.length = (length & 0xF);
     668:	8f 70       	andi	r24, 0x0F	; 15
     66a:	f6 01       	movw	r30, r12
     66c:	82 83       	std	Z+2, r24	; 0x02
		if (rx_msg.length > 8) {
     66e:	89 30       	cpi	r24, 0x09	; 9
     670:	10 f0       	brcs	.+4      	; 0x676 <CAN_receive+0x5c>
			rx_msg.length = 8;
     672:	88 e0       	ldi	r24, 0x08	; 8
     674:	82 83       	std	Z+2, r24	; 0x02
	}
	
}

CAN_msg CAN_receive(uint8_t buffer)
{
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	12 c0       	rjmp	.+36     	; 0x69e <CAN_receive+0x84>
		if (rx_msg.length > 8) {
			rx_msg.length = 8;
		}
		
		for (uint8_t i=0; i < rx_msg.length; i++) {
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
     67a:	e1 2e       	mov	r14, r17
     67c:	f1 2c       	mov	r15, r1
     67e:	86 e6       	ldi	r24, 0x66	; 102
     680:	81 0f       	add	r24, r17
     682:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
     686:	f6 01       	movw	r30, r12
     688:	ee 0d       	add	r30, r14
     68a:	ff 1d       	adc	r31, r15
     68c:	83 83       	std	Z+3, r24	; 0x03
			char *temp_msg = rx_msg.message[i];
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9a 83       	std	Y+2, r25	; 0x02
     692:	89 83       	std	Y+1, r24	; 0x01
			print_uart(&temp_msg);
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		rx_msg.length = (length & 0xF);
		if (rx_msg.length > 8) {
			rx_msg.length = 8;
		}
		
		for (uint8_t i=0; i < rx_msg.length; i++) {
     69c:	1f 5f       	subi	r17, 0xFF	; 255
     69e:	f6 01       	movw	r30, r12
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	18 17       	cp	r17, r24
     6a4:	50 f3       	brcs	.-44     	; 0x67a <CAN_receive+0x60>
			rx_msg.message[i] = MCP2515_read(MCP_RXB0D0 + i);
			char *temp_msg = rx_msg.message[i];
			print_uart(&temp_msg);
		}
		print_uart("\r\n");
     6a6:	8e e4       	ldi	r24, 0x4E	; 78
     6a8:	94 e0       	ldi	r25, 0x04	; 4
     6aa:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	}
	return rx_msg;
}
     6ae:	c6 01       	movw	r24, r12
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	08 95       	ret

000006c4 <CAN_interpret_status>:

void CAN_interpret_status(uint8_t status)
{
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	2b 97       	sbiw	r28, 0x0b	; 11
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	18 2f       	mov	r17, r24
	uint8_t buffer;
	
	if (status & rx_buff_0_full) {
     6dc:	80 ff       	sbrs	r24, 0
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <CAN_interpret_status+0x2e>
		buffer = 0;
		CAN_receive(buffer);
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	0e 94 0d 03 	call	0x61a	; 0x61a <CAN_receive>
		print_uart("RX0 Full\r\n");
     6ea:	83 ee       	ldi	r24, 0xE3	; 227
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	}
	
	if (status & rx_buff_1_full) {
     6f2:	11 ff       	sbrs	r17, 1
     6f4:	09 c0       	rjmp	.+18     	; 0x708 <CAN_interpret_status+0x44>
		buffer = 1;
		CAN_receive(buffer);
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	0e 94 0d 03 	call	0x61a	; 0x61a <CAN_receive>
		print_uart("RX1 Full\r\n");
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	}
	
	if (status & tx_buff_0_busy) {
     708:	12 ff       	sbrs	r17, 2
     70a:	04 c0       	rjmp	.+8      	; 0x714 <CAN_interpret_status+0x50>
		buffer = 0;
		// Something is about to go down
		print_uart("TX0 Busy\r\n");
     70c:	89 ef       	ldi	r24, 0xF9	; 249
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	}
	
	if (status & tx_buff_0_empty) {
     714:	13 ff       	sbrs	r17, 3
     716:	04 c0       	rjmp	.+8      	; 0x720 <CAN_interpret_status+0x5c>
		buffer = 0;
		// Something else happens
		print_uart("TX0 Empty\r\n");
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	}
	MCP2515_write(MCP_CANINTF, 0x00);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	8c e2       	ldi	r24, 0x2C	; 44
     724:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
     728:	2b 96       	adiw	r28, 0x0b	; 11
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	08 95       	ret

0000073c <__vector_1>:
#include "CANdrv.h"

static uint8_t CANINT_status;

ISR (INT0_vect)
{
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	0f 92       	push	r0
     744:	11 24       	eor	r1, r1
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	CAN_interpret_status(MCP2515_read_status());
     75e:	0e 94 29 05 	call	0xa52	; 0xa52 <MCP2515_read_status>
     762:	0e 94 62 03 	call	0x6c4	; 0x6c4 <CAN_interpret_status>
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <init>:
#include "MCP2515/MCP2515drv.h"
#include "CAN/CANdrv.h"
#include "MISC/timer_counter.h"

void init() {
	USART_drv_init(MYUBRR);
     788:	8f e1       	ldi	r24, 0x1F	; 31
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 c4 07 	call	0xf88	; 0xf88 <USART_drv_init>
	SRAM_init();
     790:	0e 94 bd 07 	call	0xf7a	; 0xf7a <SRAM_init>
	adc_drv_init();
     794:	0e 94 45 01 	call	0x28a	; 0x28a <adc_drv_init>
	ext_button_drv_init();
     798:	0e 94 a8 05 	call	0xb50	; 0xb50 <ext_button_drv_init>
	adc_calibrate();
     79c:	0e 94 a7 01 	call	0x34e	; 0x34e <adc_calibrate>
	oled_init();
     7a0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_init>
	menu_init();
     7a4:	0e 94 e7 06 	call	0xdce	; 0xdce <menu_init>
	CAN_init();
     7a8:	0e 94 8b 02 	call	0x516	; 0x516 <CAN_init>
	timer_init();
     7ac:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer_init>
	print_uart("Program initialized\r\n");
     7b0:	80 e1       	ldi	r24, 0x10	; 16
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
     7b8:	08 95       	ret

000007ba <__vector_7>:
}

ISR (TIMER3_COMPA_vect) {
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	2b 97       	sbiw	r28, 0x0b	; 11
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	cd bf       	out	0x3d, r28	; 61
	if(adc_drv_joystick_update() || right_slider_update()){
     7f4:	0e 94 24 02 	call	0x448	; 0x448 <adc_drv_joystick_update>
     7f8:	81 11       	cpse	r24, r1
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <__vector_7+0x4a>
     7fc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <right_slider_update>
     800:	88 23       	and	r24, r24
     802:	f1 f0       	breq	.+60     	; 0x840 <__vector_7+0x86>
		fun_stick_t my_fun_stick = adc_drv_fun_stick_get();
     804:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_drv_fun_stick_get>
     808:	16 2f       	mov	r17, r22
     80a:	d8 2e       	mov	r13, r24
		uint8_t right_slider_val = right_slider_get();
     80c:	0e 94 88 02 	call	0x510	; 0x510 <right_slider_get>
		CAN_msg fun_stick_CAN_msg = {
     810:	fe 01       	movw	r30, r28
     812:	31 96       	adiw	r30, 0x01	; 1
     814:	9b e0       	ldi	r25, 0x0B	; 11
     816:	df 01       	movw	r26, r30
     818:	1d 92       	st	X+, r1
     81a:	9a 95       	dec	r25
     81c:	e9 f7       	brne	.-6      	; 0x818 <__vector_7+0x5e>
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	e9 2e       	mov	r14, r25
			.ID = 1,
			.length = 3,
			.message = {my_fun_stick.position.X, right_slider_val, my_fun_stick.direction}
		};
		CAN_send(fun_stick_CAN_msg);
     822:	f1 2c       	mov	r15, r1
     824:	03 e0       	ldi	r16, 0x03	; 3
     826:	28 2f       	mov	r18, r24
     828:	3d 2d       	mov	r19, r13
     82a:	4f 81       	ldd	r20, Y+7	; 0x07
     82c:	58 85       	ldd	r21, Y+8	; 0x08
     82e:	69 85       	ldd	r22, Y+9	; 0x09
     830:	7a 85       	ldd	r23, Y+10	; 0x0a
     832:	8b 85       	ldd	r24, Y+11	; 0x0b
     834:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_send>
		print_uart("Joystick sent\n\r");
     838:	86 e2       	ldi	r24, 0x26	; 38
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		//printf("X position: %d , right slider value: %d", my_fun_stick.position.X, right_slider_val);
	}
}
     840:	2b 96       	adiw	r28, 0x0b	; 11
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	bf 91       	pop	r27
     856:	af 91       	pop	r26
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	7f 91       	pop	r23
     85e:	6f 91       	pop	r22
     860:	5f 91       	pop	r21
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <main>:

int main(void)
{
	init();
     87c:	0e 94 c4 03 	call	0x788	; 0x788 <init>
	
    while (1){
		menu_navigate();
     880:	0e 94 9c 06 	call	0xd38	; 0xd38 <menu_navigate>
     884:	fd cf       	rjmp	.-6      	; 0x880 <main+0x4>

00000886 <MCP2515_read>:
	 }
	 return 0;
 }

uint8_t MCP2515_read(uint8_t read_register)
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	clear_bit(PORTB, PB4);
     88a:	88 b3       	in	r24, 0x18	; 24
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_READ);
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(read_register);
     896:	8c 2f       	mov	r24, r28
     898:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	result = SPI_read();
     89c:	0e 94 b8 07 	call	0xf70	; 0xf70 <SPI_read>
	
	set_bit(PORTB, PB4);
     8a0:	98 b3       	in	r25, 0x18	; 24
     8a2:	90 61       	ori	r25, 0x10	; 16
     8a4:	98 bb       	out	0x18, r25	; 24
	
	return result;
}
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <MCP2515_write>:

void MCP2515_write(uint8_t write_register, uint8_t data)
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	d8 2f       	mov	r29, r24
     8b0:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     8b2:	88 b3       	in	r24, 0x18	; 24
     8b4:	8f 7e       	andi	r24, 0xEF	; 239
     8b6:	88 bb       	out	0x18, r24	; 24

	SPI_write(MCP_WRITE);
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(write_register);
     8be:	8d 2f       	mov	r24, r29
     8c0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(data);
     8c4:	8c 2f       	mov	r24, r28
     8c6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>

	set_bit(PORTB, PB4);
     8ca:	88 b3       	in	r24, 0x18	; 24
     8cc:	80 61       	ori	r24, 0x10	; 16
     8ce:	88 bb       	out	0x18, r24	; 24
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <MCP2515_request_to_send>:

void MCP2515_request_to_send(uint8_t buffer)
{
	clear_bit(PORTB, PB4);
     8d6:	98 b3       	in	r25, 0x18	; 24
     8d8:	9f 7e       	andi	r25, 0xEF	; 239
     8da:	98 bb       	out	0x18, r25	; 24
	SPI_write(buffer);
     8dc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	set_bit(PORTB, PB4);
     8e0:	88 b3       	in	r24, 0x18	; 24
     8e2:	80 61       	ori	r24, 0x10	; 16
     8e4:	88 bb       	out	0x18, r24	; 24
     8e6:	08 95       	ret

000008e8 <MCP2515_bit_modify>:
}

void MCP2515_bit_modify(uint8_t write_register, uint8_t mask, uint8_t data)
{
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	18 2f       	mov	r17, r24
     8f0:	d6 2f       	mov	r29, r22
     8f2:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     8f4:	88 b3       	in	r24, 0x18	; 24
     8f6:	8f 7e       	andi	r24, 0xEF	; 239
     8f8:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(write_register);
     900:	81 2f       	mov	r24, r17
     902:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(mask);
     906:	8d 2f       	mov	r24, r29
     908:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	SPI_write(data);
     90c:	8c 2f       	mov	r24, r28
     90e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	
	set_bit(PORTB, PB4);
     912:	88 b3       	in	r24, 0x18	; 24
     914:	80 61       	ori	r24, 0x10	; 16
     916:	88 bb       	out	0x18, r24	; 24
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	08 95       	ret

00000920 <MCP2515_reset>:

void MCP2515_reset()
{
	clear_bit(PORTB, PB4);
     920:	88 b3       	in	r24, 0x18	; 24
     922:	8f 7e       	andi	r24, 0xEF	; 239
     924:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_RESET);
     926:	80 ec       	ldi	r24, 0xC0	; 192
     928:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	set_bit(PORTB, PB4);
     92c:	88 b3       	in	r24, 0x18	; 24
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	88 bb       	out	0x18, r24	; 24
     932:	08 95       	ret

00000934 <MCP2515_init>:
 */ 

#include "MCP2515drv.h"

int8_t MCP2515_init()
 {
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	 int value;
	 SPI_init(); // Initialize SPI
     938:	0e 94 a2 07 	call	0xf44	; 0xf44 <SPI_init>
	 MCP2515_reset(); // Send reset - command
     93c:	0e 94 90 04 	call	0x920	; 0x920 <MCP2515_reset>
	 // Self - test
	 value = MCP2515_read(MCP_CANSTAT);
     940:	8e e0       	ldi	r24, 0x0E	; 14
     942:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_CONFIG){
     946:	80 7e       	andi	r24, 0xE0	; 224
     948:	80 38       	cpi	r24, 0x80	; 128
     94a:	31 f0       	breq	.+12     	; 0x958 <MCP2515_init+0x24>
		 print_uart("MCP2515 is NOT in configuration mode after reset!\r\n");
     94c:	86 e3       	ldi	r24, 0x36	; 54
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -1;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	7a c0       	rjmp	.+244    	; 0xa4c <MCP2515_init+0x118>
	 }
	 
	 MCP2515_write(MCP_TXRTSCTRL, MCP_TXRTS_CONF);
     958:	67 e0       	ldi	r22, 0x07	; 7
     95a:	8d e0       	ldi	r24, 0x0D	; 13
     95c:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	 
	 // Receive buffer0 config: receive all messages, no overflow to RXB1.
	 MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0x60);
     960:	40 e6       	ldi	r20, 0x60	; 96
     962:	60 e6       	ldi	r22, 0x60	; 96
     964:	80 e6       	ldi	r24, 0x60	; 96
     966:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB0CTRL);
     96a:	80 e6       	ldi	r24, 0x60	; 96
     96c:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if (value != 0x60){
     970:	80 36       	cpi	r24, 0x60	; 96
     972:	31 f0       	breq	.+12     	; 0x980 <MCP2515_init+0x4c>
		 print_uart("Receive buffer 0 config incorrect!\r\n");
     974:	8a e6       	ldi	r24, 0x6A	; 106
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -2;
     97c:	8e ef       	ldi	r24, 0xFE	; 254
     97e:	66 c0       	rjmp	.+204    	; 0xa4c <MCP2515_init+0x118>
	 }
	 
	 // Receive buffer1 config: receive all messages.
	 MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0x60);
     980:	40 e6       	ldi	r20, 0x60	; 96
     982:	60 e6       	ldi	r22, 0x60	; 96
     984:	80 e7       	ldi	r24, 0x70	; 112
     986:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_RXB1CTRL);
     98a:	80 e7       	ldi	r24, 0x70	; 112
     98c:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
     990:	c8 2f       	mov	r28, r24
     992:	d0 e0       	ldi	r29, 0x00	; 0
	 print_uart(value);
     994:	ce 01       	movw	r24, r28
     996:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	 if (value != 0x60){
     99a:	c0 36       	cpi	r28, 0x60	; 96
     99c:	d1 05       	cpc	r29, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <MCP2515_init+0x78>
		 print_uart("Receive buffer 1 config incorrect!\r\n");
     9a0:	8f e8       	ldi	r24, 0x8F	; 143
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -3;
     9a8:	8d ef       	ldi	r24, 0xFD	; 253
     9aa:	50 c0       	rjmp	.+160    	; 0xa4c <MCP2515_init+0x118>
	 }	 
	 
	 // Interrupt config: msg error, error flag change, TX0 empty, RX0 full
	 //MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0xA5);
	 MCP2515_bit_modify(MCP_CANINTE, 0xFF, 0x5);
     9ac:	45 e0       	ldi	r20, 0x05	; 5
     9ae:	6f ef       	ldi	r22, 0xFF	; 255
     9b0:	8b e2       	ldi	r24, 0x2B	; 43
     9b2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CANINTE);
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if (value != 0x5){
     9bc:	85 30       	cpi	r24, 0x05	; 5
     9be:	31 f0       	breq	.+12     	; 0x9cc <MCP2515_init+0x98>
		 print_uart("Interrupt config incorrect!\r\n");
     9c0:	84 eb       	ldi	r24, 0xB4	; 180
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -4;
     9c8:	8c ef       	ldi	r24, 0xFC	; 252
     9ca:	40 c0       	rjmp	.+128    	; 0xa4c <MCP2515_init+0x118>
	 } 

	// set CAN baud rate prescaler
	 MCP2515_bit_modify(MCP_CNF1, MCP_BRP, MCP_BRP);
     9cc:	43 e0       	ldi	r20, 0x03	; 3
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	8a e2       	ldi	r24, 0x2A	; 42
     9d2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF1);
     9d6:	8a e2       	ldi	r24, 0x2A	; 42
     9d8:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if (value != MCP_BRP){
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	31 f0       	breq	.+12     	; 0x9ec <MCP2515_init+0xb8>
		 print_uart(" BRP incorrect!\r\n");
     9e0:	82 ed       	ldi	r24, 0xD2	; 210
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -5;
     9e8:	8b ef       	ldi	r24, 0xFB	; 251
     9ea:	30 c0       	rjmp	.+96     	; 0xa4c <MCP2515_init+0x118>
	 }

	// Config CAN bit timing
	 MCP2515_bit_modify(MCP_CNF2, 0xB1, 0xB1);
     9ec:	41 eb       	ldi	r20, 0xB1	; 177
     9ee:	61 eb       	ldi	r22, 0xB1	; 177
     9f0:	89 e2       	ldi	r24, 0x29	; 41
     9f2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF2);
     9f6:	89 e2       	ldi	r24, 0x29	; 41
     9f8:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if (value != 0xB1){
     9fc:	81 3b       	cpi	r24, 0xB1	; 177
     9fe:	31 f0       	breq	.+12     	; 0xa0c <MCP2515_init+0xd8>
		 print_uart(" CNF2 incorrect!\r\n");
     a00:	84 ee       	ldi	r24, 0xE4	; 228
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -6;
     a08:	8a ef       	ldi	r24, 0xFA	; 250
     a0a:	20 c0       	rjmp	.+64     	; 0xa4c <MCP2515_init+0x118>
	 }
	 
	 // Config CAN bit timing
	 MCP2515_bit_modify(MCP_CNF3, 0x5, 0x5);
     a0c:	45 e0       	ldi	r20, 0x05	; 5
     a0e:	65 e0       	ldi	r22, 0x05	; 5
     a10:	88 e2       	ldi	r24, 0x28	; 40
     a12:	0e 94 74 04 	call	0x8e8	; 0x8e8 <MCP2515_bit_modify>
	 value = MCP2515_read(MCP_CNF3);
     a16:	88 e2       	ldi	r24, 0x28	; 40
     a18:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if (value != 0x5){
     a1c:	85 30       	cpi	r24, 0x05	; 5
     a1e:	31 f0       	breq	.+12     	; 0xa2c <MCP2515_init+0xf8>
		 print_uart(" CNF2 incorrect!\r\n");
     a20:	84 ee       	ldi	r24, 0xE4	; 228
     a22:	93 e0       	ldi	r25, 0x03	; 3
     a24:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -7;
     a28:	89 ef       	ldi	r24, 0xF9	; 249
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <MCP2515_init+0x118>
	 }
	 
	 MCP2515_write(MCP_CANCTRL, MODE_NORMAL);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	8f e0       	ldi	r24, 0x0F	; 15
     a30:	0e 94 55 04 	call	0x8aa	; 0x8aa <MCP2515_write>
	 value = MCP2515_read(MCP_CANSTAT);
     a34:	8e e0       	ldi	r24, 0x0E	; 14
     a36:	0e 94 43 04 	call	0x886	; 0x886 <MCP2515_read>
	 if ((value & MODE_MASK) != MODE_NORMAL){
     a3a:	80 7e       	andi	r24, 0xE0	; 224
     a3c:	31 f0       	breq	.+12     	; 0xa4a <MCP2515_init+0x116>
		 print_uart(" MCP2515 is NOT in Normal mode!\r\n");
     a3e:	87 ef       	ldi	r24, 0xF7	; 247
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
		 return -8;
     a46:	88 ef       	ldi	r24, 0xF8	; 248
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <MCP2515_init+0x118>
	 }
	 return 0;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
 }
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <MCP2515_read_status>:

uint8_t MCP2515_read_status()
{
	uint8_t data;
	
	clear_bit(PORTB, PB4);
     a52:	88 b3       	in	r24, 0x18	; 24
     a54:	8f 7e       	andi	r24, 0xEF	; 239
     a56:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_READ_STATUS);
     a58:	80 ea       	ldi	r24, 0xA0	; 160
     a5a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <SPI_write>
	data = SPI_read();
     a5e:	0e 94 b8 07 	call	0xf70	; 0xf70 <SPI_read>
	data = SPI_read();
     a62:	0e 94 b8 07 	call	0xf70	; 0xf70 <SPI_read>
	set_bit(PORTB, PB4);
     a66:	98 b3       	in	r25, 0x18	; 24
     a68:	90 61       	ori	r25, 0x10	; 16
     a6a:	98 bb       	out	0x18, r25	; 24
	
	return data;
     a6c:	08 95       	ret

00000a6e <__vector_2>:
	.length = 2,
	.message = {0 ,0}
};

ISR (INT1_vect)
{
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
     a98:	89 e1       	ldi	r24, 0x19	; 25
     a9a:	94 e0       	ldi	r25, 0x04	; 4
     a9c:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	CAN_msg_btn.message[0] = 1;
     aa0:	e0 e0       	ldi	r30, 0x00	; 0
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	18 2f       	mov	r17, r24
     aa8:	83 83       	std	Z+3, r24	; 0x03
	CAN_msg_btn.message[1] = 1;
     aaa:	28 2f       	mov	r18, r24
     aac:	84 83       	std	Z+4, r24	; 0x04
	CAN_send(CAN_msg_btn);
     aae:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab2:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ab6:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     aba:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     abe:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     ac2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     ac6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
     aca:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
     ace:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     ad2:	0e 94 a8 02 	call	0x550	; 0x550 <CAN_send>
}
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_3>:

ISR (INT2_vect)
{
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
     b22:	80 e3       	ldi	r24, 0x30	; 48
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
	enter();
     b2a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <enter>
	
}
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	1f 90       	pop	r1
     b4e:	18 95       	reti

00000b50 <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
     b50:	81 b3       	in	r24, 0x11	; 17
     b52:	87 7f       	andi	r24, 0xF7	; 247
     b54:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
     b56:	86 b1       	in	r24, 0x06	; 6
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
     b5c:	f8 94       	cli
	// Enables interrupt on pin INT1
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
     b5e:	8b b7       	in	r24, 0x3b	; 59
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT1
	set_bit(MCUCR, ISC11);
     b64:	85 b7       	in	r24, 0x35	; 53
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
     b6a:	85 b7       	in	r24, 0x35	; 53
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
     b70:	8b b7       	in	r24, 0x3b	; 59
     b72:	8e 7f       	andi	r24, 0xFE	; 254
     b74:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
     b76:	86 b7       	in	r24, 0x36	; 54
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
     b7c:	8a b7       	in	r24, 0x3a	; 58
     b7e:	80 62       	ori	r24, 0x20	; 32
     b80:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
     b82:	8b b7       	in	r24, 0x3b	; 59
     b84:	80 62       	ori	r24, 0x20	; 32
     b86:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
     b88:	78 94       	sei
     b8a:	08 95       	ret

00000b8c <print_oled>:
#include "prints.h"

void print_oled(char* string){
	stdout = &stdout_oled;
     b8c:	29 e1       	ldi	r18, 0x19	; 25
     b8e:	31 e0       	ldi	r19, 0x01	; 1
     b90:	30 93 68 04 	sts	0x0468, r19	; 0x800468 <__iob+0x3>
     b94:	20 93 67 04 	sts	0x0467, r18	; 0x800467 <__iob+0x2>
	printf(string);
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	0e 94 fb 07 	call	0xff6	; 0xff6 <printf>
	
}void print_uart(char* string){
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	08 95       	ret

00000ba6 <print_uart>:
	stdout = &stdout_uart;
     ba6:	2b e0       	ldi	r18, 0x0B	; 11
     ba8:	31 e0       	ldi	r19, 0x01	; 1
     baa:	30 93 68 04 	sts	0x0468, r19	; 0x800468 <__iob+0x3>
     bae:	20 93 67 04 	sts	0x0467, r18	; 0x800467 <__iob+0x2>
	printf(string);
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	0e 94 fb 07 	call	0xff6	; 0xff6 <printf>
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	08 95       	ret

00000bc0 <timer_init>:
#include "prints.h"
#include "common_includes.h"

void timer_init() {
	// Compare output channel A, clear on compare match, ICR (Input Capture Register)
	TCCR3A = 0x40;
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	// ICR, prescaler = 1024
	TCCR3B = 0xD;
     bc6:	8d e0       	ldi	r24, 0x0D	; 13
     bc8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	// Enable output compare A match interrupt
	ETIMSK = 0x10;
     bcc:	80 e1       	ldi	r24, 0x10	; 16
     bce:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7fc07d>
	// Compare match on 96 (0x1D4)
	// Interrupt on: 1/(F_osc/prescaler)*Compare_match [sec]
	OCR3A = 0x1D4; // Interrupt every 98 ms
     bd2:	84 ed       	ldi	r24, 0xD4	; 212
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     bda:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     bde:	08 95       	ret

00000be0 <this_end>:
	.options = 2
};

void this_end()
{
	print_uart("hei \r\n");
     be0:	8a e4       	ldi	r24, 0x4A	; 74
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
     be8:	08 95       	ret

00000bea <that_end>:
}

void that_end()
{
	print_uart("hallo \r\n");
     bea:	81 e5       	ldi	r24, 0x51	; 81
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	0e 94 d3 05 	call	0xba6	; 0xba6 <print_uart>
     bf2:	08 95       	ret

00000bf4 <print_arrow>:
	last_dir = dir;
}

void print_arrow()
{
	oled_write_data(0x18);
     bf4:	88 e1       	ldi	r24, 0x18	; 24
     bf6:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
	oled_write_data(0x18);
     bfa:	88 e1       	ldi	r24, 0x18	; 24
     bfc:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
	oled_write_data(0x7E);
     c00:	8e e7       	ldi	r24, 0x7E	; 126
     c02:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
	oled_write_data(0x3C);
     c06:	8c e3       	ldi	r24, 0x3C	; 60
     c08:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
	oled_write_data(0x18);
     c0c:	88 e1       	ldi	r24, 0x18	; 24
     c0e:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
     c12:	08 95       	ret

00000c14 <print_menu_page>:
{
	print_uart("hallo \r\n");
}

void print_menu_page()
{
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	char *menu_page_title = current_menu->title;
     c1a:	c0 91 5d 04 	lds	r28, 0x045D	; 0x80045d <current_menu>
     c1e:	d0 91 5e 04 	lds	r29, 0x045E	; 0x80045e <current_menu+0x1>
	oled_reset();
     c22:	0e 94 1f 07 	call	0xe3e	; 0xe3e <oled_reset>
	oled_goto_line(0);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
	oled_goto_column(40);
     c2c:	88 e2       	ldi	r24, 0x28	; 40
     c2e:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
	print_oled(menu_page_title);
     c32:	ce 01       	movw	r24, r28
     c34:	0e 94 c6 05 	call	0xb8c	; 0xb8c <print_oled>
	
	for(uint8_t i = 0; i < current_menu->options; i++){
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	13 c0       	rjmp	.+38     	; 0xc62 <print_menu_page+0x4e>
		char *option = current_menu->submenu[i].option_name;
     c3c:	4c e1       	ldi	r20, 0x1C	; 28
     c3e:	48 9f       	mul	r20, r24
     c40:	e0 01       	movw	r28, r0
     c42:	49 9f       	mul	r20, r25
     c44:	d0 0d       	add	r29, r0
     c46:	11 24       	eor	r1, r1
     c48:	68 96       	adiw	r28, 0x18	; 24
     c4a:	c2 0f       	add	r28, r18
     c4c:	d3 1f       	adc	r29, r19
		oled_goto_line(i+1);
     c4e:	1f 5f       	subi	r17, 0xFF	; 255
     c50:	81 2f       	mov	r24, r17
     c52:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
		oled_goto_column(8);
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
		print_oled(option);
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <print_oled>
	oled_reset();
	oled_goto_line(0);
	oled_goto_column(40);
	print_oled(menu_page_title);
	
	for(uint8_t i = 0; i < current_menu->options; i++){
     c62:	81 2f       	mov	r24, r17
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <current_menu>
     c6a:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <current_menu+0x1>
     c6e:	f9 01       	movw	r30, r18
     c70:	e8 57       	subi	r30, 0x78	; 120
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	40 81       	ld	r20, Z
     c76:	51 81       	ldd	r21, Z+1	; 0x01
     c78:	84 17       	cp	r24, r20
     c7a:	95 07       	cpc	r25, r21
     c7c:	fc f2       	brlt	.-66     	; 0xc3c <print_menu_page+0x28>
		oled_goto_line(i+1);
		oled_goto_column(8);
		print_oled(option);
	}
	
	oled_pos(FIRST_LINE_MENU, 0);
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 13 07 	call	0xe26	; 0xe26 <oled_pos>
	print_arrow();
     c86:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <print_arrow>
	arrow_on_line = FIRST_LINE_MENU;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <arrow_on_line>
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	08 95       	ret

00000c98 <update_menu>:

void update_menu(void *menu_page)
{
	menu_struct *temp_menu_page = menu_page;
	current_menu = temp_menu_page;
     c98:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <current_menu+0x1>
     c9c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <current_menu>
	num_options_in_menu = temp_menu_page->options;
     ca0:	fc 01       	movw	r30, r24
     ca2:	e8 57       	subi	r30, 0x78	; 120
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	80 81       	ld	r24, Z
     ca8:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <num_options_in_menu>
	print_menu_page();
     cac:	0e 94 0a 06 	call	0xc14	; 0xc14 <print_menu_page>
     cb0:	08 95       	ret

00000cb2 <clear_arrow>:
	oled_write_data(0x3C);
	oled_write_data(0x18);
}

void clear_arrow()
{
     cb2:	cf 93       	push	r28
	for(uint8_t i = 0; i < 5; i++) oled_write_data(0x00);
     cb4:	c0 e0       	ldi	r28, 0x00	; 0
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <clear_arrow+0xe>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
     cbe:	cf 5f       	subi	r28, 0xFF	; 255
     cc0:	c5 30       	cpi	r28, 0x05	; 5
     cc2:	d0 f3       	brcs	.-12     	; 0xcb8 <clear_arrow+0x6>
}
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <move_arrow_up>:

void move_arrow_up()
{
	if(arrow_on_line > FIRST_LINE_MENU && arrow_on_line <= num_options_in_menu) {
     cc8:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <arrow_on_line>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	b8 f0       	brcs	.+46     	; 0xcfe <move_arrow_up+0x36>
     cd0:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <num_options_in_menu>
     cd4:	98 17       	cp	r25, r24
     cd6:	98 f0       	brcs	.+38     	; 0xcfe <move_arrow_up+0x36>
		oled_goto_line(arrow_on_line);
     cd8:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
		oled_goto_column(0);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
		clear_arrow();
     ce2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <clear_arrow>
		arrow_on_line--;
     ce6:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <arrow_on_line>
     cea:	81 50       	subi	r24, 0x01	; 1
     cec:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <arrow_on_line>
		oled_goto_line(arrow_on_line);
     cf0:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
		oled_goto_column(0);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
		print_arrow();
     cfa:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <print_arrow>
     cfe:	08 95       	ret

00000d00 <move_arrow_down>:
	}
}

void move_arrow_down()
{
	if(arrow_on_line >= FIRST_LINE_MENU && arrow_on_line < num_options_in_menu) {
     d00:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <arrow_on_line>
     d04:	88 23       	and	r24, r24
     d06:	b9 f0       	breq	.+46     	; 0xd36 <move_arrow_down+0x36>
     d08:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <num_options_in_menu>
     d0c:	89 17       	cp	r24, r25
     d0e:	98 f4       	brcc	.+38     	; 0xd36 <move_arrow_down+0x36>
		oled_goto_line(arrow_on_line);
     d10:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
		oled_goto_column(0);
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
		clear_arrow();
     d1a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <clear_arrow>
		arrow_on_line++;
     d1e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <arrow_on_line>
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <arrow_on_line>
		oled_goto_line(arrow_on_line);
     d28:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
		oled_goto_column(0);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
		print_arrow();
     d32:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <print_arrow>
     d36:	08 95       	ret

00000d38 <menu_navigate>:
	num_options_in_menu = temp_menu_page->options;
	print_menu_page();
}

void menu_navigate()
{	
     d38:	cf 93       	push	r28
	static dir_t last_dir;
	dir_t dir = dir_read(pos_read());
     d3a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pos_read>
     d3e:	0e 94 ef 01 	call	0x3de	; 0x3de <dir_read>
     d42:	c8 2f       	mov	r28, r24
	
	if(dir == DOWN && dir != last_dir) {
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	39 f4       	brne	.+14     	; 0xd56 <menu_navigate+0x1e>
     d48:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <last_dir.2332>
     d4c:	c8 17       	cp	r28, r24
     d4e:	19 f0       	breq	.+6      	; 0xd56 <menu_navigate+0x1e>
		move_arrow_down();
     d50:	0e 94 80 06 	call	0xd00	; 0xd00 <move_arrow_down>
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <menu_navigate+0x2c>
	}
	else if(dir == UP && dir != last_dir) {
     d56:	c2 30       	cpi	r28, 0x02	; 2
     d58:	29 f4       	brne	.+10     	; 0xd64 <menu_navigate+0x2c>
     d5a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <last_dir.2332>
     d5e:	c8 13       	cpse	r28, r24
		move_arrow_up();
     d60:	0e 94 64 06 	call	0xcc8	; 0xcc8 <move_arrow_up>
	}
	last_dir = dir;
     d64:	c0 93 5c 04 	sts	0x045C, r28	; 0x80045c <last_dir.2332>
}
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <enter>:
		print_arrow();
	}
}

void enter()
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	6c 97       	sbiw	r28, 0x1c	; 28
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
     d80:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <current_menu>
     d84:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <current_menu+0x1>
     d88:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <arrow_on_line>
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	31 09       	sbc	r19, r1
     d92:	4c e1       	ldi	r20, 0x1C	; 28
     d94:	42 9f       	mul	r20, r18
     d96:	c0 01       	movw	r24, r0
     d98:	43 9f       	mul	r20, r19
     d9a:	90 0d       	add	r25, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	78 96       	adiw	r30, 0x18	; 24
     da4:	8c e1       	ldi	r24, 0x1C	; 28
     da6:	de 01       	movw	r26, r28
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
     db2:	e9 8d       	ldd	r30, Y+25	; 0x19
     db4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dba:	09 95       	icall
}
     dbc:	6c 96       	adiw	r28, 0x1c	; 28
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <menu_init>:

void menu_init()
{
	main_menu.submenu[0].callback_parameter = &Sub_menu_1;
     dce:	e7 e2       	ldi	r30, 0x27	; 39
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	81 eb       	ldi	r24, 0xB1	; 177
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	93 ab       	std	Z+51, r25	; 0x33
     dd8:	82 ab       	std	Z+50, r24	; 0x32
	main_menu.submenu[1].callback_parameter = &Sub_menu_2;
     dda:	8b e3       	ldi	r24, 0x3B	; 59
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <main_menu+0x4f>
     de2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <main_menu+0x4e>
	Sub_menu_1.submenu[1].callback_parameter = &main_menu;
     de6:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <Sub_menu_1+0x4f>
     dea:	e0 93 ff 01 	sts	0x01FF, r30	; 0x8001ff <Sub_menu_1+0x4e>
	Sub_menu_2.submenu[1].callback_parameter = &main_menu;
     dee:	f0 93 8a 02 	sts	0x028A, r31	; 0x80028a <Sub_menu_2+0x4f>
     df2:	e0 93 89 02 	sts	0x0289, r30	; 0x800289 <Sub_menu_2+0x4e>
	update_menu(&main_menu);
     df6:	cf 01       	movw	r24, r30
     df8:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_menu>
     dfc:	08 95       	ret

00000dfe <oled_write_cmd>:
{
	oled_pos(line, 0);
	for(uint8_t i = 0; i<OLED_COLUMNS; i++) {
		oled_write_data(0x00);
	}
}
     dfe:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xb95>
     e02:	08 95       	ret

00000e04 <oled_goto_line>:
     e04:	80 55       	subi	r24, 0x50	; 80
     e06:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e0a:	08 95       	ret

00000e0c <oled_goto_column>:
     e0c:	cf 93       	push	r28
     e0e:	c8 2f       	mov	r28, r24
     e10:	c2 95       	swap	r28
     e12:	cf 70       	andi	r28, 0x0F	; 15
     e14:	8f 70       	andi	r24, 0x0F	; 15
     e16:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e1a:	8c 2f       	mov	r24, r28
     e1c:	80 61       	ori	r24, 0x10	; 16
     e1e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <oled_pos>:
     e26:	cf 93       	push	r28
     e28:	c6 2f       	mov	r28, r22
     e2a:	0e 94 02 07 	call	0xe04	; 0xe04 <oled_goto_line>
     e2e:	8c 2f       	mov	r24, r28
     e30:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_goto_column>
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <oled_write_data>:
     e38:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xd95>
     e3c:	08 95       	ret

00000e3e <oled_reset>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	d0 e0       	ldi	r29, 0x00	; 0
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <oled_reset+0x12>
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	c1 15       	cp	r28, r1
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	d8 07       	cpc	r29, r24
     e56:	c0 f3       	brcs	.-16     	; 0xe48 <oled_reset+0xa>
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <oled_init>:
     e5e:	8e ea       	ldi	r24, 0xAE	; 174
     e60:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e64:	81 ea       	ldi	r24, 0xA1	; 161
     e66:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e6a:	8a ed       	ldi	r24, 0xDA	; 218
     e6c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e70:	82 e1       	ldi	r24, 0x12	; 18
     e72:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e7c:	88 ea       	ldi	r24, 0xA8	; 168
     e7e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e82:	8f e3       	ldi	r24, 0x3F	; 63
     e84:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e88:	85 ed       	ldi	r24, 0xD5	; 213
     e8a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e8e:	80 e8       	ldi	r24, 0x80	; 128
     e90:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e94:	81 e8       	ldi	r24, 0x81	; 129
     e96:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ea0:	89 ed       	ldi	r24, 0xD9	; 217
     ea2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ea6:	81 e2       	ldi	r24, 0x21	; 33
     ea8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     eb8:	8b ed       	ldi	r24, 0xDB	; 219
     eba:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ebe:	80 e3       	ldi	r24, 0x30	; 48
     ec0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ec4:	8d ea       	ldi	r24, 0xAD	; 173
     ec6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ed0:	84 ea       	ldi	r24, 0xA4	; 164
     ed2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ed6:	86 ea       	ldi	r24, 0xA6	; 166
     ed8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     edc:	8f ea       	ldi	r24, 0xAF	; 175
     ede:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ee2:	81 e2       	ldi	r24, 0x21	; 33
     ee4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     ef4:	82 e2       	ldi	r24, 0x22	; 34
     ef6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_write_cmd>
     f06:	0e 94 1f 07 	call	0xe3e	; 0xe3e <oled_reset>
     f0a:	08 95       	ret

00000f0c <oled_print>:
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
}

void oled_print(char c)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	uint8_t font_index = c - 32;
     f10:	d0 ee       	ldi	r29, 0xE0	; 224
     f12:	d8 0f       	add	r29, r24

	for(uint8_t i = 0; i < 5; i++){
     f14:	c0 e0       	ldi	r28, 0x00	; 0
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <oled_print+0x2e>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
     f18:	8d 2f       	mov	r24, r29
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	ec 0f       	add	r30, r28
     f2c:	f1 1d       	adc	r31, r1
     f2e:	e0 59       	subi	r30, 0x90	; 144
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	84 91       	lpm	r24, Z
     f34:	0e 94 1c 07 	call	0xe38	; 0xe38 <oled_write_data>

void oled_print(char c)
{
	uint8_t font_index = c - 32;

	for(uint8_t i = 0; i < 5; i++){
     f38:	cf 5f       	subi	r28, 0xFF	; 255
     f3a:	c5 30       	cpi	r28, 0x05	; 5
     f3c:	68 f3       	brcs	.-38     	; 0xf18 <oled_print+0xc>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
	}
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <SPI_init>:

void SPI_init(void)
{
	/* Set PB4, MOSI and SCK output. By using "set_bit", we avoid configuring all other bits (?) */
	//DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
	set_bit(DDRB, DDB4);
     f44:	87 b3       	in	r24, 0x17	; 23
     f46:	80 61       	ori	r24, 0x10	; 16
     f48:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB5);
     f4a:	87 b3       	in	r24, 0x17	; 23
     f4c:	80 62       	ori	r24, 0x20	; 32
     f4e:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, DDB7);
     f50:	87 b3       	in	r24, 0x17	; 23
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     f56:	81 e5       	ldi	r24, 0x51	; 81
     f58:	8d b9       	out	0x0d, r24	; 13
	
	set_bit(PORTB, PB4);
     f5a:	88 b3       	in	r24, 0x18	; 24
     f5c:	80 61       	ori	r24, 0x10	; 16
     f5e:	88 bb       	out	0x18, r24	; 24
     f60:	08 95       	ret

00000f62 <SPI_transmit>:
}

void SPI_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     f62:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     f64:	77 9b       	sbis	0x0e, 7	; 14
     f66:	fe cf       	rjmp	.-4      	; 0xf64 <SPI_transmit+0x2>
	;
}
     f68:	08 95       	ret

00000f6a <SPI_write>:

void SPI_write(uint8_t data)
{
	SPI_transmit(data);
     f6a:	0e 94 b1 07 	call	0xf62	; 0xf62 <SPI_transmit>
     f6e:	08 95       	ret

00000f70 <SPI_read>:
}

uint8_t SPI_read()
{
	SPI_transmit(SPI_DUMMY_DATA);
     f70:	84 ef       	ldi	r24, 0xF4	; 244
     f72:	0e 94 b1 07 	call	0xf62	; 0xf62 <SPI_transmit>
	
	return SPDR;
     f76:	8f b1       	in	r24, 0x0f	; 15
     f78:	08 95       	ret

00000f7a <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
     f7a:	85 b7       	in	r24, 0x35	; 53
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
     f80:	80 b7       	in	r24, 0x30	; 48
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	80 bf       	out	0x30, r24	; 48
     f86:	08 95       	ret

00000f88 <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     f88:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f8a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f8c:	88 e1       	ldi	r24, 0x18	; 24
     f8e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f90:	8e e8       	ldi	r24, 0x8E	; 142
     f92:	80 bd       	out	0x20, r24	; 32
     f94:	08 95       	ret

00000f96 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     f96:	5d 9b       	sbis	0x0b, 5	; 11
     f98:	fe cf       	rjmp	.-4      	; 0xf96 <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     f9a:	8c b9       	out	0x0c, r24	; 12
     f9c:	08 95       	ret

00000f9e <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     f9e:	5f 9b       	sbis	0x0b, 7	; 11
     fa0:	fe cf       	rjmp	.-4      	; 0xf9e <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     fa2:	8c b1       	in	r24, 0x0c	; 12

}
     fa4:	08 95       	ret

00000fa6 <__divmodhi4>:
     fa6:	97 fb       	bst	r25, 7
     fa8:	07 2e       	mov	r0, r23
     faa:	16 f4       	brtc	.+4      	; 0xfb0 <__divmodhi4+0xa>
     fac:	00 94       	com	r0
     fae:	07 d0       	rcall	.+14     	; 0xfbe <__divmodhi4_neg1>
     fb0:	77 fd       	sbrc	r23, 7
     fb2:	09 d0       	rcall	.+18     	; 0xfc6 <__divmodhi4_neg2>
     fb4:	0e 94 e7 07 	call	0xfce	; 0xfce <__udivmodhi4>
     fb8:	07 fc       	sbrc	r0, 7
     fba:	05 d0       	rcall	.+10     	; 0xfc6 <__divmodhi4_neg2>
     fbc:	3e f4       	brtc	.+14     	; 0xfcc <__divmodhi4_exit>

00000fbe <__divmodhi4_neg1>:
     fbe:	90 95       	com	r25
     fc0:	81 95       	neg	r24
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	08 95       	ret

00000fc6 <__divmodhi4_neg2>:
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255

00000fcc <__divmodhi4_exit>:
     fcc:	08 95       	ret

00000fce <__udivmodhi4>:
     fce:	aa 1b       	sub	r26, r26
     fd0:	bb 1b       	sub	r27, r27
     fd2:	51 e1       	ldi	r21, 0x11	; 17
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <__udivmodhi4_ep>

00000fd6 <__udivmodhi4_loop>:
     fd6:	aa 1f       	adc	r26, r26
     fd8:	bb 1f       	adc	r27, r27
     fda:	a6 17       	cp	r26, r22
     fdc:	b7 07       	cpc	r27, r23
     fde:	10 f0       	brcs	.+4      	; 0xfe4 <__udivmodhi4_ep>
     fe0:	a6 1b       	sub	r26, r22
     fe2:	b7 0b       	sbc	r27, r23

00000fe4 <__udivmodhi4_ep>:
     fe4:	88 1f       	adc	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	5a 95       	dec	r21
     fea:	a9 f7       	brne	.-22     	; 0xfd6 <__udivmodhi4_loop>
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	08 95       	ret

00000ff6 <printf>:
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f8 e0       	ldi	r31, 0x08	; 8
     ffe:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__prologue_saves__+0x20>
    1002:	ae 01       	movw	r20, r28
    1004:	4b 5f       	subi	r20, 0xFB	; 251
    1006:	5f 4f       	sbci	r21, 0xFF	; 255
    1008:	fa 01       	movw	r30, r20
    100a:	61 91       	ld	r22, Z+
    100c:	71 91       	ld	r23, Z+
    100e:	af 01       	movw	r20, r30
    1010:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <__iob+0x2>
    1014:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__iob+0x3>
    1018:	0e 94 11 08 	call	0x1022	; 0x1022 <vfprintf>
    101c:	e2 e0       	ldi	r30, 0x02	; 2
    101e:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__epilogue_restores__+0x20>

00001022 <vfprintf>:
    1022:	ab e0       	ldi	r26, 0x0B	; 11
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e1       	ldi	r30, 0x17	; 23
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__prologue_saves__>
    102e:	6c 01       	movw	r12, r24
    1030:	7b 01       	movw	r14, r22
    1032:	8a 01       	movw	r16, r20
    1034:	fc 01       	movw	r30, r24
    1036:	17 82       	std	Z+7, r1	; 0x07
    1038:	16 82       	std	Z+6, r1	; 0x06
    103a:	83 81       	ldd	r24, Z+3	; 0x03
    103c:	81 ff       	sbrs	r24, 1
    103e:	cc c1       	rjmp	.+920    	; 0x13d8 <vfprintf+0x3b6>
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	3c 01       	movw	r6, r24
    1046:	f6 01       	movw	r30, r12
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	f7 01       	movw	r30, r14
    104c:	93 fd       	sbrc	r25, 3
    104e:	85 91       	lpm	r24, Z+
    1050:	93 ff       	sbrs	r25, 3
    1052:	81 91       	ld	r24, Z+
    1054:	7f 01       	movw	r14, r30
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <vfprintf+0x3a>
    105a:	ba c1       	rjmp	.+884    	; 0x13d0 <vfprintf+0x3ae>
    105c:	85 32       	cpi	r24, 0x25	; 37
    105e:	39 f4       	brne	.+14     	; 0x106e <vfprintf+0x4c>
    1060:	93 fd       	sbrc	r25, 3
    1062:	85 91       	lpm	r24, Z+
    1064:	93 ff       	sbrs	r25, 3
    1066:	81 91       	ld	r24, Z+
    1068:	7f 01       	movw	r14, r30
    106a:	85 32       	cpi	r24, 0x25	; 37
    106c:	29 f4       	brne	.+10     	; 0x1078 <vfprintf+0x56>
    106e:	b6 01       	movw	r22, r12
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    1076:	e7 cf       	rjmp	.-50     	; 0x1046 <vfprintf+0x24>
    1078:	91 2c       	mov	r9, r1
    107a:	21 2c       	mov	r2, r1
    107c:	31 2c       	mov	r3, r1
    107e:	ff e1       	ldi	r31, 0x1F	; 31
    1080:	f3 15       	cp	r31, r3
    1082:	d8 f0       	brcs	.+54     	; 0x10ba <vfprintf+0x98>
    1084:	8b 32       	cpi	r24, 0x2B	; 43
    1086:	79 f0       	breq	.+30     	; 0x10a6 <vfprintf+0x84>
    1088:	38 f4       	brcc	.+14     	; 0x1098 <vfprintf+0x76>
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	79 f0       	breq	.+30     	; 0x10ac <vfprintf+0x8a>
    108e:	83 32       	cpi	r24, 0x23	; 35
    1090:	a1 f4       	brne	.+40     	; 0x10ba <vfprintf+0x98>
    1092:	23 2d       	mov	r18, r3
    1094:	20 61       	ori	r18, 0x10	; 16
    1096:	1d c0       	rjmp	.+58     	; 0x10d2 <vfprintf+0xb0>
    1098:	8d 32       	cpi	r24, 0x2D	; 45
    109a:	61 f0       	breq	.+24     	; 0x10b4 <vfprintf+0x92>
    109c:	80 33       	cpi	r24, 0x30	; 48
    109e:	69 f4       	brne	.+26     	; 0x10ba <vfprintf+0x98>
    10a0:	23 2d       	mov	r18, r3
    10a2:	21 60       	ori	r18, 0x01	; 1
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <vfprintf+0xb0>
    10a6:	83 2d       	mov	r24, r3
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	38 2e       	mov	r3, r24
    10ac:	e3 2d       	mov	r30, r3
    10ae:	e4 60       	ori	r30, 0x04	; 4
    10b0:	3e 2e       	mov	r3, r30
    10b2:	2a c0       	rjmp	.+84     	; 0x1108 <vfprintf+0xe6>
    10b4:	f3 2d       	mov	r31, r3
    10b6:	f8 60       	ori	r31, 0x08	; 8
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <vfprintf+0xd2>
    10ba:	37 fc       	sbrc	r3, 7
    10bc:	2d c0       	rjmp	.+90     	; 0x1118 <vfprintf+0xf6>
    10be:	20 ed       	ldi	r18, 0xD0	; 208
    10c0:	28 0f       	add	r18, r24
    10c2:	2a 30       	cpi	r18, 0x0A	; 10
    10c4:	40 f0       	brcs	.+16     	; 0x10d6 <vfprintf+0xb4>
    10c6:	8e 32       	cpi	r24, 0x2E	; 46
    10c8:	b9 f4       	brne	.+46     	; 0x10f8 <vfprintf+0xd6>
    10ca:	36 fc       	sbrc	r3, 6
    10cc:	81 c1       	rjmp	.+770    	; 0x13d0 <vfprintf+0x3ae>
    10ce:	23 2d       	mov	r18, r3
    10d0:	20 64       	ori	r18, 0x40	; 64
    10d2:	32 2e       	mov	r3, r18
    10d4:	19 c0       	rjmp	.+50     	; 0x1108 <vfprintf+0xe6>
    10d6:	36 fe       	sbrs	r3, 6
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <vfprintf+0xc4>
    10da:	8a e0       	ldi	r24, 0x0A	; 10
    10dc:	98 9e       	mul	r9, r24
    10de:	20 0d       	add	r18, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	92 2e       	mov	r9, r18
    10e4:	11 c0       	rjmp	.+34     	; 0x1108 <vfprintf+0xe6>
    10e6:	ea e0       	ldi	r30, 0x0A	; 10
    10e8:	2e 9e       	mul	r2, r30
    10ea:	20 0d       	add	r18, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	22 2e       	mov	r2, r18
    10f0:	f3 2d       	mov	r31, r3
    10f2:	f0 62       	ori	r31, 0x20	; 32
    10f4:	3f 2e       	mov	r3, r31
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <vfprintf+0xe6>
    10f8:	8c 36       	cpi	r24, 0x6C	; 108
    10fa:	21 f4       	brne	.+8      	; 0x1104 <vfprintf+0xe2>
    10fc:	83 2d       	mov	r24, r3
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	38 2e       	mov	r3, r24
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0xe6>
    1104:	88 36       	cpi	r24, 0x68	; 104
    1106:	41 f4       	brne	.+16     	; 0x1118 <vfprintf+0xf6>
    1108:	f7 01       	movw	r30, r14
    110a:	93 fd       	sbrc	r25, 3
    110c:	85 91       	lpm	r24, Z+
    110e:	93 ff       	sbrs	r25, 3
    1110:	81 91       	ld	r24, Z+
    1112:	7f 01       	movw	r14, r30
    1114:	81 11       	cpse	r24, r1
    1116:	b3 cf       	rjmp	.-154    	; 0x107e <vfprintf+0x5c>
    1118:	98 2f       	mov	r25, r24
    111a:	9f 7d       	andi	r25, 0xDF	; 223
    111c:	95 54       	subi	r25, 0x45	; 69
    111e:	93 30       	cpi	r25, 0x03	; 3
    1120:	28 f4       	brcc	.+10     	; 0x112c <vfprintf+0x10a>
    1122:	0c 5f       	subi	r16, 0xFC	; 252
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	9f e3       	ldi	r25, 0x3F	; 63
    1128:	99 83       	std	Y+1, r25	; 0x01
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <vfprintf+0x124>
    112c:	83 36       	cpi	r24, 0x63	; 99
    112e:	31 f0       	breq	.+12     	; 0x113c <vfprintf+0x11a>
    1130:	83 37       	cpi	r24, 0x73	; 115
    1132:	71 f0       	breq	.+28     	; 0x1150 <vfprintf+0x12e>
    1134:	83 35       	cpi	r24, 0x53	; 83
    1136:	09 f0       	breq	.+2      	; 0x113a <vfprintf+0x118>
    1138:	59 c0       	rjmp	.+178    	; 0x11ec <vfprintf+0x1ca>
    113a:	21 c0       	rjmp	.+66     	; 0x117e <vfprintf+0x15c>
    113c:	f8 01       	movw	r30, r16
    113e:	80 81       	ld	r24, Z
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	0e 5f       	subi	r16, 0xFE	; 254
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	88 24       	eor	r8, r8
    1148:	83 94       	inc	r8
    114a:	91 2c       	mov	r9, r1
    114c:	53 01       	movw	r10, r6
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <vfprintf+0x154>
    1150:	28 01       	movw	r4, r16
    1152:	f2 e0       	ldi	r31, 0x02	; 2
    1154:	4f 0e       	add	r4, r31
    1156:	51 1c       	adc	r5, r1
    1158:	f8 01       	movw	r30, r16
    115a:	a0 80       	ld	r10, Z
    115c:	b1 80       	ldd	r11, Z+1	; 0x01
    115e:	36 fe       	sbrs	r3, 6
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <vfprintf+0x146>
    1162:	69 2d       	mov	r22, r9
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0x14a>
    1168:	6f ef       	ldi	r22, 0xFF	; 255
    116a:	7f ef       	ldi	r23, 0xFF	; 255
    116c:	c5 01       	movw	r24, r10
    116e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <strnlen>
    1172:	4c 01       	movw	r8, r24
    1174:	82 01       	movw	r16, r4
    1176:	f3 2d       	mov	r31, r3
    1178:	ff 77       	andi	r31, 0x7F	; 127
    117a:	3f 2e       	mov	r3, r31
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <vfprintf+0x188>
    117e:	28 01       	movw	r4, r16
    1180:	22 e0       	ldi	r18, 0x02	; 2
    1182:	42 0e       	add	r4, r18
    1184:	51 1c       	adc	r5, r1
    1186:	f8 01       	movw	r30, r16
    1188:	a0 80       	ld	r10, Z
    118a:	b1 80       	ldd	r11, Z+1	; 0x01
    118c:	36 fe       	sbrs	r3, 6
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <vfprintf+0x174>
    1190:	69 2d       	mov	r22, r9
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <vfprintf+0x178>
    1196:	6f ef       	ldi	r22, 0xFF	; 255
    1198:	7f ef       	ldi	r23, 0xFF	; 255
    119a:	c5 01       	movw	r24, r10
    119c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <strnlen_P>
    11a0:	4c 01       	movw	r8, r24
    11a2:	f3 2d       	mov	r31, r3
    11a4:	f0 68       	ori	r31, 0x80	; 128
    11a6:	3f 2e       	mov	r3, r31
    11a8:	82 01       	movw	r16, r4
    11aa:	33 fc       	sbrc	r3, 3
    11ac:	1b c0       	rjmp	.+54     	; 0x11e4 <vfprintf+0x1c2>
    11ae:	82 2d       	mov	r24, r2
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	88 16       	cp	r8, r24
    11b4:	99 06       	cpc	r9, r25
    11b6:	b0 f4       	brcc	.+44     	; 0x11e4 <vfprintf+0x1c2>
    11b8:	b6 01       	movw	r22, r12
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    11c2:	2a 94       	dec	r2
    11c4:	f4 cf       	rjmp	.-24     	; 0x11ae <vfprintf+0x18c>
    11c6:	f5 01       	movw	r30, r10
    11c8:	37 fc       	sbrc	r3, 7
    11ca:	85 91       	lpm	r24, Z+
    11cc:	37 fe       	sbrs	r3, 7
    11ce:	81 91       	ld	r24, Z+
    11d0:	5f 01       	movw	r10, r30
    11d2:	b6 01       	movw	r22, r12
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    11da:	21 10       	cpse	r2, r1
    11dc:	2a 94       	dec	r2
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	82 1a       	sub	r8, r18
    11e2:	91 08       	sbc	r9, r1
    11e4:	81 14       	cp	r8, r1
    11e6:	91 04       	cpc	r9, r1
    11e8:	71 f7       	brne	.-36     	; 0x11c6 <vfprintf+0x1a4>
    11ea:	e8 c0       	rjmp	.+464    	; 0x13bc <vfprintf+0x39a>
    11ec:	84 36       	cpi	r24, 0x64	; 100
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <vfprintf+0x1d2>
    11f0:	89 36       	cpi	r24, 0x69	; 105
    11f2:	41 f5       	brne	.+80     	; 0x1244 <vfprintf+0x222>
    11f4:	f8 01       	movw	r30, r16
    11f6:	37 fe       	sbrs	r3, 7
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <vfprintf+0x1e6>
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	0c 5f       	subi	r16, 0xFC	; 252
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	08 c0       	rjmp	.+16     	; 0x1218 <vfprintf+0x1f6>
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	07 2e       	mov	r0, r23
    120e:	00 0c       	add	r0, r0
    1210:	88 0b       	sbc	r24, r24
    1212:	99 0b       	sbc	r25, r25
    1214:	0e 5f       	subi	r16, 0xFE	; 254
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	f3 2d       	mov	r31, r3
    121a:	ff 76       	andi	r31, 0x6F	; 111
    121c:	3f 2e       	mov	r3, r31
    121e:	97 ff       	sbrs	r25, 7
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <vfprintf+0x212>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	f0 68       	ori	r31, 0x80	; 128
    1232:	3f 2e       	mov	r3, r31
    1234:	2a e0       	ldi	r18, 0x0A	; 10
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	a3 01       	movw	r20, r6
    123a:	0e 94 44 0a 	call	0x1488	; 0x1488 <__ultoa_invert>
    123e:	88 2e       	mov	r8, r24
    1240:	86 18       	sub	r8, r6
    1242:	45 c0       	rjmp	.+138    	; 0x12ce <vfprintf+0x2ac>
    1244:	85 37       	cpi	r24, 0x75	; 117
    1246:	31 f4       	brne	.+12     	; 0x1254 <vfprintf+0x232>
    1248:	23 2d       	mov	r18, r3
    124a:	2f 7e       	andi	r18, 0xEF	; 239
    124c:	b2 2e       	mov	r11, r18
    124e:	2a e0       	ldi	r18, 0x0A	; 10
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	25 c0       	rjmp	.+74     	; 0x129e <vfprintf+0x27c>
    1254:	93 2d       	mov	r25, r3
    1256:	99 7f       	andi	r25, 0xF9	; 249
    1258:	b9 2e       	mov	r11, r25
    125a:	8f 36       	cpi	r24, 0x6F	; 111
    125c:	c1 f0       	breq	.+48     	; 0x128e <vfprintf+0x26c>
    125e:	18 f4       	brcc	.+6      	; 0x1266 <vfprintf+0x244>
    1260:	88 35       	cpi	r24, 0x58	; 88
    1262:	79 f0       	breq	.+30     	; 0x1282 <vfprintf+0x260>
    1264:	b5 c0       	rjmp	.+362    	; 0x13d0 <vfprintf+0x3ae>
    1266:	80 37       	cpi	r24, 0x70	; 112
    1268:	19 f0       	breq	.+6      	; 0x1270 <vfprintf+0x24e>
    126a:	88 37       	cpi	r24, 0x78	; 120
    126c:	21 f0       	breq	.+8      	; 0x1276 <vfprintf+0x254>
    126e:	b0 c0       	rjmp	.+352    	; 0x13d0 <vfprintf+0x3ae>
    1270:	e9 2f       	mov	r30, r25
    1272:	e0 61       	ori	r30, 0x10	; 16
    1274:	be 2e       	mov	r11, r30
    1276:	b4 fe       	sbrs	r11, 4
    1278:	0d c0       	rjmp	.+26     	; 0x1294 <vfprintf+0x272>
    127a:	fb 2d       	mov	r31, r11
    127c:	f4 60       	ori	r31, 0x04	; 4
    127e:	bf 2e       	mov	r11, r31
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <vfprintf+0x272>
    1282:	34 fe       	sbrs	r3, 4
    1284:	0a c0       	rjmp	.+20     	; 0x129a <vfprintf+0x278>
    1286:	29 2f       	mov	r18, r25
    1288:	26 60       	ori	r18, 0x06	; 6
    128a:	b2 2e       	mov	r11, r18
    128c:	06 c0       	rjmp	.+12     	; 0x129a <vfprintf+0x278>
    128e:	28 e0       	ldi	r18, 0x08	; 8
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	05 c0       	rjmp	.+10     	; 0x129e <vfprintf+0x27c>
    1294:	20 e1       	ldi	r18, 0x10	; 16
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x27c>
    129a:	20 e1       	ldi	r18, 0x10	; 16
    129c:	32 e0       	ldi	r19, 0x02	; 2
    129e:	f8 01       	movw	r30, r16
    12a0:	b7 fe       	sbrs	r11, 7
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <vfprintf+0x290>
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	0c 5f       	subi	r16, 0xFC	; 252
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <vfprintf+0x29c>
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 5f       	subi	r16, 0xFE	; 254
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	a3 01       	movw	r20, r6
    12c0:	0e 94 44 0a 	call	0x1488	; 0x1488 <__ultoa_invert>
    12c4:	88 2e       	mov	r8, r24
    12c6:	86 18       	sub	r8, r6
    12c8:	fb 2d       	mov	r31, r11
    12ca:	ff 77       	andi	r31, 0x7F	; 127
    12cc:	3f 2e       	mov	r3, r31
    12ce:	36 fe       	sbrs	r3, 6
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <vfprintf+0x2ca>
    12d2:	23 2d       	mov	r18, r3
    12d4:	2e 7f       	andi	r18, 0xFE	; 254
    12d6:	a2 2e       	mov	r10, r18
    12d8:	89 14       	cp	r8, r9
    12da:	58 f4       	brcc	.+22     	; 0x12f2 <vfprintf+0x2d0>
    12dc:	34 fe       	sbrs	r3, 4
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <vfprintf+0x2d4>
    12e0:	32 fc       	sbrc	r3, 2
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <vfprintf+0x2d4>
    12e4:	83 2d       	mov	r24, r3
    12e6:	8e 7e       	andi	r24, 0xEE	; 238
    12e8:	a8 2e       	mov	r10, r24
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <vfprintf+0x2d4>
    12ec:	b8 2c       	mov	r11, r8
    12ee:	a3 2c       	mov	r10, r3
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <vfprintf+0x2d6>
    12f2:	b8 2c       	mov	r11, r8
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <vfprintf+0x2d6>
    12f6:	b9 2c       	mov	r11, r9
    12f8:	a4 fe       	sbrs	r10, 4
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <vfprintf+0x2f8>
    12fc:	fe 01       	movw	r30, r28
    12fe:	e8 0d       	add	r30, r8
    1300:	f1 1d       	adc	r31, r1
    1302:	80 81       	ld	r24, Z
    1304:	80 33       	cpi	r24, 0x30	; 48
    1306:	21 f4       	brne	.+8      	; 0x1310 <vfprintf+0x2ee>
    1308:	9a 2d       	mov	r25, r10
    130a:	99 7e       	andi	r25, 0xE9	; 233
    130c:	a9 2e       	mov	r10, r25
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <vfprintf+0x300>
    1310:	a2 fe       	sbrs	r10, 2
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <vfprintf+0x2fe>
    1314:	b3 94       	inc	r11
    1316:	b3 94       	inc	r11
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <vfprintf+0x300>
    131a:	8a 2d       	mov	r24, r10
    131c:	86 78       	andi	r24, 0x86	; 134
    131e:	09 f0       	breq	.+2      	; 0x1322 <vfprintf+0x300>
    1320:	b3 94       	inc	r11
    1322:	a3 fc       	sbrc	r10, 3
    1324:	11 c0       	rjmp	.+34     	; 0x1348 <vfprintf+0x326>
    1326:	a0 fe       	sbrs	r10, 0
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <vfprintf+0x314>
    132a:	b2 14       	cp	r11, r2
    132c:	88 f4       	brcc	.+34     	; 0x1350 <vfprintf+0x32e>
    132e:	28 0c       	add	r2, r8
    1330:	92 2c       	mov	r9, r2
    1332:	9b 18       	sub	r9, r11
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <vfprintf+0x330>
    1336:	b2 14       	cp	r11, r2
    1338:	60 f4       	brcc	.+24     	; 0x1352 <vfprintf+0x330>
    133a:	b6 01       	movw	r22, r12
    133c:	80 e2       	ldi	r24, 0x20	; 32
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    1344:	b3 94       	inc	r11
    1346:	f7 cf       	rjmp	.-18     	; 0x1336 <vfprintf+0x314>
    1348:	b2 14       	cp	r11, r2
    134a:	18 f4       	brcc	.+6      	; 0x1352 <vfprintf+0x330>
    134c:	2b 18       	sub	r2, r11
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x332>
    1350:	98 2c       	mov	r9, r8
    1352:	21 2c       	mov	r2, r1
    1354:	a4 fe       	sbrs	r10, 4
    1356:	10 c0       	rjmp	.+32     	; 0x1378 <vfprintf+0x356>
    1358:	b6 01       	movw	r22, r12
    135a:	80 e3       	ldi	r24, 0x30	; 48
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    1362:	a2 fe       	sbrs	r10, 2
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <vfprintf+0x372>
    1366:	a1 fc       	sbrc	r10, 1
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x34e>
    136a:	88 e7       	ldi	r24, 0x78	; 120
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x352>
    1370:	88 e5       	ldi	r24, 0x58	; 88
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	b6 01       	movw	r22, r12
    1376:	0c c0       	rjmp	.+24     	; 0x1390 <vfprintf+0x36e>
    1378:	8a 2d       	mov	r24, r10
    137a:	86 78       	andi	r24, 0x86	; 134
    137c:	59 f0       	breq	.+22     	; 0x1394 <vfprintf+0x372>
    137e:	a1 fe       	sbrs	r10, 1
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x364>
    1382:	8b e2       	ldi	r24, 0x2B	; 43
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <vfprintf+0x366>
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	a7 fc       	sbrc	r10, 7
    138a:	8d e2       	ldi	r24, 0x2D	; 45
    138c:	b6 01       	movw	r22, r12
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    1394:	89 14       	cp	r8, r9
    1396:	38 f4       	brcc	.+14     	; 0x13a6 <vfprintf+0x384>
    1398:	b6 01       	movw	r22, r12
    139a:	80 e3       	ldi	r24, 0x30	; 48
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    13a2:	9a 94       	dec	r9
    13a4:	f7 cf       	rjmp	.-18     	; 0x1394 <vfprintf+0x372>
    13a6:	8a 94       	dec	r8
    13a8:	f3 01       	movw	r30, r6
    13aa:	e8 0d       	add	r30, r8
    13ac:	f1 1d       	adc	r31, r1
    13ae:	80 81       	ld	r24, Z
    13b0:	b6 01       	movw	r22, r12
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    13b8:	81 10       	cpse	r8, r1
    13ba:	f5 cf       	rjmp	.-22     	; 0x13a6 <vfprintf+0x384>
    13bc:	22 20       	and	r2, r2
    13be:	09 f4       	brne	.+2      	; 0x13c2 <vfprintf+0x3a0>
    13c0:	42 ce       	rjmp	.-892    	; 0x1046 <vfprintf+0x24>
    13c2:	b6 01       	movw	r22, r12
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 08 0a 	call	0x1410	; 0x1410 <fputc>
    13cc:	2a 94       	dec	r2
    13ce:	f6 cf       	rjmp	.-20     	; 0x13bc <vfprintf+0x39a>
    13d0:	f6 01       	movw	r30, r12
    13d2:	86 81       	ldd	r24, Z+6	; 0x06
    13d4:	97 81       	ldd	r25, Z+7	; 0x07
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <vfprintf+0x3ba>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    13dc:	2b 96       	adiw	r28, 0x0b	; 11
    13de:	e2 e1       	ldi	r30, 0x12	; 18
    13e0:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__epilogue_restores__>

000013e4 <strnlen_P>:
    13e4:	fc 01       	movw	r30, r24
    13e6:	05 90       	lpm	r0, Z+
    13e8:	61 50       	subi	r22, 0x01	; 1
    13ea:	70 40       	sbci	r23, 0x00	; 0
    13ec:	01 10       	cpse	r0, r1
    13ee:	d8 f7       	brcc	.-10     	; 0x13e6 <strnlen_P+0x2>
    13f0:	80 95       	com	r24
    13f2:	90 95       	com	r25
    13f4:	8e 0f       	add	r24, r30
    13f6:	9f 1f       	adc	r25, r31
    13f8:	08 95       	ret

000013fa <strnlen>:
    13fa:	fc 01       	movw	r30, r24
    13fc:	61 50       	subi	r22, 0x01	; 1
    13fe:	70 40       	sbci	r23, 0x00	; 0
    1400:	01 90       	ld	r0, Z+
    1402:	01 10       	cpse	r0, r1
    1404:	d8 f7       	brcc	.-10     	; 0x13fc <strnlen+0x2>
    1406:	80 95       	com	r24
    1408:	90 95       	com	r25
    140a:	8e 0f       	add	r24, r30
    140c:	9f 1f       	adc	r25, r31
    140e:	08 95       	ret

00001410 <fputc>:
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	fb 01       	movw	r30, r22
    141a:	23 81       	ldd	r18, Z+3	; 0x03
    141c:	21 fd       	sbrc	r18, 1
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <fputc+0x16>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	2c c0       	rjmp	.+88     	; 0x147e <fputc+0x6e>
    1426:	22 ff       	sbrs	r18, 2
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <fputc+0x46>
    142a:	46 81       	ldd	r20, Z+6	; 0x06
    142c:	57 81       	ldd	r21, Z+7	; 0x07
    142e:	24 81       	ldd	r18, Z+4	; 0x04
    1430:	35 81       	ldd	r19, Z+5	; 0x05
    1432:	42 17       	cp	r20, r18
    1434:	53 07       	cpc	r21, r19
    1436:	44 f4       	brge	.+16     	; 0x1448 <fputc+0x38>
    1438:	a0 81       	ld	r26, Z
    143a:	b1 81       	ldd	r27, Z+1	; 0x01
    143c:	9d 01       	movw	r18, r26
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	31 83       	std	Z+1, r19	; 0x01
    1444:	20 83       	st	Z, r18
    1446:	8c 93       	st	X, r24
    1448:	26 81       	ldd	r18, Z+6	; 0x06
    144a:	37 81       	ldd	r19, Z+7	; 0x07
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	37 83       	std	Z+7, r19	; 0x07
    1452:	26 83       	std	Z+6, r18	; 0x06
    1454:	14 c0       	rjmp	.+40     	; 0x147e <fputc+0x6e>
    1456:	8b 01       	movw	r16, r22
    1458:	ec 01       	movw	r28, r24
    145a:	fb 01       	movw	r30, r22
    145c:	00 84       	ldd	r0, Z+8	; 0x08
    145e:	f1 85       	ldd	r31, Z+9	; 0x09
    1460:	e0 2d       	mov	r30, r0
    1462:	09 95       	icall
    1464:	89 2b       	or	r24, r25
    1466:	e1 f6       	brne	.-72     	; 0x1420 <fputc+0x10>
    1468:	d8 01       	movw	r26, r16
    146a:	16 96       	adiw	r26, 0x06	; 6
    146c:	8d 91       	ld	r24, X+
    146e:	9c 91       	ld	r25, X
    1470:	17 97       	sbiw	r26, 0x07	; 7
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	17 96       	adiw	r26, 0x07	; 7
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
    147a:	16 97       	sbiw	r26, 0x06	; 6
    147c:	ce 01       	movw	r24, r28
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <__ultoa_invert>:
    1488:	fa 01       	movw	r30, r20
    148a:	aa 27       	eor	r26, r26
    148c:	28 30       	cpi	r18, 0x08	; 8
    148e:	51 f1       	breq	.+84     	; 0x14e4 <__ultoa_invert+0x5c>
    1490:	20 31       	cpi	r18, 0x10	; 16
    1492:	81 f1       	breq	.+96     	; 0x14f4 <__ultoa_invert+0x6c>
    1494:	e8 94       	clt
    1496:	6f 93       	push	r22
    1498:	6e 7f       	andi	r22, 0xFE	; 254
    149a:	6e 5f       	subi	r22, 0xFE	; 254
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	8f 4f       	sbci	r24, 0xFF	; 255
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	af 4f       	sbci	r26, 0xFF	; 255
    14a4:	b1 e0       	ldi	r27, 0x01	; 1
    14a6:	3e d0       	rcall	.+124    	; 0x1524 <__ultoa_invert+0x9c>
    14a8:	b4 e0       	ldi	r27, 0x04	; 4
    14aa:	3c d0       	rcall	.+120    	; 0x1524 <__ultoa_invert+0x9c>
    14ac:	67 0f       	add	r22, r23
    14ae:	78 1f       	adc	r23, r24
    14b0:	89 1f       	adc	r24, r25
    14b2:	9a 1f       	adc	r25, r26
    14b4:	a1 1d       	adc	r26, r1
    14b6:	68 0f       	add	r22, r24
    14b8:	79 1f       	adc	r23, r25
    14ba:	8a 1f       	adc	r24, r26
    14bc:	91 1d       	adc	r25, r1
    14be:	a1 1d       	adc	r26, r1
    14c0:	6a 0f       	add	r22, r26
    14c2:	71 1d       	adc	r23, r1
    14c4:	81 1d       	adc	r24, r1
    14c6:	91 1d       	adc	r25, r1
    14c8:	a1 1d       	adc	r26, r1
    14ca:	20 d0       	rcall	.+64     	; 0x150c <__ultoa_invert+0x84>
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <__ultoa_invert+0x48>
    14ce:	68 94       	set
    14d0:	3f 91       	pop	r19
    14d2:	2a e0       	ldi	r18, 0x0A	; 10
    14d4:	26 9f       	mul	r18, r22
    14d6:	11 24       	eor	r1, r1
    14d8:	30 19       	sub	r19, r0
    14da:	30 5d       	subi	r19, 0xD0	; 208
    14dc:	31 93       	st	Z+, r19
    14de:	de f6       	brtc	.-74     	; 0x1496 <__ultoa_invert+0xe>
    14e0:	cf 01       	movw	r24, r30
    14e2:	08 95       	ret
    14e4:	46 2f       	mov	r20, r22
    14e6:	47 70       	andi	r20, 0x07	; 7
    14e8:	40 5d       	subi	r20, 0xD0	; 208
    14ea:	41 93       	st	Z+, r20
    14ec:	b3 e0       	ldi	r27, 0x03	; 3
    14ee:	0f d0       	rcall	.+30     	; 0x150e <__ultoa_invert+0x86>
    14f0:	c9 f7       	brne	.-14     	; 0x14e4 <__ultoa_invert+0x5c>
    14f2:	f6 cf       	rjmp	.-20     	; 0x14e0 <__ultoa_invert+0x58>
    14f4:	46 2f       	mov	r20, r22
    14f6:	4f 70       	andi	r20, 0x0F	; 15
    14f8:	40 5d       	subi	r20, 0xD0	; 208
    14fa:	4a 33       	cpi	r20, 0x3A	; 58
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <__ultoa_invert+0x7c>
    14fe:	49 5d       	subi	r20, 0xD9	; 217
    1500:	31 fd       	sbrc	r19, 1
    1502:	40 52       	subi	r20, 0x20	; 32
    1504:	41 93       	st	Z+, r20
    1506:	02 d0       	rcall	.+4      	; 0x150c <__ultoa_invert+0x84>
    1508:	a9 f7       	brne	.-22     	; 0x14f4 <__ultoa_invert+0x6c>
    150a:	ea cf       	rjmp	.-44     	; 0x14e0 <__ultoa_invert+0x58>
    150c:	b4 e0       	ldi	r27, 0x04	; 4
    150e:	a6 95       	lsr	r26
    1510:	97 95       	ror	r25
    1512:	87 95       	ror	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	ba 95       	dec	r27
    151a:	c9 f7       	brne	.-14     	; 0x150e <__ultoa_invert+0x86>
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	61 05       	cpc	r22, r1
    1520:	71 05       	cpc	r23, r1
    1522:	08 95       	ret
    1524:	9b 01       	movw	r18, r22
    1526:	ac 01       	movw	r20, r24
    1528:	0a 2e       	mov	r0, r26
    152a:	06 94       	lsr	r0
    152c:	57 95       	ror	r21
    152e:	47 95       	ror	r20
    1530:	37 95       	ror	r19
    1532:	27 95       	ror	r18
    1534:	ba 95       	dec	r27
    1536:	c9 f7       	brne	.-14     	; 0x152a <__ultoa_invert+0xa2>
    1538:	62 0f       	add	r22, r18
    153a:	73 1f       	adc	r23, r19
    153c:	84 1f       	adc	r24, r20
    153e:	95 1f       	adc	r25, r21
    1540:	a0 1d       	adc	r26, r0
    1542:	08 95       	ret

00001544 <__prologue_saves__>:
    1544:	2f 92       	push	r2
    1546:	3f 92       	push	r3
    1548:	4f 92       	push	r4
    154a:	5f 92       	push	r5
    154c:	6f 92       	push	r6
    154e:	7f 92       	push	r7
    1550:	8f 92       	push	r8
    1552:	9f 92       	push	r9
    1554:	af 92       	push	r10
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	ca 1b       	sub	r28, r26
    156e:	db 0b       	sbc	r29, r27
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	09 94       	ijmp

0000157c <__epilogue_restores__>:
    157c:	2a 88       	ldd	r2, Y+18	; 0x12
    157e:	39 88       	ldd	r3, Y+17	; 0x11
    1580:	48 88       	ldd	r4, Y+16	; 0x10
    1582:	5f 84       	ldd	r5, Y+15	; 0x0f
    1584:	6e 84       	ldd	r6, Y+14	; 0x0e
    1586:	7d 84       	ldd	r7, Y+13	; 0x0d
    1588:	8c 84       	ldd	r8, Y+12	; 0x0c
    158a:	9b 84       	ldd	r9, Y+11	; 0x0b
    158c:	aa 84       	ldd	r10, Y+10	; 0x0a
    158e:	b9 84       	ldd	r11, Y+9	; 0x09
    1590:	c8 84       	ldd	r12, Y+8	; 0x08
    1592:	df 80       	ldd	r13, Y+7	; 0x07
    1594:	ee 80       	ldd	r14, Y+6	; 0x06
    1596:	fd 80       	ldd	r15, Y+5	; 0x05
    1598:	0c 81       	ldd	r16, Y+4	; 0x04
    159a:	1b 81       	ldd	r17, Y+3	; 0x03
    159c:	aa 81       	ldd	r26, Y+2	; 0x02
    159e:	b9 81       	ldd	r27, Y+1	; 0x01
    15a0:	ce 0f       	add	r28, r30
    15a2:	d1 1d       	adc	r29, r1
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	ed 01       	movw	r28, r26
    15b0:	08 95       	ret

000015b2 <_exit>:
    15b2:	f8 94       	cli

000015b4 <__stop_program>:
    15b4:	ff cf       	rjmp	.-2      	; 0x15b4 <__stop_program>
