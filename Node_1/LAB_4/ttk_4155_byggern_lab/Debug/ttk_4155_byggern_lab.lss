
ttk_4155_byggern_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800100  00000f9a  0000102e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080042a  0080042a  00001358  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d8  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001148  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001241  00000000  00000000  00004c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  00005e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008de  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de9  00000000  00000000  00006ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_1>
   8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_2>
   c:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_3>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 5f       	subi	r16, 0xF0	; 240
  78:	00 00       	nop
  7a:	00 07       	cpc	r16, r16
  7c:	00 07       	cpc	r16, r16
  7e:	00 14       	cp	r0, r0
  80:	7f 14       	cp	r7, r15
  82:	7f 14       	cp	r7, r15
  84:	24 2a       	or	r2, r20
  86:	7f 2a       	or	r7, r31
  88:	12 23       	and	r17, r18
  8a:	13 08       	sbc	r1, r3
  8c:	64 62       	ori	r22, 0x24	; 36
  8e:	36 49       	sbci	r19, 0x96	; 150
  90:	55 22       	and	r5, r21
  92:	50 00       	.word	0x0050	; ????
  94:	05 03       	mulsu	r16, r21
  96:	00 00       	nop
  98:	00 1c       	adc	r0, r0
  9a:	22 41       	sbci	r18, 0x12	; 18
  9c:	00 00       	nop
  9e:	41 22       	and	r4, r17
  a0:	1c 00       	.word	0x001c	; ????
  a2:	08 2a       	or	r0, r24
  a4:	1c 2a       	or	r1, r28
  a6:	08 08       	sbc	r0, r8
  a8:	08 3e       	cpi	r16, 0xE8	; 232
  aa:	08 08       	sbc	r0, r8
  ac:	00 50       	subi	r16, 0x00	; 0
  ae:	30 00       	.word	0x0030	; ????
  b0:	00 08       	sbc	r0, r0
  b2:	08 08       	sbc	r0, r8
  b4:	08 08       	sbc	r0, r8
  b6:	00 60       	ori	r16, 0x00	; 0
  b8:	60 00       	.word	0x0060	; ????
  ba:	00 20       	and	r0, r0
  bc:	10 08       	sbc	r1, r0
  be:	04 02       	muls	r16, r20
  c0:	3e 51       	subi	r19, 0x1E	; 30
  c2:	49 45       	sbci	r20, 0x59	; 89
  c4:	3e 00       	.word	0x003e	; ????
  c6:	42 7f       	andi	r20, 0xF2	; 242
  c8:	40 00       	.word	0x0040	; ????
  ca:	42 61       	ori	r20, 0x12	; 18
  cc:	51 49       	sbci	r21, 0x91	; 145
  ce:	46 21       	and	r20, r6
  d0:	41 45       	sbci	r20, 0x51	; 81
  d2:	4b 31       	cpi	r20, 0x1B	; 27
  d4:	18 14       	cp	r1, r8
  d6:	12 7f       	andi	r17, 0xF2	; 242
  d8:	10 27       	eor	r17, r16
  da:	45 45       	sbci	r20, 0x55	; 85
  dc:	45 39       	cpi	r20, 0x95	; 149
  de:	3c 4a       	sbci	r19, 0xAC	; 172
  e0:	49 49       	sbci	r20, 0x99	; 153
  e2:	30 01       	movw	r6, r0
  e4:	71 09       	sbc	r23, r1
  e6:	05 03       	mulsu	r16, r21
  e8:	36 49       	sbci	r19, 0x96	; 150
  ea:	49 49       	sbci	r20, 0x99	; 153
  ec:	36 06       	cpc	r3, r22
  ee:	49 49       	sbci	r20, 0x99	; 153
  f0:	29 1e       	adc	r2, r25
  f2:	00 36       	cpi	r16, 0x60	; 96
  f4:	36 00       	.word	0x0036	; ????
  f6:	00 00       	nop
  f8:	56 36       	cpi	r21, 0x66	; 102
  fa:	00 00       	nop
  fc:	00 08       	sbc	r0, r0
  fe:	14 22       	and	r1, r20
 100:	41 14       	cp	r4, r1
 102:	14 14       	cp	r1, r4
 104:	14 14       	cp	r1, r4
 106:	41 22       	and	r4, r17
 108:	14 08       	sbc	r1, r4
 10a:	00 02       	muls	r16, r16
 10c:	01 51       	subi	r16, 0x11	; 17
 10e:	09 06       	cpc	r0, r25
 110:	32 49       	sbci	r19, 0x92	; 146
 112:	79 41       	sbci	r23, 0x19	; 25
 114:	3e 7e       	andi	r19, 0xEE	; 238
 116:	11 11       	cpse	r17, r1
 118:	11 7e       	andi	r17, 0xE1	; 225
 11a:	7f 49       	sbci	r23, 0x9F	; 159
 11c:	49 49       	sbci	r20, 0x99	; 153
 11e:	36 3e       	cpi	r19, 0xE6	; 230
 120:	41 41       	sbci	r20, 0x11	; 17
 122:	41 22       	and	r4, r17
 124:	7f 41       	sbci	r23, 0x1F	; 31
 126:	41 22       	and	r4, r17
 128:	1c 7f       	andi	r17, 0xFC	; 252
 12a:	49 49       	sbci	r20, 0x99	; 153
 12c:	49 41       	sbci	r20, 0x19	; 25
 12e:	7f 09       	sbc	r23, r15
 130:	09 01       	movw	r0, r18
 132:	01 3e       	cpi	r16, 0xE1	; 225
 134:	41 41       	sbci	r20, 0x11	; 17
 136:	51 32       	cpi	r21, 0x21	; 33
 138:	7f 08       	sbc	r7, r15
 13a:	08 08       	sbc	r0, r8
 13c:	7f 00       	.word	0x007f	; ????
 13e:	41 7f       	andi	r20, 0xF1	; 241
 140:	41 00       	.word	0x0041	; ????
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	41 3f       	cpi	r20, 0xF1	; 241
 146:	01 7f       	andi	r16, 0xF1	; 241
 148:	08 14       	cp	r0, r8
 14a:	22 41       	sbci	r18, 0x12	; 18
 14c:	7f 40       	sbci	r23, 0x0F	; 15
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	40 7f       	andi	r20, 0xF0	; 240
 152:	02 04       	cpc	r0, r2
 154:	02 7f       	andi	r16, 0xF2	; 242
 156:	7f 04       	cpc	r7, r15
 158:	08 10       	cpse	r0, r8
 15a:	7f 3e       	cpi	r23, 0xEF	; 239
 15c:	41 41       	sbci	r20, 0x11	; 17
 15e:	41 3e       	cpi	r20, 0xE1	; 225
 160:	7f 09       	sbc	r23, r15
 162:	09 09       	sbc	r16, r9
 164:	06 3e       	cpi	r16, 0xE6	; 230
 166:	41 51       	subi	r20, 0x11	; 17
 168:	21 5e       	subi	r18, 0xE1	; 225
 16a:	7f 09       	sbc	r23, r15
 16c:	19 29       	or	r17, r9
 16e:	46 46       	sbci	r20, 0x66	; 102
 170:	49 49       	sbci	r20, 0x99	; 153
 172:	49 31       	cpi	r20, 0x19	; 25
 174:	01 01       	movw	r0, r2
 176:	7f 01       	movw	r14, r30
 178:	01 3f       	cpi	r16, 0xF1	; 241
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	40 3f       	cpi	r20, 0xF0	; 240
 17e:	1f 20       	and	r1, r15
 180:	40 20       	and	r4, r0
 182:	1f 7f       	andi	r17, 0xFF	; 255
 184:	20 18       	sub	r2, r0
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	63 14       	cp	r6, r3
 18a:	08 14       	cp	r0, r8
 18c:	63 03       	mulsu	r22, r19
 18e:	04 78       	andi	r16, 0x84	; 132
 190:	04 03       	mulsu	r16, r20
 192:	61 51       	subi	r22, 0x11	; 17
 194:	49 45       	sbci	r20, 0x59	; 89
 196:	43 00       	.word	0x0043	; ????
 198:	00 7f       	andi	r16, 0xF0	; 240
 19a:	41 41       	sbci	r20, 0x11	; 17
 19c:	02 04       	cpc	r0, r2
 19e:	08 10       	cpse	r0, r8
 1a0:	20 41       	sbci	r18, 0x10	; 16
 1a2:	41 7f       	andi	r20, 0xF1	; 241
 1a4:	00 00       	nop
 1a6:	04 02       	muls	r16, r20
 1a8:	01 02       	muls	r16, r17
 1aa:	04 40       	sbci	r16, 0x04	; 4
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	00 01       	movw	r0, r0
 1b2:	02 04       	cpc	r0, r2
 1b4:	00 20       	and	r0, r0
 1b6:	54 54       	subi	r21, 0x44	; 68
 1b8:	54 78       	andi	r21, 0x84	; 132
 1ba:	7f 48       	sbci	r23, 0x8F	; 143
 1bc:	44 44       	sbci	r20, 0x44	; 68
 1be:	38 38       	cpi	r19, 0x88	; 136
 1c0:	44 44       	sbci	r20, 0x44	; 68
 1c2:	44 20       	and	r4, r4
 1c4:	38 44       	sbci	r19, 0x48	; 72
 1c6:	44 48       	sbci	r20, 0x84	; 132
 1c8:	7f 38       	cpi	r23, 0x8F	; 143
 1ca:	54 54       	subi	r21, 0x44	; 68
 1cc:	54 18       	sub	r5, r4
 1ce:	08 7e       	andi	r16, 0xE8	; 232
 1d0:	09 01       	movw	r0, r18
 1d2:	02 08       	sbc	r0, r2
 1d4:	14 54       	subi	r17, 0x44	; 68
 1d6:	54 3c       	cpi	r21, 0xC4	; 196
 1d8:	7f 08       	sbc	r7, r15
 1da:	04 04       	cpc	r0, r4
 1dc:	78 00       	.word	0x0078	; ????
 1de:	44 7d       	andi	r20, 0xD4	; 212
 1e0:	40 00       	.word	0x0040	; ????
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	44 3d       	cpi	r20, 0xD4	; 212
 1e6:	00 00       	nop
 1e8:	7f 10       	cpse	r7, r15
 1ea:	28 44       	sbci	r18, 0x48	; 72
 1ec:	00 41       	sbci	r16, 0x10	; 16
 1ee:	7f 40       	sbci	r23, 0x0F	; 15
 1f0:	00 7c       	andi	r16, 0xC0	; 192
 1f2:	04 18       	sub	r0, r4
 1f4:	04 78       	andi	r16, 0x84	; 132
 1f6:	7c 08       	sbc	r7, r12
 1f8:	04 04       	cpc	r0, r4
 1fa:	78 38       	cpi	r23, 0x88	; 136
 1fc:	44 44       	sbci	r20, 0x44	; 68
 1fe:	44 38       	cpi	r20, 0x84	; 132
 200:	7c 14       	cp	r7, r12
 202:	14 14       	cp	r1, r4
 204:	08 08       	sbc	r0, r8
 206:	14 14       	cp	r1, r4
 208:	18 7c       	andi	r17, 0xC8	; 200
 20a:	7c 08       	sbc	r7, r12
 20c:	04 04       	cpc	r0, r4
 20e:	08 48       	sbci	r16, 0x88	; 136
 210:	54 54       	subi	r21, 0x44	; 68
 212:	54 20       	and	r5, r4
 214:	04 3f       	cpi	r16, 0xF4	; 244
 216:	44 40       	sbci	r20, 0x04	; 4
 218:	20 3c       	cpi	r18, 0xC0	; 192
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	20 7c       	andi	r18, 0xC0	; 192
 21e:	1c 20       	and	r1, r12
 220:	40 20       	and	r4, r0
 222:	1c 3c       	cpi	r17, 0xCC	; 204
 224:	40 30       	cpi	r20, 0x00	; 0
 226:	40 3c       	cpi	r20, 0xC0	; 192
 228:	44 28       	or	r4, r4
 22a:	10 28       	or	r1, r0
 22c:	44 0c       	add	r4, r4
 22e:	50 50       	subi	r21, 0x00	; 0
 230:	50 3c       	cpi	r21, 0xC0	; 192
 232:	44 64       	ori	r20, 0x44	; 68
 234:	54 4c       	sbci	r21, 0xC4	; 196
 236:	44 00       	.word	0x0044	; ????
 238:	08 36       	cpi	r16, 0x68	; 104
 23a:	41 00       	.word	0x0041	; ????
 23c:	00 00       	nop
 23e:	7f 00       	.word	0x007f	; ????
 240:	00 00       	nop
 242:	41 36       	cpi	r20, 0x61	; 97
 244:	08 00       	.word	0x0008	; ????
 246:	02 01       	movw	r0, r4
 248:	03 02       	muls	r16, r19
 24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf ef       	ldi	r28, 0xFF	; 255
 252:	d4 e0       	ldi	r29, 0x04	; 4
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	14 e0       	ldi	r17, 0x04	; 4
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	ea e9       	ldi	r30, 0x9A	; 154
 260:	ff e0       	ldi	r31, 0x0F	; 15
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	aa 32       	cpi	r26, 0x2A	; 42
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	24 e0       	ldi	r18, 0x04	; 4
 270:	aa e2       	ldi	r26, 0x2A	; 42
 272:	b4 e0       	ldi	r27, 0x04	; 4
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	a7 33       	cpi	r26, 0x37	; 55
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 40 02 	call	0x480	; 0x480 <main>
 282:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_drv_init>:
{
	// to do:
	// Change TCCR1A and TCCR1B as a hex value 
	// Change DDRD register to a more correct 8 bit value
	// Change wiring from USB thingy
	set_bit(DDRD, ADC_EXT_CLK_SGN_PIN);
 28a:	81 b3       	in	r24, 0x11	; 17
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1 << WGM13); // Choosing fast PWM
 290:	8e b5       	in	r24, 0x2e	; 46
 292:	80 61       	ori	r24, 0x10	; 16
 294:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM12);	// Choosing fast PWM
 296:	8e b5       	in	r24, 0x2e	; 46
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= ( 1 << WGM11 ); //Choosing fast PWM
 29c:	8f b5       	in	r24, 0x2f	; 47
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << WGM10); // Choosing fast PWM
 2a2:	8f b5       	in	r24, 0x2f	; 47
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A &= ~( 1 << COM1A1); // Toggle Compare
 2a8:	8f b5       	in	r24, 0x2f	; 47
 2aa:	8f 77       	andi	r24, 0x7F	; 127
 2ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= ( 1 << COM1A0); // Toggle Compare
 2ae:	8f b5       	in	r24, 0x2f	; 47
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B1); // Set on Compare
 2b4:	8f b5       	in	r24, 0x2f	; 47
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~( 1 << COM1B0); // Set on Compare
 2ba:	8f b5       	in	r24, 0x2f	; 47
 2bc:	8f 7e       	andi	r24, 0xEF	; 239
 2be:	8f bd       	out	0x2f, r24	; 47
	
		
	TCCR1B &= ~( 1 << CS12); // Prescaler
 2c0:	8e b5       	in	r24, 0x2e	; 46
 2c2:	8b 7f       	andi	r24, 0xFB	; 251
 2c4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( 1 << CS11); // Prescaler
 2c6:	8e b5       	in	r24, 0x2e	; 46
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ( 1 << CS10); // Prescaler
 2cc:	8e b5       	in	r24, 0x2e	; 46
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR1A &= ~(1 << FOC1A);
 2d2:	8f b5       	in	r24, 0x2f	; 47
 2d4:	87 7f       	andi	r24, 0xF7	; 247
 2d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << FOC1B);
 2d8:	8f b5       	in	r24, 0x2f	; 47
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	8f bd       	out	0x2f, r24	; 47
 2de:	08 95       	ret

000002e0 <adc_read>:
		
}

uint8_t adc_read(uint8_t channel)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <adc_read+0x6>
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <adc_read+0x8>
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t adc_value[4] = { 0 };
 2ec:	19 82       	std	Y+1, r1	; 0x01
 2ee:	1a 82       	std	Y+2, r1	; 0x02
 2f0:	1b 82       	std	Y+3, r1	; 0x03
 2f2:	1c 82       	std	Y+4, r1	; 0x04
	volatile char *adc = (char *) 0x1400;
	
	//Writing to ADC register to start getting adc value
	adc[0] = 0;
 2f4:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0xfc9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	91 e3       	ldi	r25, 0x31	; 49
 2fa:	9a 95       	dec	r25
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <adc_read+0x1a>
 2fe:	00 00       	nop
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	0c c0       	rjmp	.+24     	; 0x31e <adc_read+0x3e>
		adc_value[i] = adc[i];
 306:	f9 01       	movw	r30, r18
 308:	fc 5e       	subi	r31, 0xEC	; 236
 30a:	90 81       	ld	r25, Z
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	e2 0f       	add	r30, r18
 316:	f3 1f       	adc	r31, r19
 318:	90 83       	st	Z, r25
	//control the delay!!
	_delay_us(30);
	
	//adc_ch1 = adc[0];
	
	for (uint16_t i = 0; i < 4; i++) {
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	24 30       	cpi	r18, 0x04	; 4
 320:	31 05       	cpc	r19, r1
 322:	88 f3       	brcs	.-30     	; 0x306 <adc_read+0x26>
		adc_value[i] = adc[i];
	}
	
	
	
	return adc_value[channel];
 324:	e1 e0       	ldi	r30, 0x01	; 1
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ec 0f       	add	r30, r28
 32a:	fd 1f       	adc	r31, r29
 32c:	e8 0f       	add	r30, r24
 32e:	f1 1d       	adc	r31, r1
 330:	80 81       	ld	r24, Z
}
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <adc_calibrate>:

void adc_calibrate()
{
	offset_x = adc_read(JOYSTICK_X_CHANNEL);
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
 346:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <offset_x>
	offset_y = adc_read(JOYSTICK_Y_CHANNEL);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
 350:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <__data_end>
	printf("offset_x: %d, offset_y: %d\r\n", offset_x, offset_y);
 354:	1f 92       	push	r1
 356:	8f 93       	push	r24
 358:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <offset_x>
 35c:	1f 92       	push	r1
 35e:	8f 93       	push	r24
 360:	86 eb       	ldi	r24, 0xB6	; 182
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	9f 93       	push	r25
 366:	8f 93       	push	r24
 368:	0e 94 ed 04 	call	0x9da	; 0x9da <printf>
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	08 95       	ret

0000037a <adc_conv_js_val>:

int8_t adc_conv_js_val(uint8_t raw_value, uint8_t offset_value)
{

	if (raw_value >= offset_value) {
 37a:	86 17       	cp	r24, r22
 37c:	a0 f0       	brcs	.+40     	; 0x3a6 <adc_conv_js_val+0x2c>
		return ((raw_value - offset_value) *100 / (ADC_MAX - offset_value));
 37e:	46 2f       	mov	r20, r22
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	24 1b       	sub	r18, r20
 388:	35 0b       	sbc	r19, r21
 38a:	64 e6       	ldi	r22, 0x64	; 100
 38c:	62 9f       	mul	r22, r18
 38e:	c0 01       	movw	r24, r0
 390:	63 9f       	mul	r22, r19
 392:	90 0d       	add	r25, r0
 394:	11 24       	eor	r1, r1
 396:	6f ef       	ldi	r22, 0xFF	; 255
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	64 1b       	sub	r22, r20
 39c:	75 0b       	sbc	r23, r21
 39e:	0e 94 c5 04 	call	0x98a	; 0x98a <__divmodhi4>
 3a2:	86 2f       	mov	r24, r22
 3a4:	08 95       	ret
	}
	return ((raw_value - offset_value) * 100 / offset_value );
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	26 1b       	sub	r18, r22
 3ae:	37 0b       	sbc	r19, r23
 3b0:	44 e6       	ldi	r20, 0x64	; 100
 3b2:	42 9f       	mul	r20, r18
 3b4:	c0 01       	movw	r24, r0
 3b6:	43 9f       	mul	r20, r19
 3b8:	90 0d       	add	r25, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	0e 94 c5 04 	call	0x98a	; 0x98a <__divmodhi4>
 3c0:	86 2f       	mov	r24, r22
}
 3c2:	08 95       	ret

000003c4 <pos_read>:

pos_t pos_read()
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
	pos_t positions;
	positions.X = adc_conv_js_val(adc_read(JOYSTICK_X_CHANNEL), offset_x);
 3c8:	c0 91 2b 04 	lds	r28, 0x042B	; 0x80042b <offset_x>
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
 3d2:	6c 2f       	mov	r22, r28
 3d4:	0e 94 bd 01 	call	0x37a	; 0x37a <adc_conv_js_val>
 3d8:	c8 2f       	mov	r28, r24
	positions.Y = adc_conv_js_val(adc_read(JOYSTICK_Y_CHANNEL), offset_y);
 3da:	d0 91 2a 04 	lds	r29, 0x042A	; 0x80042a <__data_end>
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <adc_read>
 3e4:	6d 2f       	mov	r22, r29
 3e6:	0e 94 bd 01 	call	0x37a	; 0x37a <adc_conv_js_val>
 3ea:	98 2f       	mov	r25, r24
	
	return positions;
}
 3ec:	8c 2f       	mov	r24, r28
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <dir_read>:

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
 3f4:	28 2f       	mov	r18, r24
 3f6:	8a 5b       	subi	r24, 0xBA	; 186
 3f8:	8d 38       	cpi	r24, 0x8D	; 141
 3fa:	48 f4       	brcc	.+18     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 3fc:	89 2f       	mov	r24, r25
 3fe:	9a 5b       	subi	r25, 0xBA	; 186
 400:	9d 38       	cpi	r25, 0x8D	; 141
 402:	d8 f0       	brcs	.+54     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
			return NEUTRAL;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 404:	87 34       	cpi	r24, 0x47	; 71
 406:	dc f4       	brge	.+54     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
			return UP;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 408:	86 34       	cpi	r24, 0x46	; 70
 40a:	dc f0       	brlt	.+54     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 40c:	15 c0       	rjmp	.+42     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
			return DOWN;
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
 40e:	27 34       	cpi	r18, 0x47	; 71
 410:	4c f0       	brlt	.+18     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 412:	89 2f       	mov	r24, r25
 414:	9a 5b       	subi	r25, 0xBA	; 186
 416:	9d 38       	cpi	r25, 0x8D	; 141
 418:	b0 f0       	brcs	.+44     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
			return RIGHT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 41a:	87 34       	cpi	r24, 0x47	; 71
 41c:	b4 f4       	brge	.+44     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
			return UP_RIGHT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 41e:	86 34       	cpi	r24, 0x46	; 70
 420:	b4 f0       	brlt	.+44     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 422:	0a c0       	rjmp	.+20     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
			return DOWN_RIGHT;
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
 424:	26 34       	cpi	r18, 0x46	; 70
 426:	44 f4       	brge	.+16     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
 428:	89 2f       	mov	r24, r25
 42a:	9a 5b       	subi	r25, 0xBA	; 186
 42c:	9d 38       	cpi	r25, 0x8D	; 141
 42e:	88 f0       	brcs	.+34     	; 0x452 <__DATA_REGION_LENGTH__+0x52>
			return LEFT;
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
 430:	87 34       	cpi	r24, 0x47	; 71
 432:	8c f4       	brge	.+34     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
			return UP_LEFT;
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
 434:	86 34       	cpi	r24, 0x46	; 70
 436:	8c f0       	brlt	.+34     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
			return DOWN_LEFT;
		}
	}
}
 438:	08 95       	ret

dir_t dir_read(pos_t positions)
{	
	if (abs(positions.X) <= ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return NEUTRAL;
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP;
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN;
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	08 95       	ret
		}
	} else if (positions.X > ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return RIGHT;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_RIGHT;
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_RIGHT;
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	08 95       	ret
		}
	} else if (positions.X < ADC_JOYSTICK_THRESHOLD) {
		if (abs(positions.Y) <= ADC_JOYSTICK_THRESHOLD) {
			return LEFT;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
		} else if (positions.Y > ADC_JOYSTICK_THRESHOLD) {
			return UP_LEFT;
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	08 95       	ret
		} else if (positions.Y < ADC_JOYSTICK_THRESHOLD) {
			return DOWN_LEFT;
 45a:	88 e0       	ldi	r24, 0x08	; 8
		}
	}
}
 45c:	08 95       	ret

0000045e <init>:
#include "MISC/ext_button_drv.h"
#include "OLED/oled_drv.h"
#include "MISC/prints.h"

void init(){
	USART_drv_init(MYUBRR);
 45e:	8f e1       	ldi	r24, 0x1F	; 31
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 b6 04 	call	0x96c	; 0x96c <USART_drv_init>
	SRAM_init();
 466:	0e 94 af 04 	call	0x95e	; 0x95e <SRAM_init>
	adc_drv_init();
 46a:	0e 94 45 01 	call	0x28a	; 0x28a <adc_drv_init>
	ext_button_drv_init();
 46e:	0e 94 b9 02 	call	0x572	; 0x572 <ext_button_drv_init>
	adc_calibrate();
 472:	0e 94 a0 01 	call	0x340	; 0x340 <adc_calibrate>
	oled_init();
 476:	0e 94 3c 04 	call	0x878	; 0x878 <oled_init>
	menu_init();
 47a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <menu_init>
 47e:	08 95       	ret

00000480 <main>:
	
	pos_t joystick_pos;
	dir_t joystick_dir;
	uint8_t slider1, slider2;
	
	init();
 480:	0e 94 2f 02 	call	0x45e	; 0x45e <init>
    while (1){
		menu_navigate();
 484:	0e 94 a9 03 	call	0x752	; 0x752 <menu_navigate>
 488:	fd cf       	rjmp	.-6      	; 0x484 <main+0x4>

0000048a <__vector_1>:
#define RIGHT_BUTTON_PIN PD3
#define JOYSTICK_BUTTON_PIN PE0


ISR (INT0_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
	print_uart("Left button pressed\r\n");
 4ac:	83 ed       	ldi	r24, 0xD3	; 211
 4ae:	93 e0       	ldi	r25, 0x03	; 3
 4b0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_uart>
}
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_2>:

ISR (INT1_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	print_uart("Right button pressed\r\n");
 4f8:	89 ee       	ldi	r24, 0xE9	; 233
 4fa:	93 e0       	ldi	r25, 0x03	; 3
 4fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_uart>
}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_3>:

ISR (INT2_vect)
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
	print_uart("Joystick button pressed\r\n");
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	94 e0       	ldi	r25, 0x04	; 4
 548:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_uart>
	enter();
 54c:	0e 94 c3 03 	call	0x786	; 0x786 <enter>
	
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <ext_button_drv_init>:


void ext_button_drv_init(void)
{
	clear_bit(DDRD, LEFT_BUTTON_PIN);
 572:	81 b3       	in	r24, 0x11	; 17
 574:	8b 7f       	andi	r24, 0xFB	; 251
 576:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRD, RIGHT_BUTTON_PIN);
 578:	81 b3       	in	r24, 0x11	; 17
 57a:	87 7f       	andi	r24, 0xF7	; 247
 57c:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRE, JOYSTICK_BUTTON_PIN);
 57e:	86 b1       	in	r24, 0x06	; 6
 580:	8e 7f       	andi	r24, 0xFE	; 254
 582:	86 b9       	out	0x06, r24	; 6
	//Disables global interrupts
	cli();
 584:	f8 94       	cli
	// Enables interrupt on pin INT0, INT1
	set_bit(GICR, LEFT_BUTTON_ISR_REGISTER);
 586:	8b b7       	in	r24, 0x3b	; 59
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	8b bf       	out	0x3b, r24	; 59
	set_bit(GICR, RIGHT_BUTTON_ISR_REGISTER);
 58c:	8b b7       	in	r24, 0x3b	; 59
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	8b bf       	out	0x3b, r24	; 59
	// Configures interrupt rising edge on INT2, INT1 & INT0
	set_bit(MCUCR, ISC11);
 592:	85 b7       	in	r24, 0x35	; 53
 594:	88 60       	ori	r24, 0x08	; 8
 596:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10);
 598:	85 b7       	in	r24, 0x35	; 53
 59a:	84 60       	ori	r24, 0x04	; 4
 59c:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC01);
 59e:	85 b7       	in	r24, 0x35	; 53
 5a0:	82 60       	ori	r24, 0x02	; 2
 5a2:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC00);
 5a4:	85 b7       	in	r24, 0x35	; 53
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	85 bf       	out	0x35, r24	; 53
	//set_bit(EMCUCR, ISC2);
	//Configuring and enabling Joystick interrupt pin INT2
	clear_bit(GICR, JOYSTICK_BUTTON_PIN);
 5aa:	8b b7       	in	r24, 0x3b	; 59
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	8b bf       	out	0x3b, r24	; 59
	clear_bit(EMCUCR, ISC2);
 5b0:	86 b7       	in	r24, 0x36	; 54
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	86 bf       	out	0x36, r24	; 54
	set_bit(GIFR, INTF2);
 5b6:	8a b7       	in	r24, 0x3a	; 58
 5b8:	80 62       	ori	r24, 0x20	; 32
 5ba:	8a bf       	out	0x3a, r24	; 58
	set_bit(GICR, JOYSTICK_BUTTON_ISR_REGISTER);
 5bc:	8b b7       	in	r24, 0x3b	; 59
 5be:	80 62       	ori	r24, 0x20	; 32
 5c0:	8b bf       	out	0x3b, r24	; 59
	
	// Enables global interrupts
	sei();
 5c2:	78 94       	sei
 5c4:	08 95       	ret

000005c6 <print_oled>:
static FILE stdout_oled = FDEV_SETUP_STREAM(oled_print, NULL, _FDEV_SETUP_WRITE);
static FILE stdout_uart = FDEV_SETUP_STREAM(USART_Transmit, USART_Receive, _FDEV_SETUP_RW);


void print_oled(char* string){
	stdout = &stdout_oled;
 5c6:	2e e0       	ldi	r18, 0x0E	; 14
 5c8:	31 e0       	ldi	r19, 0x01	; 1
 5ca:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <__iob+0x3>
 5ce:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <__iob+0x2>
	printf(string);
 5d2:	9f 93       	push	r25
 5d4:	8f 93       	push	r24
 5d6:	0e 94 ed 04 	call	0x9da	; 0x9da <printf>
	
}void print_uart(char* string){
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	08 95       	ret

000005e0 <print_uart>:
	stdout = &stdout_uart;
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	31 e0       	ldi	r19, 0x01	; 1
 5e4:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <__iob+0x3>
 5e8:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <__iob+0x2>
	printf(string);
 5ec:	9f 93       	push	r25
 5ee:	8f 93       	push	r24
 5f0:	0e 94 ed 04 	call	0x9da	; 0x9da <printf>
}
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	08 95       	ret

000005fa <this_end>:
};


void this_end()
{
	print_uart("hei \r\n");
 5fa:	8a e1       	ldi	r24, 0x1A	; 26
 5fc:	94 e0       	ldi	r25, 0x04	; 4
 5fe:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_uart>
 602:	08 95       	ret

00000604 <that_end>:
}

void that_end()
{
	print_uart("hallo \r\n");
 604:	81 e2       	ldi	r24, 0x21	; 33
 606:	94 e0       	ldi	r25, 0x04	; 4
 608:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <print_uart>
 60c:	08 95       	ret

0000060e <print_arrow>:
	last_dir = dir;
}

void print_arrow()
{
	oled_write_data(0x18);
 60e:	88 e1       	ldi	r24, 0x18	; 24
 610:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
	oled_write_data(0x18);
 614:	88 e1       	ldi	r24, 0x18	; 24
 616:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
	oled_write_data(0x7E);
 61a:	8e e7       	ldi	r24, 0x7E	; 126
 61c:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
	oled_write_data(0x3C);
 620:	8c e3       	ldi	r24, 0x3C	; 60
 622:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
	oled_write_data(0x18);
 626:	88 e1       	ldi	r24, 0x18	; 24
 628:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
 62c:	08 95       	ret

0000062e <print_menu_page>:
{
	print_uart("hallo \r\n");
}

void print_menu_page()
{
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	char *menu_page_title = current_menu->title;
 634:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <current_menu>
 638:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <current_menu+0x1>
	oled_reset();
 63c:	0e 94 2c 04 	call	0x858	; 0x858 <oled_reset>
	oled_goto_line(0);
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
	oled_goto_column(40);
 646:	88 e2       	ldi	r24, 0x28	; 40
 648:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
	print_oled(menu_page_title);
 64c:	ce 01       	movw	r24, r28
 64e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <print_oled>
	
	for(uint8_t i = 0; i < current_menu->options; i++)
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	13 c0       	rjmp	.+38     	; 0x67c <print_menu_page+0x4e>
	{
		char *option = current_menu->submenu[i].option_name;
 656:	4c e1       	ldi	r20, 0x1C	; 28
 658:	48 9f       	mul	r20, r24
 65a:	e0 01       	movw	r28, r0
 65c:	49 9f       	mul	r20, r25
 65e:	d0 0d       	add	r29, r0
 660:	11 24       	eor	r1, r1
 662:	68 96       	adiw	r28, 0x18	; 24
 664:	c2 0f       	add	r28, r18
 666:	d3 1f       	adc	r29, r19
		oled_goto_line(i+1);
 668:	1f 5f       	subi	r17, 0xFF	; 255
 66a:	81 2f       	mov	r24, r17
 66c:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
		oled_goto_column(8);
 670:	88 e0       	ldi	r24, 0x08	; 8
 672:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
		print_oled(option);
 676:	ce 01       	movw	r24, r28
 678:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <print_oled>
	oled_reset();
	oled_goto_line(0);
	oled_goto_column(40);
	print_oled(menu_page_title);
	
	for(uint8_t i = 0; i < current_menu->options; i++)
 67c:	81 2f       	mov	r24, r17
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <current_menu>
 684:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <current_menu+0x1>
 688:	f9 01       	movw	r30, r18
 68a:	e4 52       	subi	r30, 0x24	; 36
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	40 81       	ld	r20, Z
 690:	51 81       	ldd	r21, Z+1	; 0x01
 692:	84 17       	cp	r24, r20
 694:	95 07       	cpc	r25, r21
 696:	fc f2       	brlt	.-66     	; 0x656 <print_menu_page+0x28>
		oled_goto_line(i+1);
		oled_goto_column(8);
		print_oled(option);
	}
	
	oled_pos(FIRST_LINE_MENU, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	0e 94 20 04 	call	0x840	; 0x840 <oled_pos>
	print_arrow();
 6a0:	0e 94 07 03 	call	0x60e	; 0x60e <print_arrow>
	arrow_on_line = FIRST_LINE_MENU;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <arrow_on_line>
	
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	08 95       	ret

000006b2 <update_menu>:

void update_menu(void *menu_page)
{
	menu_struct *temp_menu_page = menu_page;
	current_menu = temp_menu_page;
 6b2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <current_menu+0x1>
 6b6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <current_menu>
	num_options_in_menu = temp_menu_page->options;
 6ba:	fc 01       	movw	r30, r24
 6bc:	e4 52       	subi	r30, 0x24	; 36
 6be:	ff 4f       	sbci	r31, 0xFF	; 255
 6c0:	80 81       	ld	r24, Z
 6c2:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <num_options_in_menu>
	print_menu_page();
 6c6:	0e 94 17 03 	call	0x62e	; 0x62e <print_menu_page>
 6ca:	08 95       	ret

000006cc <clear_arrow>:
	oled_write_data(0x3C);
	oled_write_data(0x18);
}

void clear_arrow()
{
 6cc:	cf 93       	push	r28
	for(uint8_t i = 0; i < 5; i++) oled_write_data(0x00);
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <clear_arrow+0xe>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
 6d8:	cf 5f       	subi	r28, 0xFF	; 255
 6da:	c5 30       	cpi	r28, 0x05	; 5
 6dc:	d0 f3       	brcs	.-12     	; 0x6d2 <clear_arrow+0x6>
}
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <move_arrow_up>:

void move_arrow_up()
{
	if(arrow_on_line > FIRST_LINE_MENU && arrow_on_line <= num_options_in_menu)
 6e2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <arrow_on_line>
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	b8 f0       	brcs	.+46     	; 0x718 <move_arrow_up+0x36>
 6ea:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <num_options_in_menu>
 6ee:	98 17       	cp	r25, r24
 6f0:	98 f0       	brcs	.+38     	; 0x718 <move_arrow_up+0x36>
	{
		oled_goto_line(arrow_on_line);
 6f2:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
		oled_goto_column(0);
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
		clear_arrow();
 6fc:	0e 94 66 03 	call	0x6cc	; 0x6cc <clear_arrow>
		arrow_on_line--;
 700:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <arrow_on_line>
 704:	81 50       	subi	r24, 0x01	; 1
 706:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <arrow_on_line>
		oled_goto_line(arrow_on_line);
 70a:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
		oled_goto_column(0);
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
		print_arrow();
 714:	0e 94 07 03 	call	0x60e	; 0x60e <print_arrow>
 718:	08 95       	ret

0000071a <move_arrow_down>:
	}
}

void move_arrow_down()
{
	if(arrow_on_line >= FIRST_LINE_MENU && arrow_on_line < num_options_in_menu)
 71a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <arrow_on_line>
 71e:	88 23       	and	r24, r24
 720:	b9 f0       	breq	.+46     	; 0x750 <move_arrow_down+0x36>
 722:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <num_options_in_menu>
 726:	89 17       	cp	r24, r25
 728:	98 f4       	brcc	.+38     	; 0x750 <move_arrow_down+0x36>
	{
		oled_goto_line(arrow_on_line);
 72a:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
		oled_goto_column(0);
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
		clear_arrow();
 734:	0e 94 66 03 	call	0x6cc	; 0x6cc <clear_arrow>
		arrow_on_line++;
 738:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <arrow_on_line>
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <arrow_on_line>
		oled_goto_line(arrow_on_line);
 742:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
		oled_goto_column(0);
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
		print_arrow();
 74c:	0e 94 07 03 	call	0x60e	; 0x60e <print_arrow>
 750:	08 95       	ret

00000752 <menu_navigate>:
	num_options_in_menu = temp_menu_page->options;
	print_menu_page();
}

void menu_navigate()
{	
 752:	cf 93       	push	r28
	static dir_t last_dir;
	dir_t dir = dir_read(pos_read());
 754:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <pos_read>
 758:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <dir_read>
 75c:	c8 2f       	mov	r28, r24
	
	
	if(dir == DOWN && dir != last_dir){
 75e:	83 30       	cpi	r24, 0x03	; 3
 760:	39 f4       	brne	.+14     	; 0x770 <menu_navigate+0x1e>
 762:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <last_dir.2325>
 766:	c8 17       	cp	r28, r24
 768:	19 f0       	breq	.+6      	; 0x770 <menu_navigate+0x1e>
		move_arrow_down();
 76a:	0e 94 8d 03 	call	0x71a	; 0x71a <move_arrow_down>
 76e:	07 c0       	rjmp	.+14     	; 0x77e <menu_navigate+0x2c>
	}
	else if(dir == UP && dir != last_dir){
 770:	c2 30       	cpi	r28, 0x02	; 2
 772:	29 f4       	brne	.+10     	; 0x77e <menu_navigate+0x2c>
 774:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <last_dir.2325>
 778:	c8 13       	cpse	r28, r24
		move_arrow_up();
 77a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <move_arrow_up>
	}
	last_dir = dir;
 77e:	c0 93 2c 04 	sts	0x042C, r28	; 0x80042c <last_dir.2325>
}
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <enter>:
		print_arrow();
	}
}

void enter()
{
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	6c 97       	sbiw	r28, 0x1c	; 28
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
	option_struct current_option = current_menu->submenu[arrow_on_line-1];
 79a:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <current_menu>
 79e:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <current_menu+0x1>
 7a2:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <arrow_on_line>
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	31 09       	sbc	r19, r1
 7ac:	4c e1       	ldi	r20, 0x1C	; 28
 7ae:	42 9f       	mul	r20, r18
 7b0:	c0 01       	movw	r24, r0
 7b2:	43 9f       	mul	r20, r19
 7b4:	90 0d       	add	r25, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	e8 0f       	add	r30, r24
 7ba:	f9 1f       	adc	r31, r25
 7bc:	78 96       	adiw	r30, 0x18	; 24
 7be:	8c e1       	ldi	r24, 0x1C	; 28
 7c0:	de 01       	movw	r26, r28
 7c2:	11 96       	adiw	r26, 0x01	; 1
 7c4:	01 90       	ld	r0, Z+
 7c6:	0d 92       	st	X+, r0
 7c8:	8a 95       	dec	r24
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <enter+0x3e>
	(*current_option.callback)(current_option.callback_parameter);
 7cc:	e9 8d       	ldd	r30, Y+25	; 0x19
 7ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
 7d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 7d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 7d4:	09 95       	icall
}
 7d6:	6c 96       	adiw	r28, 0x1c	; 28
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <menu_init>:

void menu_init()
{
	main_menu.submenu[0].callback_parameter = &Sub_menu_1;
 7e8:	ec e1       	ldi	r30, 0x1C	; 28
 7ea:	f1 e0       	ldi	r31, 0x01	; 1
 7ec:	8a ef       	ldi	r24, 0xFA	; 250
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	93 ab       	std	Z+51, r25	; 0x33
 7f2:	82 ab       	std	Z+50, r24	; 0x32
	main_menu.submenu[1].callback_parameter = &Sub_menu_2;
 7f4:	88 ed       	ldi	r24, 0xD8	; 216
 7f6:	92 e0       	ldi	r25, 0x02	; 2
 7f8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <main_menu+0x4f>
 7fc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <main_menu+0x4e>
	Sub_menu_1.submenu[1].callback_parameter = &main_menu;
 800:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <Sub_menu_1+0x4f>
 804:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <Sub_menu_1+0x4e>
	Sub_menu_2.submenu[1].callback_parameter = &main_menu;
 808:	f0 93 27 03 	sts	0x0327, r31	; 0x800327 <Sub_menu_2+0x4f>
 80c:	e0 93 26 03 	sts	0x0326, r30	; 0x800326 <Sub_menu_2+0x4e>
	update_menu(&main_menu);
 810:	cf 01       	movw	r24, r30
 812:	0e 94 59 03 	call	0x6b2	; 0x6b2 <update_menu>
 816:	08 95       	ret

00000818 <oled_write_cmd>:
{
	oled_pos(line, 0);
	for(uint8_t i = 0; i<OLED_COLUMNS; i++) {
		oled_write_data(0b00000000);
	}
}
 818:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xbc9>
 81c:	08 95       	ret

0000081e <oled_goto_line>:
 81e:	80 55       	subi	r24, 0x50	; 80
 820:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 824:	08 95       	ret

00000826 <oled_goto_column>:
 826:	cf 93       	push	r28
 828:	c8 2f       	mov	r28, r24
 82a:	c2 95       	swap	r28
 82c:	cf 70       	andi	r28, 0x0F	; 15
 82e:	8f 70       	andi	r24, 0x0F	; 15
 830:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 834:	8c 2f       	mov	r24, r28
 836:	80 61       	ori	r24, 0x10	; 16
 838:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <oled_pos>:
 840:	cf 93       	push	r28
 842:	c6 2f       	mov	r28, r22
 844:	0e 94 0f 04 	call	0x81e	; 0x81e <oled_goto_line>
 848:	8c 2f       	mov	r24, r28
 84a:	0e 94 13 04 	call	0x826	; 0x826 <oled_goto_column>
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <oled_write_data>:
 852:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xdc9>
 856:	08 95       	ret

00000858 <oled_reset>:
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	c0 e0       	ldi	r28, 0x00	; 0
 85e:	d0 e0       	ldi	r29, 0x00	; 0
 860:	04 c0       	rjmp	.+8      	; 0x86a <oled_reset+0x12>
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>
 868:	21 96       	adiw	r28, 0x01	; 1
 86a:	c1 15       	cp	r28, r1
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	d8 07       	cpc	r29, r24
 870:	c0 f3       	brcs	.-16     	; 0x862 <oled_reset+0xa>
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <oled_init>:
 878:	8e ea       	ldi	r24, 0xAE	; 174
 87a:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 87e:	81 ea       	ldi	r24, 0xA1	; 161
 880:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 884:	8a ed       	ldi	r24, 0xDA	; 218
 886:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 88a:	82 e1       	ldi	r24, 0x12	; 18
 88c:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 890:	88 ec       	ldi	r24, 0xC8	; 200
 892:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 896:	88 ea       	ldi	r24, 0xA8	; 168
 898:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 89c:	8f e3       	ldi	r24, 0x3F	; 63
 89e:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8a2:	85 ed       	ldi	r24, 0xD5	; 213
 8a4:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8a8:	80 e8       	ldi	r24, 0x80	; 128
 8aa:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8ae:	81 e8       	ldi	r24, 0x81	; 129
 8b0:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8ba:	89 ed       	ldi	r24, 0xD9	; 217
 8bc:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8c0:	81 e2       	ldi	r24, 0x21	; 33
 8c2:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8d2:	8b ed       	ldi	r24, 0xDB	; 219
 8d4:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8d8:	80 e3       	ldi	r24, 0x30	; 48
 8da:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8de:	8d ea       	ldi	r24, 0xAD	; 173
 8e0:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8ea:	84 ea       	ldi	r24, 0xA4	; 164
 8ec:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8f0:	86 ea       	ldi	r24, 0xA6	; 166
 8f2:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8f6:	8f ea       	ldi	r24, 0xAF	; 175
 8f8:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 8fc:	81 e2       	ldi	r24, 0x21	; 33
 8fe:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 90e:	82 e2       	ldi	r24, 0x22	; 34
 910:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	0e 94 0c 04 	call	0x818	; 0x818 <oled_write_cmd>
 920:	0e 94 2c 04 	call	0x858	; 0x858 <oled_reset>
 924:	08 95       	ret

00000926 <oled_print>:
	volatile char *oled_data_reg = (char *) 0x1200;
	oled_data_reg[0] = data;
}

void oled_print(char c)
{
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
	uint8_t font_index = c - 32;
 92a:	d0 ee       	ldi	r29, 0xE0	; 224
 92c:	d8 0f       	add	r29, r24

	for(uint8_t i = 0; i < 5; i++){
 92e:	c0 e0       	ldi	r28, 0x00	; 0
 930:	11 c0       	rjmp	.+34     	; 0x954 <oled_print+0x2e>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
 932:	8d 2f       	mov	r24, r29
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	fc 01       	movw	r30, r24
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	e8 0f       	add	r30, r24
 942:	f9 1f       	adc	r31, r25
 944:	ec 0f       	add	r30, r28
 946:	f1 1d       	adc	r31, r1
 948:	e0 59       	subi	r30, 0x90	; 144
 94a:	ff 4f       	sbci	r31, 0xFF	; 255
 94c:	84 91       	lpm	r24, Z
 94e:	0e 94 29 04 	call	0x852	; 0x852 <oled_write_data>

void oled_print(char c)
{
	uint8_t font_index = c - 32;

	for(uint8_t i = 0; i < 5; i++){
 952:	cf 5f       	subi	r28, 0xFF	; 255
 954:	c5 30       	cpi	r28, 0x05	; 5
 956:	68 f3       	brcs	.-38     	; 0x932 <oled_print+0xc>
		oled_write_data(pgm_read_byte(&(font5[font_index][i])));
	}
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	08 95       	ret

0000095e <SRAM_init>:
#include "SRAMdrv.h"

void SRAM_init(){
	MCUCR |= (1 << SRE); //External memory enable
 95e:	85 b7       	in	r24, 0x35	; 53
 960:	80 68       	ori	r24, 0x80	; 128
 962:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Masking PC7-PC4 for JTAG interface
 964:	80 b7       	in	r24, 0x30	; 48
 966:	80 62       	ori	r24, 0x20	; 32
 968:	80 bf       	out	0x30, r24	; 48
 96a:	08 95       	ret

0000096c <USART_drv_init>:

/* Hentet fra ATmega162 datablad */
void USART_drv_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 96c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 96e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 970:	88 e1       	ldi	r24, 0x18	; 24
 972:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 974:	8e e8       	ldi	r24, 0x8E	; 142
 976:	80 bd       	out	0x20, r24	; 32
 978:	08 95       	ret

0000097a <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 97a:	5d 9b       	sbis	0x0b, 5	; 11
 97c:	fe cf       	rjmp	.-4      	; 0x97a <USART_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 97e:	8c b9       	out	0x0c, r24	; 12
 980:	08 95       	ret

00000982 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 982:	5f 9b       	sbis	0x0b, 7	; 11
 984:	fe cf       	rjmp	.-4      	; 0x982 <USART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 986:	8c b1       	in	r24, 0x0c	; 12

}
 988:	08 95       	ret

0000098a <__divmodhi4>:
 98a:	97 fb       	bst	r25, 7
 98c:	07 2e       	mov	r0, r23
 98e:	16 f4       	brtc	.+4      	; 0x994 <__divmodhi4+0xa>
 990:	00 94       	com	r0
 992:	07 d0       	rcall	.+14     	; 0x9a2 <__divmodhi4_neg1>
 994:	77 fd       	sbrc	r23, 7
 996:	09 d0       	rcall	.+18     	; 0x9aa <__divmodhi4_neg2>
 998:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodhi4>
 99c:	07 fc       	sbrc	r0, 7
 99e:	05 d0       	rcall	.+10     	; 0x9aa <__divmodhi4_neg2>
 9a0:	3e f4       	brtc	.+14     	; 0x9b0 <__divmodhi4_exit>

000009a2 <__divmodhi4_neg1>:
 9a2:	90 95       	com	r25
 9a4:	81 95       	neg	r24
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__divmodhi4_neg2>:
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255

000009b0 <__divmodhi4_exit>:
 9b0:	08 95       	ret

000009b2 <__udivmodhi4>:
 9b2:	aa 1b       	sub	r26, r26
 9b4:	bb 1b       	sub	r27, r27
 9b6:	51 e1       	ldi	r21, 0x11	; 17
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <__udivmodhi4_ep>

000009ba <__udivmodhi4_loop>:
 9ba:	aa 1f       	adc	r26, r26
 9bc:	bb 1f       	adc	r27, r27
 9be:	a6 17       	cp	r26, r22
 9c0:	b7 07       	cpc	r27, r23
 9c2:	10 f0       	brcs	.+4      	; 0x9c8 <__udivmodhi4_ep>
 9c4:	a6 1b       	sub	r26, r22
 9c6:	b7 0b       	sbc	r27, r23

000009c8 <__udivmodhi4_ep>:
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	5a 95       	dec	r21
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__udivmodhi4_loop>
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	bc 01       	movw	r22, r24
 9d6:	cd 01       	movw	r24, r26
 9d8:	08 95       	ret

000009da <printf>:
 9da:	a0 e0       	ldi	r26, 0x00	; 0
 9dc:	b0 e0       	ldi	r27, 0x00	; 0
 9de:	e3 ef       	ldi	r30, 0xF3	; 243
 9e0:	f4 e0       	ldi	r31, 0x04	; 4
 9e2:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__prologue_saves__+0x20>
 9e6:	ae 01       	movw	r20, r28
 9e8:	4b 5f       	subi	r20, 0xFB	; 251
 9ea:	5f 4f       	sbci	r21, 0xFF	; 255
 9ec:	fa 01       	movw	r30, r20
 9ee:	61 91       	ld	r22, Z+
 9f0:	71 91       	ld	r23, Z+
 9f2:	af 01       	movw	r20, r30
 9f4:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__iob+0x2>
 9f8:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__iob+0x3>
 9fc:	0e 94 03 05 	call	0xa06	; 0xa06 <vfprintf>
 a00:	e2 e0       	ldi	r30, 0x02	; 2
 a02:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__epilogue_restores__+0x20>

00000a06 <vfprintf>:
 a06:	ab e0       	ldi	r26, 0x0B	; 11
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	e9 e0       	ldi	r30, 0x09	; 9
 a0c:	f5 e0       	ldi	r31, 0x05	; 5
 a0e:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__prologue_saves__>
 a12:	6c 01       	movw	r12, r24
 a14:	7b 01       	movw	r14, r22
 a16:	8a 01       	movw	r16, r20
 a18:	fc 01       	movw	r30, r24
 a1a:	17 82       	std	Z+7, r1	; 0x07
 a1c:	16 82       	std	Z+6, r1	; 0x06
 a1e:	83 81       	ldd	r24, Z+3	; 0x03
 a20:	81 ff       	sbrs	r24, 1
 a22:	cc c1       	rjmp	.+920    	; 0xdbc <vfprintf+0x3b6>
 a24:	ce 01       	movw	r24, r28
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	3c 01       	movw	r6, r24
 a2a:	f6 01       	movw	r30, r12
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	f7 01       	movw	r30, r14
 a30:	93 fd       	sbrc	r25, 3
 a32:	85 91       	lpm	r24, Z+
 a34:	93 ff       	sbrs	r25, 3
 a36:	81 91       	ld	r24, Z+
 a38:	7f 01       	movw	r14, r30
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <vfprintf+0x3a>
 a3e:	ba c1       	rjmp	.+884    	; 0xdb4 <vfprintf+0x3ae>
 a40:	85 32       	cpi	r24, 0x25	; 37
 a42:	39 f4       	brne	.+14     	; 0xa52 <vfprintf+0x4c>
 a44:	93 fd       	sbrc	r25, 3
 a46:	85 91       	lpm	r24, Z+
 a48:	93 ff       	sbrs	r25, 3
 a4a:	81 91       	ld	r24, Z+
 a4c:	7f 01       	movw	r14, r30
 a4e:	85 32       	cpi	r24, 0x25	; 37
 a50:	29 f4       	brne	.+10     	; 0xa5c <vfprintf+0x56>
 a52:	b6 01       	movw	r22, r12
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 a5a:	e7 cf       	rjmp	.-50     	; 0xa2a <vfprintf+0x24>
 a5c:	91 2c       	mov	r9, r1
 a5e:	21 2c       	mov	r2, r1
 a60:	31 2c       	mov	r3, r1
 a62:	ff e1       	ldi	r31, 0x1F	; 31
 a64:	f3 15       	cp	r31, r3
 a66:	d8 f0       	brcs	.+54     	; 0xa9e <vfprintf+0x98>
 a68:	8b 32       	cpi	r24, 0x2B	; 43
 a6a:	79 f0       	breq	.+30     	; 0xa8a <vfprintf+0x84>
 a6c:	38 f4       	brcc	.+14     	; 0xa7c <vfprintf+0x76>
 a6e:	80 32       	cpi	r24, 0x20	; 32
 a70:	79 f0       	breq	.+30     	; 0xa90 <vfprintf+0x8a>
 a72:	83 32       	cpi	r24, 0x23	; 35
 a74:	a1 f4       	brne	.+40     	; 0xa9e <vfprintf+0x98>
 a76:	23 2d       	mov	r18, r3
 a78:	20 61       	ori	r18, 0x10	; 16
 a7a:	1d c0       	rjmp	.+58     	; 0xab6 <vfprintf+0xb0>
 a7c:	8d 32       	cpi	r24, 0x2D	; 45
 a7e:	61 f0       	breq	.+24     	; 0xa98 <vfprintf+0x92>
 a80:	80 33       	cpi	r24, 0x30	; 48
 a82:	69 f4       	brne	.+26     	; 0xa9e <vfprintf+0x98>
 a84:	23 2d       	mov	r18, r3
 a86:	21 60       	ori	r18, 0x01	; 1
 a88:	16 c0       	rjmp	.+44     	; 0xab6 <vfprintf+0xb0>
 a8a:	83 2d       	mov	r24, r3
 a8c:	82 60       	ori	r24, 0x02	; 2
 a8e:	38 2e       	mov	r3, r24
 a90:	e3 2d       	mov	r30, r3
 a92:	e4 60       	ori	r30, 0x04	; 4
 a94:	3e 2e       	mov	r3, r30
 a96:	2a c0       	rjmp	.+84     	; 0xaec <vfprintf+0xe6>
 a98:	f3 2d       	mov	r31, r3
 a9a:	f8 60       	ori	r31, 0x08	; 8
 a9c:	1d c0       	rjmp	.+58     	; 0xad8 <vfprintf+0xd2>
 a9e:	37 fc       	sbrc	r3, 7
 aa0:	2d c0       	rjmp	.+90     	; 0xafc <vfprintf+0xf6>
 aa2:	20 ed       	ldi	r18, 0xD0	; 208
 aa4:	28 0f       	add	r18, r24
 aa6:	2a 30       	cpi	r18, 0x0A	; 10
 aa8:	40 f0       	brcs	.+16     	; 0xaba <vfprintf+0xb4>
 aaa:	8e 32       	cpi	r24, 0x2E	; 46
 aac:	b9 f4       	brne	.+46     	; 0xadc <vfprintf+0xd6>
 aae:	36 fc       	sbrc	r3, 6
 ab0:	81 c1       	rjmp	.+770    	; 0xdb4 <vfprintf+0x3ae>
 ab2:	23 2d       	mov	r18, r3
 ab4:	20 64       	ori	r18, 0x40	; 64
 ab6:	32 2e       	mov	r3, r18
 ab8:	19 c0       	rjmp	.+50     	; 0xaec <vfprintf+0xe6>
 aba:	36 fe       	sbrs	r3, 6
 abc:	06 c0       	rjmp	.+12     	; 0xaca <vfprintf+0xc4>
 abe:	8a e0       	ldi	r24, 0x0A	; 10
 ac0:	98 9e       	mul	r9, r24
 ac2:	20 0d       	add	r18, r0
 ac4:	11 24       	eor	r1, r1
 ac6:	92 2e       	mov	r9, r18
 ac8:	11 c0       	rjmp	.+34     	; 0xaec <vfprintf+0xe6>
 aca:	ea e0       	ldi	r30, 0x0A	; 10
 acc:	2e 9e       	mul	r2, r30
 ace:	20 0d       	add	r18, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	22 2e       	mov	r2, r18
 ad4:	f3 2d       	mov	r31, r3
 ad6:	f0 62       	ori	r31, 0x20	; 32
 ad8:	3f 2e       	mov	r3, r31
 ada:	08 c0       	rjmp	.+16     	; 0xaec <vfprintf+0xe6>
 adc:	8c 36       	cpi	r24, 0x6C	; 108
 ade:	21 f4       	brne	.+8      	; 0xae8 <vfprintf+0xe2>
 ae0:	83 2d       	mov	r24, r3
 ae2:	80 68       	ori	r24, 0x80	; 128
 ae4:	38 2e       	mov	r3, r24
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <vfprintf+0xe6>
 ae8:	88 36       	cpi	r24, 0x68	; 104
 aea:	41 f4       	brne	.+16     	; 0xafc <vfprintf+0xf6>
 aec:	f7 01       	movw	r30, r14
 aee:	93 fd       	sbrc	r25, 3
 af0:	85 91       	lpm	r24, Z+
 af2:	93 ff       	sbrs	r25, 3
 af4:	81 91       	ld	r24, Z+
 af6:	7f 01       	movw	r14, r30
 af8:	81 11       	cpse	r24, r1
 afa:	b3 cf       	rjmp	.-154    	; 0xa62 <vfprintf+0x5c>
 afc:	98 2f       	mov	r25, r24
 afe:	9f 7d       	andi	r25, 0xDF	; 223
 b00:	95 54       	subi	r25, 0x45	; 69
 b02:	93 30       	cpi	r25, 0x03	; 3
 b04:	28 f4       	brcc	.+10     	; 0xb10 <vfprintf+0x10a>
 b06:	0c 5f       	subi	r16, 0xFC	; 252
 b08:	1f 4f       	sbci	r17, 0xFF	; 255
 b0a:	9f e3       	ldi	r25, 0x3F	; 63
 b0c:	99 83       	std	Y+1, r25	; 0x01
 b0e:	0d c0       	rjmp	.+26     	; 0xb2a <vfprintf+0x124>
 b10:	83 36       	cpi	r24, 0x63	; 99
 b12:	31 f0       	breq	.+12     	; 0xb20 <vfprintf+0x11a>
 b14:	83 37       	cpi	r24, 0x73	; 115
 b16:	71 f0       	breq	.+28     	; 0xb34 <vfprintf+0x12e>
 b18:	83 35       	cpi	r24, 0x53	; 83
 b1a:	09 f0       	breq	.+2      	; 0xb1e <vfprintf+0x118>
 b1c:	59 c0       	rjmp	.+178    	; 0xbd0 <vfprintf+0x1ca>
 b1e:	21 c0       	rjmp	.+66     	; 0xb62 <vfprintf+0x15c>
 b20:	f8 01       	movw	r30, r16
 b22:	80 81       	ld	r24, Z
 b24:	89 83       	std	Y+1, r24	; 0x01
 b26:	0e 5f       	subi	r16, 0xFE	; 254
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	88 24       	eor	r8, r8
 b2c:	83 94       	inc	r8
 b2e:	91 2c       	mov	r9, r1
 b30:	53 01       	movw	r10, r6
 b32:	13 c0       	rjmp	.+38     	; 0xb5a <vfprintf+0x154>
 b34:	28 01       	movw	r4, r16
 b36:	f2 e0       	ldi	r31, 0x02	; 2
 b38:	4f 0e       	add	r4, r31
 b3a:	51 1c       	adc	r5, r1
 b3c:	f8 01       	movw	r30, r16
 b3e:	a0 80       	ld	r10, Z
 b40:	b1 80       	ldd	r11, Z+1	; 0x01
 b42:	36 fe       	sbrs	r3, 6
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <vfprintf+0x146>
 b46:	69 2d       	mov	r22, r9
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x14a>
 b4c:	6f ef       	ldi	r22, 0xFF	; 255
 b4e:	7f ef       	ldi	r23, 0xFF	; 255
 b50:	c5 01       	movw	r24, r10
 b52:	0e 94 ef 06 	call	0xdde	; 0xdde <strnlen>
 b56:	4c 01       	movw	r8, r24
 b58:	82 01       	movw	r16, r4
 b5a:	f3 2d       	mov	r31, r3
 b5c:	ff 77       	andi	r31, 0x7F	; 127
 b5e:	3f 2e       	mov	r3, r31
 b60:	16 c0       	rjmp	.+44     	; 0xb8e <vfprintf+0x188>
 b62:	28 01       	movw	r4, r16
 b64:	22 e0       	ldi	r18, 0x02	; 2
 b66:	42 0e       	add	r4, r18
 b68:	51 1c       	adc	r5, r1
 b6a:	f8 01       	movw	r30, r16
 b6c:	a0 80       	ld	r10, Z
 b6e:	b1 80       	ldd	r11, Z+1	; 0x01
 b70:	36 fe       	sbrs	r3, 6
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x174>
 b74:	69 2d       	mov	r22, r9
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x178>
 b7a:	6f ef       	ldi	r22, 0xFF	; 255
 b7c:	7f ef       	ldi	r23, 0xFF	; 255
 b7e:	c5 01       	movw	r24, r10
 b80:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <strnlen_P>
 b84:	4c 01       	movw	r8, r24
 b86:	f3 2d       	mov	r31, r3
 b88:	f0 68       	ori	r31, 0x80	; 128
 b8a:	3f 2e       	mov	r3, r31
 b8c:	82 01       	movw	r16, r4
 b8e:	33 fc       	sbrc	r3, 3
 b90:	1b c0       	rjmp	.+54     	; 0xbc8 <vfprintf+0x1c2>
 b92:	82 2d       	mov	r24, r2
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	88 16       	cp	r8, r24
 b98:	99 06       	cpc	r9, r25
 b9a:	b0 f4       	brcc	.+44     	; 0xbc8 <vfprintf+0x1c2>
 b9c:	b6 01       	movw	r22, r12
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 ba6:	2a 94       	dec	r2
 ba8:	f4 cf       	rjmp	.-24     	; 0xb92 <vfprintf+0x18c>
 baa:	f5 01       	movw	r30, r10
 bac:	37 fc       	sbrc	r3, 7
 bae:	85 91       	lpm	r24, Z+
 bb0:	37 fe       	sbrs	r3, 7
 bb2:	81 91       	ld	r24, Z+
 bb4:	5f 01       	movw	r10, r30
 bb6:	b6 01       	movw	r22, r12
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 bbe:	21 10       	cpse	r2, r1
 bc0:	2a 94       	dec	r2
 bc2:	21 e0       	ldi	r18, 0x01	; 1
 bc4:	82 1a       	sub	r8, r18
 bc6:	91 08       	sbc	r9, r1
 bc8:	81 14       	cp	r8, r1
 bca:	91 04       	cpc	r9, r1
 bcc:	71 f7       	brne	.-36     	; 0xbaa <vfprintf+0x1a4>
 bce:	e8 c0       	rjmp	.+464    	; 0xda0 <vfprintf+0x39a>
 bd0:	84 36       	cpi	r24, 0x64	; 100
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <vfprintf+0x1d2>
 bd4:	89 36       	cpi	r24, 0x69	; 105
 bd6:	41 f5       	brne	.+80     	; 0xc28 <vfprintf+0x222>
 bd8:	f8 01       	movw	r30, r16
 bda:	37 fe       	sbrs	r3, 7
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <vfprintf+0x1e6>
 bde:	60 81       	ld	r22, Z
 be0:	71 81       	ldd	r23, Z+1	; 0x01
 be2:	82 81       	ldd	r24, Z+2	; 0x02
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	0c 5f       	subi	r16, 0xFC	; 252
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	08 c0       	rjmp	.+16     	; 0xbfc <vfprintf+0x1f6>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	07 2e       	mov	r0, r23
 bf2:	00 0c       	add	r0, r0
 bf4:	88 0b       	sbc	r24, r24
 bf6:	99 0b       	sbc	r25, r25
 bf8:	0e 5f       	subi	r16, 0xFE	; 254
 bfa:	1f 4f       	sbci	r17, 0xFF	; 255
 bfc:	f3 2d       	mov	r31, r3
 bfe:	ff 76       	andi	r31, 0x6F	; 111
 c00:	3f 2e       	mov	r3, r31
 c02:	97 ff       	sbrs	r25, 7
 c04:	09 c0       	rjmp	.+18     	; 0xc18 <vfprintf+0x212>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	f0 68       	ori	r31, 0x80	; 128
 c16:	3f 2e       	mov	r3, r31
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	a3 01       	movw	r20, r6
 c1e:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 c22:	88 2e       	mov	r8, r24
 c24:	86 18       	sub	r8, r6
 c26:	45 c0       	rjmp	.+138    	; 0xcb2 <vfprintf+0x2ac>
 c28:	85 37       	cpi	r24, 0x75	; 117
 c2a:	31 f4       	brne	.+12     	; 0xc38 <vfprintf+0x232>
 c2c:	23 2d       	mov	r18, r3
 c2e:	2f 7e       	andi	r18, 0xEF	; 239
 c30:	b2 2e       	mov	r11, r18
 c32:	2a e0       	ldi	r18, 0x0A	; 10
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	25 c0       	rjmp	.+74     	; 0xc82 <vfprintf+0x27c>
 c38:	93 2d       	mov	r25, r3
 c3a:	99 7f       	andi	r25, 0xF9	; 249
 c3c:	b9 2e       	mov	r11, r25
 c3e:	8f 36       	cpi	r24, 0x6F	; 111
 c40:	c1 f0       	breq	.+48     	; 0xc72 <vfprintf+0x26c>
 c42:	18 f4       	brcc	.+6      	; 0xc4a <vfprintf+0x244>
 c44:	88 35       	cpi	r24, 0x58	; 88
 c46:	79 f0       	breq	.+30     	; 0xc66 <vfprintf+0x260>
 c48:	b5 c0       	rjmp	.+362    	; 0xdb4 <vfprintf+0x3ae>
 c4a:	80 37       	cpi	r24, 0x70	; 112
 c4c:	19 f0       	breq	.+6      	; 0xc54 <vfprintf+0x24e>
 c4e:	88 37       	cpi	r24, 0x78	; 120
 c50:	21 f0       	breq	.+8      	; 0xc5a <vfprintf+0x254>
 c52:	b0 c0       	rjmp	.+352    	; 0xdb4 <vfprintf+0x3ae>
 c54:	e9 2f       	mov	r30, r25
 c56:	e0 61       	ori	r30, 0x10	; 16
 c58:	be 2e       	mov	r11, r30
 c5a:	b4 fe       	sbrs	r11, 4
 c5c:	0d c0       	rjmp	.+26     	; 0xc78 <vfprintf+0x272>
 c5e:	fb 2d       	mov	r31, r11
 c60:	f4 60       	ori	r31, 0x04	; 4
 c62:	bf 2e       	mov	r11, r31
 c64:	09 c0       	rjmp	.+18     	; 0xc78 <vfprintf+0x272>
 c66:	34 fe       	sbrs	r3, 4
 c68:	0a c0       	rjmp	.+20     	; 0xc7e <vfprintf+0x278>
 c6a:	29 2f       	mov	r18, r25
 c6c:	26 60       	ori	r18, 0x06	; 6
 c6e:	b2 2e       	mov	r11, r18
 c70:	06 c0       	rjmp	.+12     	; 0xc7e <vfprintf+0x278>
 c72:	28 e0       	ldi	r18, 0x08	; 8
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x27c>
 c78:	20 e1       	ldi	r18, 0x10	; 16
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x27c>
 c7e:	20 e1       	ldi	r18, 0x10	; 16
 c80:	32 e0       	ldi	r19, 0x02	; 2
 c82:	f8 01       	movw	r30, r16
 c84:	b7 fe       	sbrs	r11, 7
 c86:	07 c0       	rjmp	.+14     	; 0xc96 <vfprintf+0x290>
 c88:	60 81       	ld	r22, Z
 c8a:	71 81       	ldd	r23, Z+1	; 0x01
 c8c:	82 81       	ldd	r24, Z+2	; 0x02
 c8e:	93 81       	ldd	r25, Z+3	; 0x03
 c90:	0c 5f       	subi	r16, 0xFC	; 252
 c92:	1f 4f       	sbci	r17, 0xFF	; 255
 c94:	06 c0       	rjmp	.+12     	; 0xca2 <vfprintf+0x29c>
 c96:	60 81       	ld	r22, Z
 c98:	71 81       	ldd	r23, Z+1	; 0x01
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 5f       	subi	r16, 0xFE	; 254
 ca0:	1f 4f       	sbci	r17, 0xFF	; 255
 ca2:	a3 01       	movw	r20, r6
 ca4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 ca8:	88 2e       	mov	r8, r24
 caa:	86 18       	sub	r8, r6
 cac:	fb 2d       	mov	r31, r11
 cae:	ff 77       	andi	r31, 0x7F	; 127
 cb0:	3f 2e       	mov	r3, r31
 cb2:	36 fe       	sbrs	r3, 6
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <vfprintf+0x2ca>
 cb6:	23 2d       	mov	r18, r3
 cb8:	2e 7f       	andi	r18, 0xFE	; 254
 cba:	a2 2e       	mov	r10, r18
 cbc:	89 14       	cp	r8, r9
 cbe:	58 f4       	brcc	.+22     	; 0xcd6 <vfprintf+0x2d0>
 cc0:	34 fe       	sbrs	r3, 4
 cc2:	0b c0       	rjmp	.+22     	; 0xcda <vfprintf+0x2d4>
 cc4:	32 fc       	sbrc	r3, 2
 cc6:	09 c0       	rjmp	.+18     	; 0xcda <vfprintf+0x2d4>
 cc8:	83 2d       	mov	r24, r3
 cca:	8e 7e       	andi	r24, 0xEE	; 238
 ccc:	a8 2e       	mov	r10, r24
 cce:	05 c0       	rjmp	.+10     	; 0xcda <vfprintf+0x2d4>
 cd0:	b8 2c       	mov	r11, r8
 cd2:	a3 2c       	mov	r10, r3
 cd4:	03 c0       	rjmp	.+6      	; 0xcdc <vfprintf+0x2d6>
 cd6:	b8 2c       	mov	r11, r8
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <vfprintf+0x2d6>
 cda:	b9 2c       	mov	r11, r9
 cdc:	a4 fe       	sbrs	r10, 4
 cde:	0f c0       	rjmp	.+30     	; 0xcfe <vfprintf+0x2f8>
 ce0:	fe 01       	movw	r30, r28
 ce2:	e8 0d       	add	r30, r8
 ce4:	f1 1d       	adc	r31, r1
 ce6:	80 81       	ld	r24, Z
 ce8:	80 33       	cpi	r24, 0x30	; 48
 cea:	21 f4       	brne	.+8      	; 0xcf4 <vfprintf+0x2ee>
 cec:	9a 2d       	mov	r25, r10
 cee:	99 7e       	andi	r25, 0xE9	; 233
 cf0:	a9 2e       	mov	r10, r25
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x300>
 cf4:	a2 fe       	sbrs	r10, 2
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x2fe>
 cf8:	b3 94       	inc	r11
 cfa:	b3 94       	inc	r11
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <vfprintf+0x300>
 cfe:	8a 2d       	mov	r24, r10
 d00:	86 78       	andi	r24, 0x86	; 134
 d02:	09 f0       	breq	.+2      	; 0xd06 <vfprintf+0x300>
 d04:	b3 94       	inc	r11
 d06:	a3 fc       	sbrc	r10, 3
 d08:	11 c0       	rjmp	.+34     	; 0xd2c <vfprintf+0x326>
 d0a:	a0 fe       	sbrs	r10, 0
 d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x314>
 d0e:	b2 14       	cp	r11, r2
 d10:	88 f4       	brcc	.+34     	; 0xd34 <vfprintf+0x32e>
 d12:	28 0c       	add	r2, r8
 d14:	92 2c       	mov	r9, r2
 d16:	9b 18       	sub	r9, r11
 d18:	0e c0       	rjmp	.+28     	; 0xd36 <vfprintf+0x330>
 d1a:	b2 14       	cp	r11, r2
 d1c:	60 f4       	brcc	.+24     	; 0xd36 <vfprintf+0x330>
 d1e:	b6 01       	movw	r22, r12
 d20:	80 e2       	ldi	r24, 0x20	; 32
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d28:	b3 94       	inc	r11
 d2a:	f7 cf       	rjmp	.-18     	; 0xd1a <vfprintf+0x314>
 d2c:	b2 14       	cp	r11, r2
 d2e:	18 f4       	brcc	.+6      	; 0xd36 <vfprintf+0x330>
 d30:	2b 18       	sub	r2, r11
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x332>
 d34:	98 2c       	mov	r9, r8
 d36:	21 2c       	mov	r2, r1
 d38:	a4 fe       	sbrs	r10, 4
 d3a:	10 c0       	rjmp	.+32     	; 0xd5c <vfprintf+0x356>
 d3c:	b6 01       	movw	r22, r12
 d3e:	80 e3       	ldi	r24, 0x30	; 48
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d46:	a2 fe       	sbrs	r10, 2
 d48:	17 c0       	rjmp	.+46     	; 0xd78 <vfprintf+0x372>
 d4a:	a1 fc       	sbrc	r10, 1
 d4c:	03 c0       	rjmp	.+6      	; 0xd54 <vfprintf+0x34e>
 d4e:	88 e7       	ldi	r24, 0x78	; 120
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x352>
 d54:	88 e5       	ldi	r24, 0x58	; 88
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	b6 01       	movw	r22, r12
 d5a:	0c c0       	rjmp	.+24     	; 0xd74 <vfprintf+0x36e>
 d5c:	8a 2d       	mov	r24, r10
 d5e:	86 78       	andi	r24, 0x86	; 134
 d60:	59 f0       	breq	.+22     	; 0xd78 <vfprintf+0x372>
 d62:	a1 fe       	sbrs	r10, 1
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x364>
 d66:	8b e2       	ldi	r24, 0x2B	; 43
 d68:	01 c0       	rjmp	.+2      	; 0xd6c <vfprintf+0x366>
 d6a:	80 e2       	ldi	r24, 0x20	; 32
 d6c:	a7 fc       	sbrc	r10, 7
 d6e:	8d e2       	ldi	r24, 0x2D	; 45
 d70:	b6 01       	movw	r22, r12
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d78:	89 14       	cp	r8, r9
 d7a:	38 f4       	brcc	.+14     	; 0xd8a <vfprintf+0x384>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e3       	ldi	r24, 0x30	; 48
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d86:	9a 94       	dec	r9
 d88:	f7 cf       	rjmp	.-18     	; 0xd78 <vfprintf+0x372>
 d8a:	8a 94       	dec	r8
 d8c:	f3 01       	movw	r30, r6
 d8e:	e8 0d       	add	r30, r8
 d90:	f1 1d       	adc	r31, r1
 d92:	80 81       	ld	r24, Z
 d94:	b6 01       	movw	r22, r12
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d9c:	81 10       	cpse	r8, r1
 d9e:	f5 cf       	rjmp	.-22     	; 0xd8a <vfprintf+0x384>
 da0:	22 20       	and	r2, r2
 da2:	09 f4       	brne	.+2      	; 0xda6 <vfprintf+0x3a0>
 da4:	42 ce       	rjmp	.-892    	; 0xa2a <vfprintf+0x24>
 da6:	b6 01       	movw	r22, r12
 da8:	80 e2       	ldi	r24, 0x20	; 32
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 db0:	2a 94       	dec	r2
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <vfprintf+0x39a>
 db4:	f6 01       	movw	r30, r12
 db6:	86 81       	ldd	r24, Z+6	; 0x06
 db8:	97 81       	ldd	r25, Z+7	; 0x07
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x3ba>
 dbc:	8f ef       	ldi	r24, 0xFF	; 255
 dbe:	9f ef       	ldi	r25, 0xFF	; 255
 dc0:	2b 96       	adiw	r28, 0x0b	; 11
 dc2:	e2 e1       	ldi	r30, 0x12	; 18
 dc4:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__epilogue_restores__>

00000dc8 <strnlen_P>:
 dc8:	fc 01       	movw	r30, r24
 dca:	05 90       	lpm	r0, Z+
 dcc:	61 50       	subi	r22, 0x01	; 1
 dce:	70 40       	sbci	r23, 0x00	; 0
 dd0:	01 10       	cpse	r0, r1
 dd2:	d8 f7       	brcc	.-10     	; 0xdca <strnlen_P+0x2>
 dd4:	80 95       	com	r24
 dd6:	90 95       	com	r25
 dd8:	8e 0f       	add	r24, r30
 dda:	9f 1f       	adc	r25, r31
 ddc:	08 95       	ret

00000dde <strnlen>:
 dde:	fc 01       	movw	r30, r24
 de0:	61 50       	subi	r22, 0x01	; 1
 de2:	70 40       	sbci	r23, 0x00	; 0
 de4:	01 90       	ld	r0, Z+
 de6:	01 10       	cpse	r0, r1
 de8:	d8 f7       	brcc	.-10     	; 0xde0 <strnlen+0x2>
 dea:	80 95       	com	r24
 dec:	90 95       	com	r25
 dee:	8e 0f       	add	r24, r30
 df0:	9f 1f       	adc	r25, r31
 df2:	08 95       	ret

00000df4 <fputc>:
 df4:	0f 93       	push	r16
 df6:	1f 93       	push	r17
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
 dfc:	fb 01       	movw	r30, r22
 dfe:	23 81       	ldd	r18, Z+3	; 0x03
 e00:	21 fd       	sbrc	r18, 1
 e02:	03 c0       	rjmp	.+6      	; 0xe0a <fputc+0x16>
 e04:	8f ef       	ldi	r24, 0xFF	; 255
 e06:	9f ef       	ldi	r25, 0xFF	; 255
 e08:	2c c0       	rjmp	.+88     	; 0xe62 <fputc+0x6e>
 e0a:	22 ff       	sbrs	r18, 2
 e0c:	16 c0       	rjmp	.+44     	; 0xe3a <fputc+0x46>
 e0e:	46 81       	ldd	r20, Z+6	; 0x06
 e10:	57 81       	ldd	r21, Z+7	; 0x07
 e12:	24 81       	ldd	r18, Z+4	; 0x04
 e14:	35 81       	ldd	r19, Z+5	; 0x05
 e16:	42 17       	cp	r20, r18
 e18:	53 07       	cpc	r21, r19
 e1a:	44 f4       	brge	.+16     	; 0xe2c <fputc+0x38>
 e1c:	a0 81       	ld	r26, Z
 e1e:	b1 81       	ldd	r27, Z+1	; 0x01
 e20:	9d 01       	movw	r18, r26
 e22:	2f 5f       	subi	r18, 0xFF	; 255
 e24:	3f 4f       	sbci	r19, 0xFF	; 255
 e26:	31 83       	std	Z+1, r19	; 0x01
 e28:	20 83       	st	Z, r18
 e2a:	8c 93       	st	X, r24
 e2c:	26 81       	ldd	r18, Z+6	; 0x06
 e2e:	37 81       	ldd	r19, Z+7	; 0x07
 e30:	2f 5f       	subi	r18, 0xFF	; 255
 e32:	3f 4f       	sbci	r19, 0xFF	; 255
 e34:	37 83       	std	Z+7, r19	; 0x07
 e36:	26 83       	std	Z+6, r18	; 0x06
 e38:	14 c0       	rjmp	.+40     	; 0xe62 <fputc+0x6e>
 e3a:	8b 01       	movw	r16, r22
 e3c:	ec 01       	movw	r28, r24
 e3e:	fb 01       	movw	r30, r22
 e40:	00 84       	ldd	r0, Z+8	; 0x08
 e42:	f1 85       	ldd	r31, Z+9	; 0x09
 e44:	e0 2d       	mov	r30, r0
 e46:	09 95       	icall
 e48:	89 2b       	or	r24, r25
 e4a:	e1 f6       	brne	.-72     	; 0xe04 <fputc+0x10>
 e4c:	d8 01       	movw	r26, r16
 e4e:	16 96       	adiw	r26, 0x06	; 6
 e50:	8d 91       	ld	r24, X+
 e52:	9c 91       	ld	r25, X
 e54:	17 97       	sbiw	r26, 0x07	; 7
 e56:	01 96       	adiw	r24, 0x01	; 1
 e58:	17 96       	adiw	r26, 0x07	; 7
 e5a:	9c 93       	st	X, r25
 e5c:	8e 93       	st	-X, r24
 e5e:	16 97       	sbiw	r26, 0x06	; 6
 e60:	ce 01       	movw	r24, r28
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	1f 91       	pop	r17
 e68:	0f 91       	pop	r16
 e6a:	08 95       	ret

00000e6c <__ultoa_invert>:
 e6c:	fa 01       	movw	r30, r20
 e6e:	aa 27       	eor	r26, r26
 e70:	28 30       	cpi	r18, 0x08	; 8
 e72:	51 f1       	breq	.+84     	; 0xec8 <__ultoa_invert+0x5c>
 e74:	20 31       	cpi	r18, 0x10	; 16
 e76:	81 f1       	breq	.+96     	; 0xed8 <__ultoa_invert+0x6c>
 e78:	e8 94       	clt
 e7a:	6f 93       	push	r22
 e7c:	6e 7f       	andi	r22, 0xFE	; 254
 e7e:	6e 5f       	subi	r22, 0xFE	; 254
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	8f 4f       	sbci	r24, 0xFF	; 255
 e84:	9f 4f       	sbci	r25, 0xFF	; 255
 e86:	af 4f       	sbci	r26, 0xFF	; 255
 e88:	b1 e0       	ldi	r27, 0x01	; 1
 e8a:	3e d0       	rcall	.+124    	; 0xf08 <__ultoa_invert+0x9c>
 e8c:	b4 e0       	ldi	r27, 0x04	; 4
 e8e:	3c d0       	rcall	.+120    	; 0xf08 <__ultoa_invert+0x9c>
 e90:	67 0f       	add	r22, r23
 e92:	78 1f       	adc	r23, r24
 e94:	89 1f       	adc	r24, r25
 e96:	9a 1f       	adc	r25, r26
 e98:	a1 1d       	adc	r26, r1
 e9a:	68 0f       	add	r22, r24
 e9c:	79 1f       	adc	r23, r25
 e9e:	8a 1f       	adc	r24, r26
 ea0:	91 1d       	adc	r25, r1
 ea2:	a1 1d       	adc	r26, r1
 ea4:	6a 0f       	add	r22, r26
 ea6:	71 1d       	adc	r23, r1
 ea8:	81 1d       	adc	r24, r1
 eaa:	91 1d       	adc	r25, r1
 eac:	a1 1d       	adc	r26, r1
 eae:	20 d0       	rcall	.+64     	; 0xef0 <__ultoa_invert+0x84>
 eb0:	09 f4       	brne	.+2      	; 0xeb4 <__ultoa_invert+0x48>
 eb2:	68 94       	set
 eb4:	3f 91       	pop	r19
 eb6:	2a e0       	ldi	r18, 0x0A	; 10
 eb8:	26 9f       	mul	r18, r22
 eba:	11 24       	eor	r1, r1
 ebc:	30 19       	sub	r19, r0
 ebe:	30 5d       	subi	r19, 0xD0	; 208
 ec0:	31 93       	st	Z+, r19
 ec2:	de f6       	brtc	.-74     	; 0xe7a <__ultoa_invert+0xe>
 ec4:	cf 01       	movw	r24, r30
 ec6:	08 95       	ret
 ec8:	46 2f       	mov	r20, r22
 eca:	47 70       	andi	r20, 0x07	; 7
 ecc:	40 5d       	subi	r20, 0xD0	; 208
 ece:	41 93       	st	Z+, r20
 ed0:	b3 e0       	ldi	r27, 0x03	; 3
 ed2:	0f d0       	rcall	.+30     	; 0xef2 <__ultoa_invert+0x86>
 ed4:	c9 f7       	brne	.-14     	; 0xec8 <__ultoa_invert+0x5c>
 ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <__ultoa_invert+0x58>
 ed8:	46 2f       	mov	r20, r22
 eda:	4f 70       	andi	r20, 0x0F	; 15
 edc:	40 5d       	subi	r20, 0xD0	; 208
 ede:	4a 33       	cpi	r20, 0x3A	; 58
 ee0:	18 f0       	brcs	.+6      	; 0xee8 <__ultoa_invert+0x7c>
 ee2:	49 5d       	subi	r20, 0xD9	; 217
 ee4:	31 fd       	sbrc	r19, 1
 ee6:	40 52       	subi	r20, 0x20	; 32
 ee8:	41 93       	st	Z+, r20
 eea:	02 d0       	rcall	.+4      	; 0xef0 <__ultoa_invert+0x84>
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__ultoa_invert+0x6c>
 eee:	ea cf       	rjmp	.-44     	; 0xec4 <__ultoa_invert+0x58>
 ef0:	b4 e0       	ldi	r27, 0x04	; 4
 ef2:	a6 95       	lsr	r26
 ef4:	97 95       	ror	r25
 ef6:	87 95       	ror	r24
 ef8:	77 95       	ror	r23
 efa:	67 95       	ror	r22
 efc:	ba 95       	dec	r27
 efe:	c9 f7       	brne	.-14     	; 0xef2 <__ultoa_invert+0x86>
 f00:	00 97       	sbiw	r24, 0x00	; 0
 f02:	61 05       	cpc	r22, r1
 f04:	71 05       	cpc	r23, r1
 f06:	08 95       	ret
 f08:	9b 01       	movw	r18, r22
 f0a:	ac 01       	movw	r20, r24
 f0c:	0a 2e       	mov	r0, r26
 f0e:	06 94       	lsr	r0
 f10:	57 95       	ror	r21
 f12:	47 95       	ror	r20
 f14:	37 95       	ror	r19
 f16:	27 95       	ror	r18
 f18:	ba 95       	dec	r27
 f1a:	c9 f7       	brne	.-14     	; 0xf0e <__ultoa_invert+0xa2>
 f1c:	62 0f       	add	r22, r18
 f1e:	73 1f       	adc	r23, r19
 f20:	84 1f       	adc	r24, r20
 f22:	95 1f       	adc	r25, r21
 f24:	a0 1d       	adc	r26, r0
 f26:	08 95       	ret

00000f28 <__prologue_saves__>:
 f28:	2f 92       	push	r2
 f2a:	3f 92       	push	r3
 f2c:	4f 92       	push	r4
 f2e:	5f 92       	push	r5
 f30:	6f 92       	push	r6
 f32:	7f 92       	push	r7
 f34:	8f 92       	push	r8
 f36:	9f 92       	push	r9
 f38:	af 92       	push	r10
 f3a:	bf 92       	push	r11
 f3c:	cf 92       	push	r12
 f3e:	df 92       	push	r13
 f40:	ef 92       	push	r14
 f42:	ff 92       	push	r15
 f44:	0f 93       	push	r16
 f46:	1f 93       	push	r17
 f48:	cf 93       	push	r28
 f4a:	df 93       	push	r29
 f4c:	cd b7       	in	r28, 0x3d	; 61
 f4e:	de b7       	in	r29, 0x3e	; 62
 f50:	ca 1b       	sub	r28, r26
 f52:	db 0b       	sbc	r29, r27
 f54:	0f b6       	in	r0, 0x3f	; 63
 f56:	f8 94       	cli
 f58:	de bf       	out	0x3e, r29	; 62
 f5a:	0f be       	out	0x3f, r0	; 63
 f5c:	cd bf       	out	0x3d, r28	; 61
 f5e:	09 94       	ijmp

00000f60 <__epilogue_restores__>:
 f60:	2a 88       	ldd	r2, Y+18	; 0x12
 f62:	39 88       	ldd	r3, Y+17	; 0x11
 f64:	48 88       	ldd	r4, Y+16	; 0x10
 f66:	5f 84       	ldd	r5, Y+15	; 0x0f
 f68:	6e 84       	ldd	r6, Y+14	; 0x0e
 f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f70:	aa 84       	ldd	r10, Y+10	; 0x0a
 f72:	b9 84       	ldd	r11, Y+9	; 0x09
 f74:	c8 84       	ldd	r12, Y+8	; 0x08
 f76:	df 80       	ldd	r13, Y+7	; 0x07
 f78:	ee 80       	ldd	r14, Y+6	; 0x06
 f7a:	fd 80       	ldd	r15, Y+5	; 0x05
 f7c:	0c 81       	ldd	r16, Y+4	; 0x04
 f7e:	1b 81       	ldd	r17, Y+3	; 0x03
 f80:	aa 81       	ldd	r26, Y+2	; 0x02
 f82:	b9 81       	ldd	r27, Y+1	; 0x01
 f84:	ce 0f       	add	r28, r30
 f86:	d1 1d       	adc	r29, r1
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	ed 01       	movw	r28, r26
 f94:	08 95       	ret

00000f96 <_exit>:
 f96:	f8 94       	cli

00000f98 <__stop_program>:
 f98:	ff cf       	rjmp	.-2      	; 0xf98 <__stop_program>
